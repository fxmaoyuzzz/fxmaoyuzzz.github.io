<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020</title>
    <url>/2020/01/01/2020/</url>
    <content><![CDATA[<p><strong><em>希望2020一切顺利！</em></strong></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>JsonProperty注解</title>
    <url>/2018/04/20/@JsonProperty%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>@JsonProperty注解的使用</p>
<a id="more"></a>

<p>前端传参数过来的时候，使用这个注解，可以获取到前端与注解中同名的属性 。后端处理好结果后，返回给前端的属性名也可以不以实体类属性名为准，而以注解中的属性名为准。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@JsonProperty 此注解用于属性上，作用是把该属性的名称序列化为另外一个名称，如把trueName属性序列化为name</span></span><br><span class="line"><span class="meta">@JsonProperty(&quot;name&quot;)</span>。</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty; </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123; </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@JsonProperty(&quot;name&quot;)</span> </span><br><span class="line">    <span class="keyword">private</span> String trueName; </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTrueName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> trueName; </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTrueName</span><span class="params">(String trueName)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.trueName = trueName; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException; </span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper; </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123; </span><br><span class="line">        Student student = <span class="keyword">new</span> Student(); </span><br><span class="line">        student.setTrueName(<span class="string">&quot;张三&quot;</span>);  </span><br><span class="line"></span><br><span class="line">       <span class="comment">//使用writeValuesAsString的方法就可以把对角转化成json字符串。</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> ObjectMapper().writeValueAsString(student)); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="得到的结果"><a href="#得到的结果" class="headerlink" title="得到的结果"></a>得到的结果</h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Table注解</title>
    <url>/2018/04/02/@Table%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p>当实体类与其映射的数据库表名不同名时需要使用@Table注解说明</p>
<a id="more"></a>

<p>@Table与@Entity并列使用，置于实体类声明语句之前，可用于单独语句行，也可与声明语句同行</p>
<hr>
<h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><h5 id="用于指明数据库的表名，若不指定则以实体类名称作为表名"><a href="#用于指明数据库的表名，若不指定则以实体类名称作为表名" class="headerlink" title="用于指明数据库的表名，若不指定则以实体类名称作为表名"></a>用于指明数据库的表名，若不指定则以实体类名称作为表名</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="此时生成的数据库表DDL"><a href="#此时生成的数据库表DDL" class="headerlink" title="此时生成的数据库表DDL"></a>此时生成的数据库表DDL</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`customer`</span> (</span><br><span class="line">  <span class="string">`ID`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`Age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`ID`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>



<h5 id="指定name属性名称"><a href="#指定name属性名称" class="headerlink" title="指定name属性名称"></a>指定name属性名称</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table(name=&quot;CUSTOMERS&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="此时生成的数据库表DDL-1"><a href="#此时生成的数据库表DDL-1" class="headerlink" title="此时生成的数据库表DDL"></a>此时生成的数据库表DDL</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`customers`</span> (</span><br><span class="line">  <span class="string">`ID`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`Age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`ID`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="catalog属性："><a href="#catalog属性：" class="headerlink" title="catalog属性："></a><strong>catalog属性：</strong></h4><p>catalog和schema用于设置表所属的数据库目录或模式，通常为数据库名</p>
<p>catalog属性用于指定数据库实例名，一般来说persistence.xml文件中必须指定数据库url，url中将包含数据库实例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/jpa&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>当catalog属性不指定时，新创建的表将出现在url指定的数据库实例中<br>当catalog属性设置名称时，若数据库存在和指定名称一致的实例，新创建的表将出现在该实例中，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table(name=&quot;CUSTOMERS&quot;,catalog=&quot;hibernate&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在数据库hibernate实例中将创建一张名叫customers的新表<br>若数据库不存在和指定名称一致的实例，则创建表失败，提示错误<br>ERROR: HHH000388: Unsuccessful: create table hiber.CUSTOMERS (ID integer not null auto_increment, Age integer, Email varchar(255), Name varchar(255), primary key (ID))<br>所以该属性一般不需要设置</p>
<hr>
<h5 id="uniqueConstraints用于设置约束条件，通常不需要设置"><a href="#uniqueConstraints用于设置约束条件，通常不需要设置" class="headerlink" title="uniqueConstraints用于设置约束条件，通常不需要设置"></a>uniqueConstraints用于设置约束条件，通常不需要设置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table(name=&quot;CUSTOMERS&quot;,uniqueConstraints=&#123;@UniqueConstraint(columnNames=&#123;&quot;name&quot;&#125;)&#125;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="数据库DDL"><a href="#数据库DDL" class="headerlink" title="数据库DDL"></a>数据库DDL</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`customers`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`UK_kt165w8o83hunljcal4ufcmk9`</span> (<span class="string">`name`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>



<p>uniqueConstraints={@UniqueConstraint(columnNames={“name”})} 表示name列的值不能重复</p>
<p>约束也可以是多列约束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table(name=&quot;CUSTOMERS&quot;,uniqueConstraints=&#123;@UniqueConstraint(columnNames=&#123;&quot;name&quot;,&quot;email&quot;&#125;)&#125;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>uniqueConstraints={@UniqueConstraint(columnNames={“name”,”email”}) 的意思是customer表中不同同时存在name+email的相同记录 </p>
<p>数据库DDL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`customers`</span> (</span><br><span class="line">  <span class="string">`ID`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`Age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`ID`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`UK_a4gmx9uvdyb7q19sf3seob2l8`</span> (<span class="string">`Name`</span>,<span class="string">`Email`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>



<p>uniqueConstraints是一个数组，可以指定多组约束：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">uniqueConstraints=&#123;<span class="meta">@UniqueConstraint(columnNames=&#123;&quot;name&quot;,&quot;email&quot;&#125;)</span>,<span class="meta">@UniqueConstraint(columnNames=&#123;&quot;name&quot;,&quot;age&quot;&#125;)</span>&#125; </span><br></pre></td></tr></table></figure>



<p>数据库DDL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`customers`</span> (</span><br><span class="line">  <span class="string">`ID`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`Age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`ID`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`UK_a4gmx9uvdyb7q19sf3seob2l8`</span> (<span class="string">`Name`</span>,<span class="string">`Email`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`UK_ag4xexpudoihe3uvpsl9yvhsg`</span> (<span class="string">`Name`</span>,<span class="string">`Age`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>JPA</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>DynamicUpdate注解</title>
    <url>/2018/04/05/DynamicUpdate%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p>MySQL中的字段updatetime，如果想每次操作更改数据表的时候更改update字段需要使用此注解</p>
<a id="more"></a>

<p>首先修改该字段的属性</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Alter</span> <span class="keyword">Table</span> product_category <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> update_time <span class="built_in">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">null</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span></span><br></pre></td></tr></table></figure>

<p>在实体类在加入@updatetime注解</p>
<p>在测试单元中添加对字段的修改**(必须)**</p>
<hr>
<p>DynamicUpdate注解默认为true</p>
<p>当把属性值更改为false时，只修改mysql字段为非空的属性，自动更新的字段updatetime不会更新。</p>
<hr>
<p>比如我们的 updateTime 这个属性对应的是数据表中 update_time 字段，这个字段虽然在数据库里写了自动更新的代码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">`update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;修改时间&#x27;</span>,</span><br></pre></td></tr></table></figure>

<p>但是如果你对记录更新的时候，没有给 updateTime 属性赋值，它是不会改变的，这时我们不想看到的。</p>
<p>如果我们给这个类加上 <strong>@DynamicUpdate</strong> 注解，那么我们的 update_time 字段就会随更改时间而改变了。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>JPA</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6笔记</title>
    <url>/2020/08/16/ES6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>ES6的语法及使用</p>
<a id="more"></a>






<h4 id="ES6笔记"><a href="#ES6笔记" class="headerlink" title="ES6笔记"></a>ES6笔记</h4><hr>
<h5 id="定义变量let和var区别"><a href="#定义变量let和var区别" class="headerlink" title="定义变量let和var区别"></a>定义变量let和var区别</h5><p>​    1、let定义的变量只能在{}内部使用</p>
<p>​    2、let不能多次定义相同名称变量</p>
<hr>
<h5 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h5><p>​    const PI = “3.14”</p>
<p>​    1、声明之后不可改变</p>
<p>​    2、定义常量必须初始化</p>
<hr>
<h5 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、数组解构</span></span><br><span class="line"><span class="comment">// 传统</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b, c)</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> [x, y, z] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(x, y, z)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2、对象解构</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;<span class="attr">name</span>: <span class="string">&#x27;Helen&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="comment">// 传统</span></span><br><span class="line"><span class="keyword">let</span> name1 = user.name</span><br><span class="line"><span class="keyword">let</span> age1 = user.age</span><br><span class="line"><span class="built_in">console</span>.log(name1, age1)</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; =  user<span class="comment">//注意：结构的变量必须是user中的属性</span></span><br><span class="line"><span class="built_in">console</span>.log(name, age)</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h5><p>模板字符串相当于加强版的字符串，用反引号 `,除了作为普通字符串，还可以用来定义多行字符串，还可以在字符串中加入变量和表达式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、多行字符串</span></span><br><span class="line"><span class="keyword">let</span> string1 =  <span class="string">`Hey,</span></span><br><span class="line"><span class="string">can you stop angry now?`</span></span><br><span class="line"><span class="built_in">console</span>.log(string1)</span><br><span class="line"><span class="comment">//输出格式：</span></span><br><span class="line"><span class="comment">// Hey,</span></span><br><span class="line"><span class="comment">// can you stop angry now?</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2、字符串插入变量和表达式。变量名写在 $&#123;&#125; 中，$&#123;&#125; 中可以放入 JavaScript 表达式。</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Mike&quot;</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">27</span></span><br><span class="line"><span class="keyword">let</span> info = <span class="string">`My Name is <span class="subst">$&#123;name&#125;</span>,I am <span class="subst">$&#123;age+<span class="number">1</span>&#125;</span> years old next year.`</span></span><br><span class="line"><span class="built_in">console</span>.log(info)</span><br><span class="line"><span class="comment">// 输出：My Name is Mike,I am 28 years old next year.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 3、字符串中调用函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;have fun!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> string2 = <span class="string">`Game start,<span class="subst">$&#123;f()&#125;</span>`</span></span><br><span class="line"><span class="built_in">console</span>.log(string2);  </span><br><span class="line"><span class="comment">//输出： Game start,have fun!</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="声明对象简写"><a href="#声明对象简写" class="headerlink" title="声明对象简写"></a>声明对象简写</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">12</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Amy&quot;</span></span><br><span class="line"><span class="comment">// 传统</span></span><br><span class="line"><span class="keyword">const</span> person1 = &#123;<span class="attr">age</span>: age, <span class="attr">name</span>: name&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person1)</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> person2 = &#123;age, name&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person2) <span class="comment">//&#123;age: 12, name: &quot;Amy&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="定义方法简写"><a href="#定义方法简写" class="headerlink" title="定义方法简写"></a>定义方法简写</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统</span></span><br><span class="line"><span class="keyword">const</span> person1 = &#123;</span><br><span class="line">    sayHi:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person1.sayHi();<span class="comment">//&quot;Hi&quot;</span></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> person2 = &#123;</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person2.sayHi()  <span class="comment">//&quot;Hi&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="对象扩展运算符"><a href="#对象扩展运算符" class="headerlink" title="对象扩展运算符"></a>对象扩展运算符</h5><p>拓展运算符（…）用于取出参数对象所有可遍历属性然后拷贝到当前对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1、拷贝对象</span></span><br><span class="line"><span class="keyword">let</span> person1 = &#123;<span class="attr">name</span>: <span class="string">&quot;Amy&quot;</span>, <span class="attr">age</span>: <span class="number">15</span>&#125;</span><br><span class="line"><span class="keyword">let</span> someone = &#123; ...person1 &#125;</span><br><span class="line"><span class="built_in">console</span>.log(someone)  <span class="comment">//&#123;name: &quot;Amy&quot;, age: 15&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2、合并对象</span></span><br><span class="line"><span class="keyword">let</span> age = &#123;<span class="attr">age</span>: <span class="number">15</span>&#125;</span><br><span class="line"><span class="keyword">let</span> name = &#123;<span class="attr">name</span>: <span class="string">&quot;Amy&quot;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> person2 = &#123;...age, ...name&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person2)  <span class="comment">//&#123;age: 15, name: &quot;Amy&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><p>箭头函数提供了一种更加简洁的函数书写方式。基本语法是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参数 &#x3D;&gt; 函数体</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统</span></span><br><span class="line"><span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f1(<span class="number">1</span>))</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="params">a</span> =&gt;</span> a</span><br><span class="line"><span class="built_in">console</span>.log(f2(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当箭头函数没有参数或者有多个参数，要用 () 括起来。</span></span><br><span class="line"><span class="comment">// 当箭头函数函数体有多行语句，用 &#123;&#125; 包裹起来，表示代码块，</span></span><br><span class="line"><span class="comment">// 当只有一行语句，并且需要返回结果时，可以省略 &#123;&#125; , 结果会自动返回。</span></span><br><span class="line"><span class="keyword">var</span> f3 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = a+b</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f3(<span class="number">6</span>,<span class="number">2</span>))  <span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 前面代码相当于：</span></span><br><span class="line"><span class="keyword">var</span> f4 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Babel的使用</title>
    <url>/2020/10/15/Babel%E8%BD%AC%E7%A0%81%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Babel的使用及使用示例</p>
<a id="more"></a>

<h4 id="Babel的使用"><a href="#Babel的使用" class="headerlink" title="Babel的使用"></a>Babel的使用</h4><hr>
<h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行执行。</p>
<p>这意味着，你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持。</p>
<hr>
<h5 id="安装命令行转码工具"><a href="#安装命令行转码工具" class="headerlink" title="安装命令行转码工具"></a>安装命令行转码工具</h5><p>Babel提供babel-cli工具，用于命令行转码。它的安装命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --global babel-cli</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看是否安装成功</span></span><br><span class="line">babel --version</span><br></pre></td></tr></table></figure>

<h6 id="查看版本时的错误处理"><a href="#查看版本时的错误处理" class="headerlink" title="查看版本时的错误处理"></a>查看版本时的错误处理</h6><p><strong>错误描述</strong>：babel : 无法加载文件 C:\Users\fxmaoyuzzz\AppData\Roaming\npm\babel.ps1，因为在此系统上禁止运行脚本。</p>
<p><strong>解决方法</strong>：</p>
<p>1.在win10 系统中搜索框 输入 Windows PowerShell，选择 管理员身份运行</p>
<p> 2、使用，win+R打开了powershell命令行之后,输入<em>set-ExecutionPolicy RemoteSigned，然后更改权限为A，最后通过 get-ExecutionPolicy 查看当前的状态</em></p>
<h5 id="Babel的使用示例"><a href="#Babel的使用示例" class="headerlink" title="Babel的使用示例"></a>Babel的使用示例</h5><h6 id="1、初始化项目"><a href="#1、初始化项目" class="headerlink" title="1、初始化项目"></a>1、初始化项目</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<h6 id="2、创建文件"><a href="#2、创建文件" class="headerlink" title="2、创建文件"></a>2、创建文件</h6><p>src/example.js</p>
<p>下面是一段ES6代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 转码前</span><br><span class="line">// 定义数据</span><br><span class="line">let input = [1, 2, 3]</span><br><span class="line">// 将数组的每个元素 +1</span><br><span class="line">input = input.map(item =&gt; item + 1)</span><br><span class="line">console.log(input)</span><br></pre></td></tr></table></figure>

<h6 id="3、创建文件名为-babelrc的文件"><a href="#3、创建文件名为-babelrc的文件" class="headerlink" title="3、创建文件名为.babelrc的文件"></a>3、创建文件名为.babelrc的文件</h6><p>Babel的配置文件是.babelrc，存放在项目的根目录下，该文件用来设置转码规则和插件，基本格式如下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [&quot;es2015&quot;],</span><br><span class="line">    &quot;plugins&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4、安装转码器"><a href="#4、安装转码器" class="headerlink" title="4、安装转码器"></a>4、安装转码器</h6><p>在项目中安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure>

<h6 id="5、转码"><a href="#5、转码" class="headerlink" title="5、转码"></a>5、转码</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 转码结果写入一个文件</span></span><br><span class="line">mkdir dist1</span><br><span class="line"><span class="meta">#</span><span class="bash"> --out-file 或 -o 参数指定输出文件</span></span><br><span class="line">babel src/example.js --out-file dist1/compiled.js</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">babel src/example.js -o dist1/compiled.js</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 整个目录转码</span></span><br><span class="line">mkdir dist2</span><br><span class="line"><span class="meta">#</span><span class="bash"> --out-dir 或 -d 参数指定输出目录</span></span><br><span class="line">babel src --out-dir dist2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">babel src -d dist2</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="es6模块化注意问题："><a href="#es6模块化注意问题：" class="headerlink" title="es6模块化注意问题："></a>es6模块化注意问题：</h5><p>使用es6写法实现模块化操作，在nodejs环境中不能直接执行，需要使用babel把es6代码转换成es5代码，才可以在nodejs中运行。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>Babel</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch学习笔记</title>
    <url>/2020/12/13/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Elasticsearch的相关知识及基本使用</p>
<a id="more"></a>



<h3 id="Elasticsearch学习笔记"><a href="#Elasticsearch学习笔记" class="headerlink" title="Elasticsearch学习笔记"></a>Elasticsearch学习笔记</h3><hr>
<h4 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h4><h5 id="1、Index（索引）"><a href="#1、Index（索引）" class="headerlink" title="1、Index（索引）"></a>1、Index（索引）</h5><p>​        动词，相当于mysql中的insert</p>
<p>​        名词，相当于mysql中的Database</p>
<h5 id="2、Type（类型）"><a href="#2、Type（类型）" class="headerlink" title="2、Type（类型）"></a>2、Type（类型）</h5><p>​        在Index中，可以定义一个或多个类型</p>
<p>​        类似于mysql中的Table；每一种类型的数据放在一起</p>
<h5 id="3、Document（文档）"><a href="#3、Document（文档）" class="headerlink" title="3、Document（文档）"></a>3、Document（文档）</h5><p>​        保存在某个索引（Index）下，某种类型（Type）的一个数据（Document），文档是JSON格式的，Document就像是mysql的某个Table里面的内容</p>
<h5 id="4、倒排索引机制"><a href="#4、倒排索引机制" class="headerlink" title="4、倒排索引机制"></a>4、倒排索引机制</h5><p>​        分词：将整句分拆为单词</p>
<p>​        保存的记录：</p>
<p>​                1-小米手机</p>
<p>​                2-小米</p>
<p>​                3-高粱小米</p>
<p>​                4-小米手机公司</p>
<p>​                5-特价小米</p>
<table>
<thead>
<tr>
<th>词</th>
<th>记录</th>
</tr>
</thead>
<tbody><tr>
<td>小米</td>
<td>1，2，3，4，5</td>
</tr>
<tr>
<td>手机</td>
<td>1，4</td>
</tr>
<tr>
<td>公司</td>
<td>4</td>
</tr>
<tr>
<td>高粱</td>
<td>3</td>
</tr>
<tr>
<td>特价</td>
<td>5</td>
</tr>
</tbody></table>
<p>​        检索：</p>
<p>​            1、小米手机</p>
<p>​            2、小米</p>
<p>​        计算出相关性得分</p>
<p>​            例如：检索小米手机：1号数据两个词命中两个词，4号数据三个词命中两个词</p>
<h4 id="二、安装Elasticsearch"><a href="#二、安装Elasticsearch" class="headerlink" title="二、安装Elasticsearch"></a>二、安装Elasticsearch</h4><h5 id="1、下载镜像安装"><a href="#1、下载镜像安装" class="headerlink" title="1、下载镜像安装"></a>1、下载镜像安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.6.2</span><br><span class="line">docker pull kibana:7.6.2</span><br></pre></td></tr></table></figure>

<h5 id="2、创建目录"><a href="#2、创建目录" class="headerlink" title="2、创建目录"></a>2、创建目录</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建目录</span></span></span><br><span class="line">mkdir -p /mydata/elasticsearch/config</span><br><span class="line">mkdir -p /mydata/elasticsearch/data</span><br><span class="line">echo &quot;http.host: 0.0.0.0&quot; &gt;/mydata/elasticsearch/config/elasticsearch.yml</span><br></pre></td></tr></table></figure>

<h5 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#更改目录权限</span></span></span><br><span class="line">chmod -R 777 /mydata/elasticsearch/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#端口映射与目录挂载</span></span></span><br><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e  &quot;discovery.type=single-node&quot; \</span><br><span class="line">-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; \</span><br><span class="line">-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v  /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-d elasticsearch:7.6.2 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置elasticsearch开机自启</span></span></span><br><span class="line">docker update elasticsearch --restart=always</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#kibana端口映射</span></span></span><br><span class="line">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://[elasticsearch主机IP地址]:9200 -p 5601:5601 -d kibana:7.6.2</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置kibana开机自启</span></span></span><br><span class="line">docker update kibana  --restart=always</span><br></pre></td></tr></table></figure>

<p><img src="/images/es.png"></p>
<h4 id="三、初步检索"><a href="#三、初步检索" class="headerlink" title="三、初步检索"></a>三、初步检索</h4><h5 id="1、cat"><a href="#1、cat" class="headerlink" title="1、cat"></a>1、cat</h5><p>​        GET/_cat/nodes：查看所有节点</p>
<p><img src="/images/es_cat_nodes.png"></p>
<p>​        GET/_cat/health：查看es健康状况</p>
<p><img src="/images/es_cat_health.png"></p>
<p>​        GET/_cat/master：查看主节点</p>
<p><img src="/images/es_cat_master.png"></p>
<p>​        GET/_cat/indices：查看所有索引 </p>
<p><img src="/images/es_cat_indices.png"></p>
<h5 id="2、索引一个文档（保存）"><a href="#2、索引一个文档（保存）" class="headerlink" title="2、索引一个文档（保存）"></a>2、索引一个文档（保存）</h5><p>​        保存一个数据，保存在哪个索引的哪个类型下，指定用哪个唯一标识</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#PUT customer/external/1; 在customer索引下的external类型下保存1号数据为</span></span></span><br><span class="line"></span><br><span class="line">PUT customer/external/1</span><br><span class="line">&#123;</span><br><span class="line"> &quot;name&quot;:&quot;John Doe&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h6><p><img src="/images/es_put.png"></p>
<p>PUT和POST都可以<br>POST新增。如果不指定id，会自动生成id。指定id就会修改这个数据，并新增版本号；<br>PUT可以新增也可以修改。PUT必须指定id；由于PUT需要指定id，我们一般用来做修改操作，不指定id会报错。</p>
<hr>
<p><img src="/images/es_post.png"></p>
<p>带有下划线开头的，称为元数据，反映了当前的基本信息。</p>
<p>​        “_index”: “customer” 表明该数据在哪个数据库下；</p>
<p>​        “_type”: “external”     表明该数据在哪个类型下；</p>
<p>​        “_id”: “1”                    表明被保存数据的id；</p>
<p>​        “_version”: 1,            被保存数据的版本</p>
<p>​        “result”: “created”      这里是创建了一条数据，如果重新put一条数据，则该状态会变为updated，并且版本号也会发生变化。</p>
<h5 id="3、查询文档"><a href="#3、查询文档" class="headerlink" title="3、查询文档"></a>3、查询文档</h5><p><img src="/images/es_get.png"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;customer&quot;</span>,	<span class="comment">//在哪个索引</span></span><br><span class="line">    <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;external&quot;</span>,	<span class="comment">//在哪个类型</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>,				<span class="comment">//记录id</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span>: <span class="number">3</span>,			<span class="comment">//版本号</span></span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">6</span>,			<span class="comment">//并发控制字段，每次更新都会+1，用来做乐观锁</span></span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span>,		<span class="comment">//同上，主分片重新分配，如重启，就会变化</span></span><br><span class="line">    <span class="attr">&quot;found&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##请求后面加上“if_seq_no=1&amp;if_primary_term=1 ”，当序列号匹配的时候，才进行修改，否则不修改。</span><br></pre></td></tr></table></figure>

<h5 id="4、更新文档"><a href="#4、更新文档" class="headerlink" title="4、更新文档"></a>4、更新文档</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#方式一</span><br><span class="line">POST customer/external/1/_update</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;doc&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;John Doe1&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<p><img src="/images/es_update1.png"></p>
<blockquote>
<blockquote>
<blockquote>
<p>方式一更新时会对比元数据，如果多次执行同一更新，当数据不发生变化，则不执行任何操作，版本号和序列号（version和_seq_no）不会发生变化</p>
</blockquote>
</blockquote>
</blockquote>
<p><img src="/images/es_update1_1.png"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#方式二</span><br><span class="line">POST customer/external/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;John Doe2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/es_update2.png"></p>
<blockquote>
<blockquote>
<blockquote>
<p>方式二和方式三执行多次更新时，重复执行同一更新操作，数据可以都更新成功，不会和原来的数据进行对比，版本号和序列号（version和_seq_no）会发生变化</p>
</blockquote>
</blockquote>
</blockquote>
<p><img src="/images/es_update2_1.png"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#方式三</span><br><span class="line">PUT customer/external/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;John Doe3&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">##更新同时增加属性时三种方式都可以更新成功，方式一同样会对比数据</span><br><span class="line">POST customer/external/1/_update</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;doc&quot;</span>:&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Tom&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">20</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5、删除文档"><a href="#5、删除文档" class="headerlink" title="5、删除文档"></a>5、删除文档</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">##删除某一条数据</span><br><span class="line">DELETE customer/external/1</span><br></pre></td></tr></table></figure>

<p><img src="/images/es_delete.png"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">##删除整个索引</span><br><span class="line">DELETE customer</span><br></pre></td></tr></table></figure>

<p><img src="/images/es_delete1.png"></p>
<blockquote>
<blockquote>
<blockquote>
<p>Elasticsearch没有删除类型（Type）</p>
</blockquote>
</blockquote>
</blockquote>
<h5 id="6、bulk批量API"><a href="#6、bulk批量API" class="headerlink" title="6、bulk批量API"></a>6、bulk批量API</h5><p>​    <strong>语法格式：</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;action:&#123;metadata&#125;&#125;\n</span><br><span class="line">&#123;request body  &#125;\n</span><br><span class="line"></span><br><span class="line">&#123;action:&#123;metadata&#125;&#125;\n</span><br><span class="line">&#123;request body  &#125;\n</span><br><span class="line"></span><br><span class="line">#两个为一行</span><br></pre></td></tr></table></figure>

<h6 id="示例1"><a href="#示例1" class="headerlink" title="示例1:"></a>示例1:</h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST customer/external/_bulk</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span>:&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;John Doe&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span>:&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;John Doe&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>​    执行结果：</p>
<p><img src="/images/es_bulk1.png"></p>
<p>​        批量操作时，当某一条执行发生失败时，其他的数据仍然能够接着执行，彼此之间是独立操作的。</p>
<p>​        bulk api以此按顺序执行所有的action（动作）。如果一个单个的动作因任何原因失败，它将继续处理它后面剩余的动作。当bulk api返回时，它将提供每个动作的状态（与发送的顺序相同），所以可以检查是否一个指定的动作是否失败了。</p>
<h6 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#没有指定任何索引的任何类型，说明是对整个ES的批量操作</span><br><span class="line">POST /_bulk</span><br><span class="line">&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;website&quot;,&quot;_type&quot;:&quot;blog&quot;,&quot;_id&quot;:&quot;123&quot;&#125;&#125;	#没有任何数据执行删除是错误的，但不影响整体操作的执行</span><br><span class="line">&#123;&quot;create&quot;:&#123;&quot;_index&quot;:&quot;website&quot;,&quot;_type&quot;:&quot;blog&quot;,&quot;_id&quot;:&quot;123&quot;&#125;&#125;	#创建</span><br><span class="line">&#123;<span class="attr">&quot;title&quot;</span>:<span class="string">&quot;my first blog post&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;website&quot;</span>,<span class="attr">&quot;_type&quot;</span>:<span class="string">&quot;blog&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;title&quot;</span>:<span class="string">&quot;my second blog post&quot;</span>&#125;</span><br><span class="line">&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;website&quot;,&quot;_type&quot;:&quot;blog&quot;,&quot;_id&quot;:&quot;123&quot;&#125;&#125;	#更新</span><br><span class="line">&#123;<span class="attr">&quot;doc&quot;</span>:&#123;<span class="attr">&quot;title&quot;</span>:<span class="string">&quot;my updated blog post&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>​    执行结果：</p>
<p><img src="/images/es_bulk2.png"></p>
<hr>
<h6 id="添加样本测试数据"><a href="#添加样本测试数据" class="headerlink" title="添加样本测试数据"></a>添加样本测试数据</h6><blockquote>
<blockquote>
<p>官方提供的批量样本测试数据：<a href="https://github.com/elastic/elasticsearch/edit/master/docs/src/test/resources/accounts.json">https://github.com/elastic/elasticsearch/edit/master/docs/src/test/resources/accounts.json</a></p>
</blockquote>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST bank/account/_bulk</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="/images/es_bulk3.png"></p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>JPA实体类中主键自增的注解</title>
    <url>/2018/04/02/JPA%E5%AE%9E%E4%BD%93%E7%B1%BB%E4%B8%AD%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E7%9A%84%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p>JPA的注解来定义实体的时候，使用@Id来注解主键属性即可。如果数据库主键是自增长的，需要在增加一个注解@GeneratedValue</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>     <span class="meta">@GeneratedValue(strategy=GenerationType.IDENTITY)</span></span><br><span class="line"><span class="number">2</span>     <span class="meta">@Id</span></span><br><span class="line"><span class="number">3</span>     <span class="keyword">private</span> String id;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="GeneratedValue注解的strategy属性提供四种值："><a href="#GeneratedValue注解的strategy属性提供四种值：" class="headerlink" title="@GeneratedValue注解的strategy属性提供四种值："></a>@GeneratedValue注解的strategy属性提供四种值：</h5><h6 id="–AUTO："><a href="#–AUTO：" class="headerlink" title="–AUTO："></a>–AUTO：</h6><p> 主键由程序控制，是默认选项，不设置即此项。</p>
<h6 id="–IDENTITY："><a href="#–IDENTITY：" class="headerlink" title="–IDENTITY："></a>–IDENTITY：</h6><p>主键由数据库自动生成，即采用数据库ID自增长的方式，Oracle不支持这种方式。</p>
<h6 id="–SEQUENCE："><a href="#–SEQUENCE：" class="headerlink" title="–SEQUENCE："></a>–SEQUENCE：</h6><p>通过数据库的序列产生主键，通过@SequenceGenerator 注解指定序列名，mysql不支持这种方式。</p>
<h6 id="–TABLE："><a href="#–TABLE：" class="headerlink" title="–TABLE："></a>–TABLE：</h6><p>通过特定的数据库表产生主键，使用该策略可以使应用更易于数据库移植。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>JPA</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中BigDecimal类型的加减乘除运算</title>
    <url>/2018/10/22/Java%E4%B8%ADBigDecimal%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<p>Java中BigDecimal类型的加减乘除运算</p>
<a id="more"></a>

<p>BigDecimal提供了精确的数值计算。对Bigdecimal类型值进行加减乘除绝对值的运算，其实就是Bigdecimal的类方法的一些调用。</p>
<hr>
<p>加法：add()</p>
<p>减法：subtract()</p>
<p>乘法：multiply()</p>
<p>除法：divide()</p>
<p>绝对值：abs()</p>
<hr>
<p>BigDecimal有多种构造函数，常用的有2种。建议使用String构造方式，不建议使用double构造方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 强制使用String的构造函数，double也有可能计算不太准确</span></span><br><span class="line"><span class="comment">// 原则是使用BigDecimal并且一定要用String来构造。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(String val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(<span class="keyword">double</span> val)</span></span>;</span><br></pre></td></tr></table></figure>



<hr>
<h5 id="用法Demo："><a href="#用法Demo：" class="headerlink" title="用法Demo："></a>用法Demo：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">al valueSec = <span class="keyword">new</span> BigDecimal(<span class="number">1000000</span>);</span><br><span class="line">        BigDecimal valueThi = <span class="keyword">new</span> BigDecimal(-<span class="number">1000000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//尽量用字符串的形式初始化</span></span><br><span class="line">        BigDecimal stringFir = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;0.005&quot;</span>);</span><br><span class="line">        BigDecimal stringSec = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1000000&quot;</span>);</span><br><span class="line">        BigDecimal stringThi = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;-1000000&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加法</span></span><br><span class="line">        BigDecimal addVal = valueFir.add(valueSec);</span><br><span class="line">        System.out.println(<span class="string">&quot;加法用value结果：&quot;</span> + addVal);</span><br><span class="line">        BigDecimal addStr = stringFir.add(stringSec);</span><br><span class="line">        System.out.println(<span class="string">&quot;加法用string结果：&quot;</span> + addStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//减法</span></span><br><span class="line">        BigDecimal subtractVal = valueFir.subtract(valueSec);</span><br><span class="line">        System.out.println(<span class="string">&quot;减法value结果：&quot;</span> + subtractVal);</span><br><span class="line">        BigDecimal subtractStr = stringFir.subtract(stringSec);</span><br><span class="line">        System.out.println(<span class="string">&quot;减法用string结果：&quot;</span> + subtractStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//乘法</span></span><br><span class="line">        BigDecimal multiplyVal = valueFir.multiply(valueSec);</span><br><span class="line">        System.out.println(<span class="string">&quot;乘法用value结果：&quot;</span> + multiplyVal);</span><br><span class="line">        BigDecimal multiplyStr = stringFir.multiply(stringSec);</span><br><span class="line">        System.out.println(<span class="string">&quot;乘法用string结果：&quot;</span> + multiplyStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绝对值</span></span><br><span class="line">        BigDecimal absVal = valueThi.abs();</span><br><span class="line">        System.out.println(<span class="string">&quot;绝对值用value结果：&quot;</span> + absVal);</span><br><span class="line">        BigDecimal absStr = stringThi.abs();</span><br><span class="line">        System.out.println(<span class="string">&quot;绝对值用string结果：&quot;</span> + absStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//除法</span></span><br><span class="line">        BigDecimal divideVal = valueSec.divide(valueFir, <span class="number">20</span>, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">        System.out.println(<span class="string">&quot;除法用value结果：&quot;</span> + divideVal);</span><br><span class="line">        BigDecimal divideStr = stringSec.divide(stringFir, <span class="number">20</span>, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">        System.out.println(<span class="string">&quot;除法用string结果：&quot;</span> + divideStr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/BigDecimal%E8%BF%90%E7%AE%97%E7%BB%93%E6%9E%9C.png"></p>
<hr>
<blockquote>
<blockquote>
<p>1、<code>System.out.println()</code>中的数字默认是<code>double</code>类型的，<code>double</code>类型小数计算不精准</p>
</blockquote>
<p>2、使用<code>BigDecimal</code>类构造方法传入<code>double</code>类型时，计算的结果也是不精确的。</p>
<p>因为不是所有的浮点数都能够被精确的表示成一个<code>double</code> 类型值，因此它会被表示成与它最接近的 <code>double</code> 类型的值。所以必须改用传入<code>String</code>的构造方法.</p>
</blockquote>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程</title>
    <url>/2017/11/02/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p>Java多线程相关知识点</p>
<a id="more"></a>


<h4 id="创建多线程的三种方式："><a href="#创建多线程的三种方式：" class="headerlink" title="创建多线程的三种方式："></a>创建多线程的三种方式：</h4><hr>
<h5 id="通过继承Thread接口："><a href="#通过继承Thread接口：" class="headerlink" title="通过继承Thread接口："></a>通过继承Thread接口：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytheard1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;thread#1===&quot;</span> +i);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="通过实现Runnable接口："><a href="#通过实现Runnable接口：" class="headerlink" title="通过实现Runnable接口："></a>通过实现Runnable接口：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytheard2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;thread#2===&quot;</span> +i);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="通过实现Callable接口："><a href="#通过实现Callable接口：" class="headerlink" title="通过实现Callable接口："></a>通过实现Callable接口：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytheard3</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;thread#3===&quot;</span> + i);</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="启动上面三个线程："><a href="#启动上面三个线程：" class="headerlink" title="启动上面三个线程："></a>启动上面三个线程：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//通过主线程启动自己的线程</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过继承thread类</span></span><br><span class="line">    Mythread1 thread1 = <span class="keyword">new</span> Mythread1();</span><br><span class="line">    thread1.start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过实现runnable接口</span></span><br><span class="line">    Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Mythread2());</span><br><span class="line">    thread2.start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过实现callable接口</span></span><br><span class="line">    Mythread3 th = <span class="keyword">new</span> Mythread3();</span><br><span class="line">    FutureTask&lt;Integer&gt; result = <span class="keyword">new</span> FutureTask&lt;&gt;(th);</span><br><span class="line">    <span class="keyword">new</span> Thread(result).start();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 注意这里都不是直接调用 run() 方法，而是调运线程类 Thread 的 start 方法，</span></span><br><span class="line"><span class="comment">     *在 Thread 方法内部，会调运本地系统方法，最终会自动调运自己线程类的 run 方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//让主线程睡眠</span></span><br><span class="line">    Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;主线程结束！用时：&quot;</span></span><br><span class="line">                      +（System.currentTimeMillis() - startTime));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<blockquote>
<p>更推荐的是实现Runnable接口和实现 Callable接口，因为面向接口编程拓展性更好，而且可以防止 java 单继承的限制。</p>
</blockquote>
</blockquote>
<h4 id="线程类型"><a href="#线程类型" class="headerlink" title="线程类型"></a>线程类型</h4><p>Java中有两种类型：守护线程和用户线程（非守护线程）</p>
<h5 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h5><p>​        可以通过 thread.setDaemon(true) 方法设置线程是否为守护线程， thread.setDaemon(true) 必须在 thread.start()之前设置，否则会抛出一个 IllegalThreadStateException 异常。在守护线程中开启的新线程也将是守护线程。守护线程顾名思义是用来守护的，是给所有得非守护进程提供服务的，所以在 jvm 执行完所有的非守护进程之后， jvm就会停止，守护线程也不会再运行，最典型的守护线程就是 java 的垃圾回收机制 ( GC)。</p>
<h5 id="非守护线程"><a href="#非守护线程" class="headerlink" title="非守护线程"></a>非守护线程</h5><p>​        java 线程默认设置是非守护线程 thread.setDaemon(false)。当主线程运行完之后，只要主线程里面有非守护线程 jvm 就不会退出，直到所有的非守护线程执行完之后 jvm 才会退出。</p>
<blockquote>
<blockquote>
<p>如果把一个线程设置成守护线程，则 jvm 的退出就不会关心当前线程的执行状态</p>
</blockquote>
</blockquote>
<hr>
<h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><h5 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h5><p>​    1、减少在创建和销毁线程上所花的时间以及系统资源的开销 </p>
<p>​    2、如不使用线程池，有可能造成系统创建大量线程而导致消耗完系统内存 。</p>
<h5 id="自定义线程池："><a href="#自定义线程池：" class="headerlink" title="自定义线程池："></a>自定义线程池：</h5><p>定义单例线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPool</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Mypool myPool = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//单例线程池中有两种具体的线程池</span></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolExecutor threadPool = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> ScheduledThreadPoolExecutor scheduledPool = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolExecutor <span class="title">getThreadPool</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadPool;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScheduledThreadPoolExecutor <span class="title">getScheduledPool</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> scheduledPool;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置线程池的各个参数的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> corePoolSize = <span class="number">10</span>;  <span class="comment">//池中所保存的线程数，包括空闲线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maximumPoolSize = <span class="number">20</span>;  <span class="comment">//池中允许的最大线程数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> keepAliveTime =<span class="number">3</span>;  <span class="comment">//当线程数大于核心数时，终止前多余的空闲线程等待新任务的最长时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> scheduledPoolSize = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (myPool == <span class="keyword">null</span>)</span><br><span class="line">            myPool = <span class="keyword">new</span> MyPool();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyPool <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (myPool == <span class="keyword">null</span>)</span><br><span class="line">            create();</span><br><span class="line">        <span class="keyword">return</span> myPool;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyPool</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//实例化线程池，这里使用的LinkedBlockingQueue作为workQueue，使用DiscardOldestPolicy作为handler</span></span><br><span class="line">        <span class="keyword">this</span>。threadPool = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize, maximumPoolSize,</span><br><span class="line">                                                keepAliveTime, TimeUnit.SECONDS,</span><br><span class="line">                                                <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(),</span><br><span class="line">                                                <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());  <span class="comment">//不在新线程中执行任务，而是由调用者所在的线程来执行</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//实例化计划任务线程池</span></span><br><span class="line">        <span class="keyword">this</span>.scheduledPool = <span class="keyword">new</span> ScheduledThreadPoolExecutor(scheduledPoolSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="创建线程池的主要参数说明："><a href="#创建线程池的主要参数说明：" class="headerlink" title="创建线程池的主要参数说明："></a>创建线程池的主要参数说明：</h6><p>1、corePoolSize（int）：线程池中保持的线程数量，包括空闲线程在内。也就是线程池释放的最小线程数量界限</p>
<p>2、maximumPoolSize（int）: 线程池中嫩容纳最大线程数量</p>
<p>3、keepAliveTime(long): 空闲线程保持在线程池中的时间，当线程池中线程数量大于 corePoolSize 的时候</p>
<p>4、unit(TimeUnit枚举类): 上面参数时间的单位，可以是分钟，秒，毫秒等等</p>
<p>5、workQueue（BlockingQueue）: 任务队列，当线程任务提交到线程池以后，首先放入队列中，然后线程池按照该任务队列依次执行相应的任务。可以使用的 workQueue 有很多，比如：LinkedBlockingQueue 等等</p>
<p>6、threadFactory(ThreadFactory类): 新线程产生工厂类</p>
<p>7、handler（RejectedExecutionHandler类）: 当提交线程拒绝执行、异常的时候，处理异常的类。</p>
<p>​            该类取值如下：(注意都是内部类) </p>
<p>​                    ThreadPoolExecutor.AbortPolicy: 丢弃任务并抛出RejectedExecutionException 异常。 </p>
<p>​                    ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</p>
<p>​                    ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务，重复此过程。 </p>
<p>​                    ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务。</p>
<hr>
<p>获取线程池并添加任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThreadPool</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    ThreadPoolExecutor pool1 = (ThreadPoolExecutor) Exectors.newCachedThreadPool();</span><br><span class="line">    pool1.execute(() -&gt; System.out.println(<span class="string">&quot;快捷线程池中的线程&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    ThreadPoolExecutor pool2 = MyPool.getInstance().getThreadPool();</span><br><span class="line">    pool2.execute(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;pool2普通线程池中的线程&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">30</span>*<span class="number">1000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;pool2 poolSize:&quot;</span> +pool2.getPoolSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;pool2 corePoolSize:&quot;</span> +pool2.getCorePoolSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;pool2 largestPoolSize:&quot;</span> +pool2.getLargestPoolSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;pool2 maximumPoolSize:&quot;</span> +pool2.getMaximumPoolSize());</span><br><span class="line">    </span><br><span class="line">    ScheduledThreadPoolExecutor pool3 = MyPool.getInstance().getScheduledPool();</span><br><span class="line">    pool3.scheduleAtFixedRate(() -&gt; System.out.println(<span class="string">&quot;计划任务线程池中的线程&quot;</span>),<span class="number">0</span>,<span class="number">5000</span>,TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="JDK提供的常用线程池："><a href="#JDK提供的常用线程池：" class="headerlink" title="JDK提供的常用线程池："></a>JDK提供的常用线程池：</h4><p>1、newFixedThreadPool创建固定大小数量线程池，数量通过传入的参数决定</p>
<p>2、newSingleThreadExecutor创建一个线程容量的线程池，所有的线程依次执行，相当于创建固定数量为 1 的线程池</p>
<p>3、newCachedThreadPool创建可缓存的线程池，没有最大线程限制（实际上是 Integer.MAX_VALUE）。如果用空闲线程等待时间超过一分钟，就关闭该线程</p>
<p>4、newScheduledThreadPool创建计划 (延迟) 任务线程池, 线程池中的线程可以让其在特定的延迟时间之后执行，也可以以固定的时间重复执行（周期性执行）。相当于以前的 Timer 类的使用</p>
<p>5、newSingleThreadScheduledExecutor创建单线程池延迟任务，创建一个线程容量的计划任务</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>JpaRepository接口</title>
    <url>/2018/04/07/JpaRepository%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>使用Spring Data JPA 对数据库操作，需要继承 JpaRepository接口</p>
<a id="more"></a>

<p>这是一个访问数据库模型的超级接口，继承了 JpaRepository 接口，就有了很多常用的对数据库增删改查的方法。</p>
<p><img src="/images/JpaRepository%E6%8E%A5%E5%8F%A3.jpg"></p>
<h5 id="自定义方法"><a href="#自定义方法" class="headerlink" title="自定义方法"></a>自定义方法</h5><p>比如我们要根据一个分类类型的列表查询一个列表的分类信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;ProductCategory&gt; <span class="title">findByCategoryTypeIn</span><span class="params">(List&lt;Integer&gt; categoryTypeList)</span></span>;</span><br></pre></td></tr></table></figure>

<p>只需要写如上的接口方法，不需要写它的实现方法，系统会帮我们实现，<strong>所以方法名一定不能错</strong></p>
<hr>
<h5 id="参考如下"><a href="#参考如下" class="headerlink" title="参考如下"></a>参考如下</h5><table>
<thead>
<tr>
<th>关键字</th>
<th>方法命名</th>
<th>sql where字句</th>
</tr>
</thead>
<tbody><tr>
<td>And</td>
<td>findByNameAndPwd</td>
<td>where name= ? and pwd =?</td>
</tr>
<tr>
<td>Or</td>
<td>findByNameOrSex</td>
<td>where name= ? or sex=?</td>
</tr>
<tr>
<td>Is,Equals</td>
<td>findById,findByIdEquals</td>
<td>where id= ?</td>
</tr>
<tr>
<td>Between</td>
<td>findByIdBetween</td>
<td>where id between ? and ?</td>
</tr>
<tr>
<td>LessThan</td>
<td>findByIdLessThan</td>
<td>where id &lt; ?</td>
</tr>
<tr>
<td>LessThanEquals</td>
<td>findByIdLessThanEquals</td>
<td>where id &lt;= ?</td>
</tr>
<tr>
<td>GreaterThan</td>
<td>findByIdGreaterThan</td>
<td>where id &gt; ?</td>
</tr>
<tr>
<td>GreaterThanEquals</td>
<td>findByIdGreaterThanEquals</td>
<td>where id &gt; = ?</td>
</tr>
<tr>
<td>After</td>
<td>findByIdAfter</td>
<td>where id &gt; ?</td>
</tr>
<tr>
<td>Before</td>
<td>findByIdBefore</td>
<td>where id &lt; ?</td>
</tr>
<tr>
<td>IsNull</td>
<td>findByNameIsNull</td>
<td>where name is null</td>
</tr>
<tr>
<td>isNotNull,NotNull</td>
<td>findByNameNotNull</td>
<td>where name is not null</td>
</tr>
<tr>
<td>Like</td>
<td>findByNameLike</td>
<td>where name like ?</td>
</tr>
<tr>
<td>NotLike</td>
<td>findByNameNotLike</td>
<td>where name not like ?</td>
</tr>
<tr>
<td>StartingWith</td>
<td>findByNameStartingWith</td>
<td>where name like ‘?%’</td>
</tr>
<tr>
<td>EndingWith</td>
<td>findByNameEndingWith</td>
<td>where name like ‘%?’</td>
</tr>
<tr>
<td>Containing</td>
<td>findByNameContaining</td>
<td>where name like ‘%?%’</td>
</tr>
<tr>
<td>OrderBy</td>
<td>findByIdOrderByXDesc</td>
<td>where id=? order by x desc</td>
</tr>
<tr>
<td>Not</td>
<td>findByNameNot</td>
<td>where name &lt;&gt; ?</td>
</tr>
<tr>
<td>In</td>
<td>findByIdIn(Collection&lt;?&gt; c)</td>
<td>where id in (?)</td>
</tr>
<tr>
<td>NotIn</td>
<td>findByIdNotIn(Collection&lt;?&gt; c)</td>
<td>where id not  in (?)</td>
</tr>
<tr>
<td>True</td>
<td>findByAaaTue</td>
<td>where aaa = true</td>
</tr>
<tr>
<td>False</td>
<td>findByAaaFalse</td>
<td>where aaa = false</td>
</tr>
<tr>
<td>IgnoreCase</td>
<td>findByNameIgnoreCase</td>
<td>where UPPER(name)=UPPER(?)</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>JPA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中JsonSerializer用法</title>
    <url>/2018/08/02/Java%E4%B8%ADJsonSerializer%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>前后端单位不统一时进行转换</p>
<a id="more"></a>

<h5 id="问题举例："><a href="#问题举例：" class="headerlink" title="问题举例："></a>问题举例：</h5><p>后端用的时间单位是Date，前端用的秒</p>
<p>后端用的金额单位是分，前端用的是元</p>
<h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><h5 id="1-写一个负责转换的类，里面写好规则"><a href="#1-写一个负责转换的类，里面写好规则" class="headerlink" title="1. 写一个负责转换的类，里面写好规则"></a>1. 写一个负责转换的类，里面写好规则</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Date2LongSerialize</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Date date, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        jsonGenerator.writeNumber(date.getTime() / <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-在返回的参数里加上注解"><a href="#2-在返回的参数里加上注解" class="headerlink" title="2. 在返回的参数里加上注解"></a>2. 在返回的参数里加上注解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JsonNaming(PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PledgeDetailItemVO</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2308418084162500432L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonSerialize(using = Date2LongSerialize.class)</span></span><br><span class="line">    <span class="keyword">private</span> Date addTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中线程池的使用</title>
    <url>/2019/11/27/SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<p>SpringBoot中线程池的使用</p>
<a id="more"></a>


<h5 id="SpringBoot两种配置线程池的方式"><a href="#SpringBoot两种配置线程池的方式" class="headerlink" title="SpringBoot两种配置线程池的方式"></a>SpringBoot两种配置线程池的方式</h5><p>1、自定义配置</p>
<p>2、修改原生Spring异步线程池的装配</p>
<h5 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span>  <span class="comment">// 开启线程池</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskExecutePool</span></span>&#123;</span><br><span class="line">     </span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskThreadPoolConfig config;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Executor <span class="title">myTaskAsyncPool</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 核心线程池大小</span></span><br><span class="line">		executor.setCorePoolSize(config.getCorePoolSize());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最大线程数</span></span><br><span class="line">		executor.setMaxPoolSize(config.getMaxPoolSize());</span><br><span class="line"></span><br><span class="line">      	<span class="comment">// 队列容量</span></span><br><span class="line">		executor.setQueueCapacity(config.getQueueCapacity());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 活跃时间</span></span><br><span class="line">        executor.setKeepAliveSeconds(config.getKeepAliveSeconds());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程名字前缀</span></span><br><span class="line">		executor.setThreadNamePrefix(</span><br><span class="line"><span class="string">&quot;MyExecutor-&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// setRejectedExecutionHandler：当 pool 已经达到 max size 的时候，如何处理新任务</span></span><br><span class="line">		<span class="comment">// CallerRunsPolicy：不在新线程中执行任务，而是由调用者所在的线程来执行</span></span><br><span class="line">		executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">		executor.initialize();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<h5 id="修改原生Spring异步线程池的装配"><a href="#修改原生Spring异步线程池的装配" class="headerlink" title="修改原生Spring异步线程池的装配"></a>修改原生Spring异步线程池的装配</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NativeAsyncTaskExecutePool</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入配置类</span></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	TaskThreadPoolConfig config;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 核心线程池大小</span></span><br><span class="line">		executor.setCorePoolSize(config.getCorePoolSize());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最大线程数</span></span><br><span class="line">		executor.setMaxPoolSize(config.getMaxPoolSize());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 队列容量</span></span><br><span class="line">		executor.setQueueCapacity(config.getQueueCapacity());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 活跃时间</span></span><br><span class="line">		executor.setKeepAliveSeconds(config.getKeepAliveSeconds());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程名字前缀</span></span><br><span class="line">		executor.setThreadNamePrefix(<span class="string">&quot;MyExecutor2-&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// setRejectedExecutionHandler：当 pool 已经达到 max size 的时候，如何处理新任务</span></span><br><span class="line">		<span class="comment">// CallerRunsPolicy：不在新线程中执行任务，而是由调用者所在的线程来执行</span></span><br><span class="line">		executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">		executor.initialize();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  异步任务中异常处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (ex, method, objects) -&gt; &#123;</span><br><span class="line">					logger.error(<span class="string">&quot;==========================&quot;</span>+ex.getMessage()+<span class="string">&quot;=======================&quot;</span>, ex);</span><br><span class="line">		logger.error(<span class="string">&quot;exception method:&quot;</span>+method.getName());</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="线程池配置类"><a href="#线程池配置类" class="headerlink" title="线程池配置类"></a>线程池配置类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskThreadPoolConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;task.pool.corePoolSize&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> corePoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;task.pool.maxPoolSize&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;task.pool.keepAliveSeconds&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> keepAliveSeconds;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;task.pool.queueCapacity&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueCapacity;</span><br><span class="line"></span><br><span class="line">    ......<span class="comment">// 省略 get()，set() 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="配置文件配置线程池大小"><a href="#配置文件配置线程池大小" class="headerlink" title="配置文件配置线程池大小"></a>配置文件配置线程池大小</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># spring 线程池</span><br><span class="line">task:</span><br><span class="line">  pool:</span><br><span class="line">	#核心线程池</span><br><span class="line">	corePoolSize: 500</span><br><span class="line"></span><br><span class="line">	#最大线程池</span><br><span class="line">	maxPoolSize: 1000</span><br><span class="line"></span><br><span class="line">   	#活跃时间</span><br><span class="line">	keepAliveSeconds: 300</span><br><span class="line"></span><br><span class="line">	#队列容量</span><br><span class="line">	queueCapacity: 50</span><br></pre></td></tr></table></figure>



<h5 id="需要异步线程执行的任务"><a href="#需要异步线程执行的任务" class="headerlink" title="需要异步线程执行的任务"></a>需要异步线程执行的任务</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async(&quot;myTaskAsyncPool&quot;)</span>  <span class="comment">//myTaskAsynPool 即配置线程池的方法名，此处如果不写自定义线程池的方法名，会使用默认的线程池</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTask1</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Task&quot;</span>+i+<span class="string">&quot;started.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span><span class="comment">// 使用默认的线程池</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTask2</span><span class="params">(inti)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line">		logger.info(<span class="string">&quot;Task2-Native&quot;</span>+i+<span class="string">&quot;started.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Async</span><span class="comment">// 使用默认的线程池并返回参数</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ListenableFuture&lt;String&gt; <span class="title">doTask3</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;Task3- 返回值&quot;</span>+i+<span class="string">&quot;started.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="获取线程池并执行任务"><a href="#获取线程池并执行任务" class="headerlink" title="获取线程池并执行任务"></a>获取线程池并执行任务</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AsyncTaskTest</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="comment">// 自定义线程池</span></span><br><span class="line">			asyncTask.doTask1(i);</span><br><span class="line">			<span class="comment">//spring 异步线程池</span></span><br><span class="line">            asyncTask.doTask2(i);</span><br><span class="line">            </span><br><span class="line">            String text = asyncTask.doTask3(i).get();<span class="comment">// 阻塞调用</span></span><br><span class="line">            System.out.println(text);</span><br><span class="line">			String context = asyncTask.doTask3(i).get(<span class="number">1</span>, TimeUnit.SECONDS);<span class="comment">// 限时调用</span></span><br><span class="line">			System.out.println(context);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(InterruptedException | ExecutionException | TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    logger.info(<span class="string">&quot;All tasks finished.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>多线程</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中的jackon配置</title>
    <url>/2019/07/28/SpringBoot%E4%B8%AD%E7%9A%84jackon%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>SpringBoot中jackson的两种配置方式</p>
<a id="more"></a>

<h4 id="通过application-yml"><a href="#通过application-yml" class="headerlink" title="通过application.yml"></a>通过application.yml</h4><h5 id="配置属性说明："><a href="#配置属性说明：" class="headerlink" title="配置属性说明："></a>配置属性说明：</h5><p>spring.jackson.date-format：指定日期格式，比如yyyy-MM-dd HH:mm:ss，或者具体的格式化类的全限定名</p>
<p>spring.jackson.deserialization：是否开启Jackson的反序列化</p>
<p>spring.jackson.generator：是否开启json的generators.</p>
<p>spring.jackson.joda-date-time-format：指定Joda date/time的格式，比如yyyy-MM-ddHH:mm:ss). 如果没有配置的话，dateformat会作为backup</p>
<p>spring.jackson.locale：指定json使用的Locale.</p>
<p>spring.jackson.mapper：是否开启Jackson通用的特性.</p>
<p>spring.jackson.parser：是否开启jackson的parser特性.</p>
<p>spring.jackson.property-naming-strategy：指定PropertyNamingStrategy(CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES)或者指定PropertyNamingStrategy子类的全限定类名.</p>
<p>spring.jackson.serialization：是否开启jackson的序列化.</p>
<p>spring.jackson.serialization-inclusion：指定序列化时属性的inclusion方式，具体查看JsonInclude.Include枚举.</p>
<p>spring.jackson.time-zone：指定日期格式化时区，比如America/Los_Angeles或者GMT+10.</p>
<h5 id="常用配置："><a href="#常用配置：" class="headerlink" title="常用配置："></a>常用配置：</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="comment">#日期格式化</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">serialization:</span></span><br><span class="line">       <span class="comment">#格式化输出 </span></span><br><span class="line">      <span class="attr">indent_output:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">#忽略无法转换的对象</span></span><br><span class="line">      <span class="attr">fail_on_empty_beans:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#设置空如何序列化</span></span><br><span class="line">    <span class="attr">defaultPropertyInclusion:</span> <span class="string">NON_EMPTY</span></span><br><span class="line">    <span class="attr">deserialization:</span></span><br><span class="line">      <span class="comment">#允许对象忽略json中不存在的属性</span></span><br><span class="line">      <span class="attr">fail_on_unknown_properties:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">parser:</span></span><br><span class="line">      <span class="comment">#允许出现特殊字符和转义符</span></span><br><span class="line">      <span class="attr">allow_unquoted_control_chars:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">#允许出现单引号</span></span><br><span class="line">      <span class="attr">allow_single_quotes:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h4 id="使用重新注入ObjectMapper"><a href="#使用重新注入ObjectMapper" class="headerlink" title="使用重新注入ObjectMapper"></a>使用重新注入ObjectMapper</h4><h5 id="在配置bean中使用下面的配置"><a href="#在配置bean中使用下面的配置" class="headerlink" title="在配置bean中使用下面的配置"></a>在配置bean中使用下面的配置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(ObjectMapper.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">jacksonObjectMapper</span><span class="params">(Jackson2ObjectMapperBuilder builder)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = builder.createXmlMapper(<span class="keyword">false</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过该方法对mapper对象进行设置，所有序列化的对象都将按改规则进行系列化</span></span><br><span class="line">        <span class="comment">// Include.Include.ALWAYS 默认</span></span><br><span class="line">        <span class="comment">// Include.NON_DEFAULT 属性为默认值不序列化</span></span><br><span class="line">        <span class="comment">// Include.NON_EMPTY 属性为 空（&quot;&quot;） 或者为 NULL 都不序列化，则返回的json是没有这个字段的。这样对移动端会更省流量</span></span><br><span class="line">        <span class="comment">// Include.NON_NULL 属性为NULL 不序列化</span></span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 允许出现特殊字符和转义符</span></span><br><span class="line">        objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 允许出现单引号</span></span><br><span class="line">        objectMapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 字段保留，将null值转为&quot;&quot;</span></span><br><span class="line">        objectMapper.getSerializerProvider().setNullValueSerializer(<span class="keyword">new</span> JsonSerializer&lt;Object&gt;()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object o, JsonGenerator jsonGenerator,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  SerializerProvider serializerProvider)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                jsonGenerator.writeString(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>SpringBoot</tag>
        <tag>Jackson</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot相关知识点</title>
    <url>/2019/11/20/SpringBoot%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p>SpringBoot相关知识点备忘录</p>
<a id="more"></a>




<hr>
<h5 id="核心配置文件："><a href="#核心配置文件：" class="headerlink" title="核心配置文件："></a>核心配置文件：</h5><p>application：SpringBoot项目的自动化配置</p>
<p>bootstrap：使用SpringCloud config配置中心时，需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；包括一些固定的不能被覆盖的属性和一些加密/解密的场景。</p>
<h5 id="配置文件的两种格式："><a href="#配置文件的两种格式：" class="headerlink" title="配置文件的两种格式："></a>配置文件的两种格式：</h5><p>.properties和.yml</p>
<h5 id="核心注解："><a href="#核心注解：" class="headerlink" title="核心注解："></a>核心注解：</h5><p>启动类上面的注解是SpringBootApplication</p>
<p>包含三个注解：</p>
<p>​        SpringBootConfiguration：组合Configuration注解，实现配置文件功能</p>
<p>​        EnableAutoConfiguration：打开了自动配置的功能，也可以关闭某个自动配置的选项</p>
<p>​        ComponentScan：Spring组件扫描</p>
<h5 id="开启SpringBoot特性的方法："><a href="#开启SpringBoot特性的方法：" class="headerlink" title="开启SpringBoot特性的方法："></a>开启SpringBoot特性的方法：</h5><p>1、继承spring-boot-parent父项目</p>
<p>2、导入dependencies项目依赖</p>
<h5 id="SpringBoot自动配置原理是什么："><a href="#SpringBoot自动配置原理是什么：" class="headerlink" title="SpringBoot自动配置原理是什么："></a>SpringBoot自动配置原理是什么：</h5><p>注解EnableAutoConfiguration，Configuration，ConditionalOnClass是自动配置核心，首先他得是一个配置文件，其次根据类路径下是否有这个类去自动配置</p>
<h5 id="如何集成SpringBoot和activeMQ："><a href="#如何集成SpringBoot和activeMQ：" class="headerlink" title="如何集成SpringBoot和activeMQ："></a>如何集成SpringBoot和activeMQ：</h5><p>使用spring-boot-starter-activemq依赖</p>
<h5 id="如何使用SpringBoot实现异常处理："><a href="#如何使用SpringBoot实现异常处理：" class="headerlink" title="如何使用SpringBoot实现异常处理："></a>如何使用SpringBoot实现异常处理：</h5><p>实现ControllerAdvice类来处理控制类抛出的所有异常</p>
<h5 id="RequestMapping和-GetMapping的不同之处："><a href="#RequestMapping和-GetMapping的不同之处：" class="headerlink" title="@RequestMapping和@GetMapping的不同之处："></a>@RequestMapping和@GetMapping的不同之处：</h5><p>@RequestMapping具有类属性，可以进行get、post、put或者其他注释中具有的请求方法</p>
<p>@GetMapping是get请求方法中的一个特例，只是@RequestMapping的一个延伸，目的是为了提高清晰度</p>
<h5 id="SpringBoot支持哪些日志框架："><a href="#SpringBoot支持哪些日志框架：" class="headerlink" title="SpringBoot支持哪些日志框架："></a>SpringBoot支持哪些日志框架：</h5><p>SpringBoot支持JavaUtil logging、log4j2、lockback作为日志框架，如果使用starters启动器SpringBoot将使用logback作为默认的日志框架。</p>
<h5 id="SpringBoot实现热部署的方式："><a href="#SpringBoot实现热部署的方式：" class="headerlink" title="SpringBoot实现热部署的方式："></a>SpringBoot实现热部署的方式：</h5><p>1、引用devtools依赖（生产环境将被禁用）如java -jar/自定义类加载器等</p>
<p>2、在properties中自定义配置热部署</p>
<h5 id="SpringBoot如何定义多套不同环境配置："><a href="#SpringBoot如何定义多套不同环境配置：" class="headerlink" title="SpringBoot如何定义多套不同环境配置："></a>SpringBoot如何定义多套不同环境配置：</h5><p>1、建立多个环境下的配置文件</p>
<p>2、基于yml文件类型，指定profiles模式</p>
<h5 id="如何在SpringBoot中添加通用Js代码："><a href="#如何在SpringBoot中添加通用Js代码：" class="headerlink" title="如何在SpringBoot中添加通用Js代码："></a>如何在SpringBoot中添加通用Js代码：</h5><p>在源文件夹下，创建static文件夹，将静态内容放在此目录下</p>
<h5 id="SpringCloud如何实现服务的注册和发现："><a href="#SpringCloud如何实现服务的注册和发现：" class="headerlink" title="SpringCloud如何实现服务的注册和发现："></a>SpringCloud如何实现服务的注册和发现：</h5><p>服务在发布时，指定对应的服务名（服务名包含了IP地址和端口），将服务注册到注册中心（eureka或zookeeper）,这一过程是SpringCloud自动实现，只需在main方法中添加EnableDisscoveryClient</p>
<p>​     同一服务修改端口就可以启动多个实例</p>
<p>​     调用方法：传递服务名称通过注册中心获取所有的可用实例，通过负载均衡策略调用（ribbon或feign）对应服务</p>
<h5 id="Ribbon和Feign的区别："><a href="#Ribbon和Feign的区别：" class="headerlink" title="Ribbon和Feign的区别："></a>Ribbon和Feign的区别：</h5><h6 id="1、启动类使用注释不同："><a href="#1、启动类使用注释不同：" class="headerlink" title="1、启动类使用注释不同："></a>1、启动类使用注释不同：</h6><p>​        @RibbonClient/EnableFeignClients</p>
<h6 id="2、服务指定位置不同："><a href="#2、服务指定位置不同：" class="headerlink" title="2、服务指定位置不同："></a>2、服务指定位置不同：</h6><p>​        Ribbon是在RibbonClient注释上声明</p>
<p>​        Feign是在定义抽象方法的接口中使用FeignClient声明</p>
<h6 id="3、调用方式不同："><a href="#3、调用方式不同：" class="headerlink" title="3、调用方式不同："></a>3、调用方式不同：</h6><p>​        Ribbon需要自己构建http请求，模拟http请求然后使用RestTemplate发送给其他服务</p>
<p>​        Feign采用接口方式，将需要调用的其他方法定义成抽象方法即可</p>
<h5 id="SpringBoot集成Mybatis过程："><a href="#SpringBoot集成Mybatis过程：" class="headerlink" title="SpringBoot集成Mybatis过程："></a>SpringBoot集成Mybatis过程：</h5><p>1、添加maven依赖</p>
<p>2、在mybatis接口中，添加Mapper注解</p>
<p>3、在application.yml配置数据源信息</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC相关知识点</title>
    <url>/2020/02/27/SpringMVC%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p>SpringMVC相关知识点备忘录</p>
<a id="more"></a>





<hr>
<h5 id="主要组件："><a href="#主要组件：" class="headerlink" title="主要组件："></a>主要组件：</h5><p>1、前端控制器DispatcherServlet</p>
<p>2、处理器映射器HandlerMapping</p>
<p>3、处理器适配器HandlerAdapter</p>
<p>4、处理器Handler</p>
<p>5、视图解析器ViewResolver</p>
<p>6、视图View</p>
<h5 id="请求处理过程："><a href="#请求处理过程：" class="headerlink" title="请求处理过程："></a>请求处理过程：</h5><p>用户发送请求&gt;&gt;&gt;前端控制器将请求委托给页面控制器&gt;&gt;&gt;页面控制器委托给业务对象进行处理&gt;&gt;&gt;处理完毕后返回一个ModelAndView&gt;&gt;&gt;前端控制器根据返回的逻辑视图名选择相应的视图进行渲染&gt;&gt;&gt;最后前端控制器将响应返回给用户</p>
<h5 id="与structs2的区别："><a href="#与structs2的区别：" class="headerlink" title="与structs2的区别："></a>与structs2的区别：</h5><p>1、SpringMVC的入口是一个Servlet，即前端控制器，而structs2是一个filter过滤器。</p>
<p>2、SpringMVC是基于方法开发，请求参数传递到方法的形参可设计为单例或多例；而structs2是基于类开发，传递参数是通过类的属性，只能设计为多例。</p>
<h5 id="SpringMVC如何设定重定向和转发："><a href="#SpringMVC如何设定重定向和转发：" class="headerlink" title="SpringMVC如何设定重定向和转发："></a>SpringMVC如何设定重定向和转发：</h5><p>**转发：在返回值前加forward</p>
<p>**重定向：在返回值前加redirect</p>
<h5 id="异常处理："><a href="#异常处理：" class="headerlink" title="异常处理："></a>异常处理：</h5><p>可以将异常抛给Spring框架，由Spring框架来处理，只需要配置简单的异常处理器，在异常处理器中添加视图页面即可。</p>
<h5 id="常见注解："><a href="#常见注解：" class="headerlink" title="常见注解："></a>常见注解：</h5><p>@RequestMapping：处理请求url映射</p>
<p>@RequestBody：接受请求的json数据，将json数据转换为Java对象</p>
<p>@ResponseBody：将controller方法返回对象转化为json对象响应给客户</p>
<h5 id="SpringMVC控制器注解一般选用-Controller，也可以使用-RestController，-RestController相当于-ResponseBody-Controller"><a href="#SpringMVC控制器注解一般选用-Controller，也可以使用-RestController，-RestController相当于-ResponseBody-Controller" class="headerlink" title="SpringMVC控制器注解一般选用@Controller，也可以使用@RestController，@RestController相当于@ResponseBody+@Controller"></a>SpringMVC控制器注解一般选用@Controller，也可以使用@RestController，@RestController相当于@ResponseBody+@Controller</h5><h5 id="如果在拦截请求中，想拦截get方式提交的方法，需要在-RequestMapping注解里面加上mothod-RequestMethod-GET"><a href="#如果在拦截请求中，想拦截get方式提交的方法，需要在-RequestMapping注解里面加上mothod-RequestMethod-GET" class="headerlink" title="如果在拦截请求中，想拦截get方式提交的方法，需要在@RequestMapping注解里面加上mothod=RequestMethod.GET"></a>如果在拦截请求中，想拦截get方式提交的方法，需要在@RequestMapping注解里面加上mothod=RequestMethod.GET</h5><h5 id="在方法的形参中声明request，SpringMVC会自动把request对象传入，就可以在方法里面得到Request或者Session"><a href="#在方法的形参中声明request，SpringMVC会自动把request对象传入，就可以在方法里面得到Request或者Session" class="headerlink" title="在方法的形参中声明request，SpringMVC会自动把request对象传入，就可以在方法里面得到Request或者Session"></a>在方法的形参中声明request，SpringMVC会自动把request对象传入，就可以在方法里面得到Request或者Session</h5><h5 id="如何在拦截的方法里面得到从前台传入的参数："><a href="#如何在拦截的方法里面得到从前台传入的参数：" class="headerlink" title="如何在拦截的方法里面得到从前台传入的参数："></a>如何在拦截的方法里面得到从前台传入的参数：</h5><p>直接在形参里面声明这个参数，但名字必须和传过来的一致</p>
<h5 id="SpringMVC中函数的返回值是String和ModelAndView，ModelAndView把视图和数据都合并在一起的，所以一般用String比较好"><a href="#SpringMVC中函数的返回值是String和ModelAndView，ModelAndView把视图和数据都合并在一起的，所以一般用String比较好" class="headerlink" title="SpringMVC中函数的返回值是String和ModelAndView，ModelAndView把视图和数据都合并在一起的，所以一般用String比较好"></a>SpringMVC中函数的返回值是String和ModelAndView，ModelAndView把视图和数据都合并在一起的，所以一般用String比较好</h5><h5 id="SpringMVC使用ModelMap对象从后台向前台传递数据，可以在这个对象里调用put方法，把对象加到里面，前台可以通过el表达式拿到"><a href="#SpringMVC使用ModelMap对象从后台向前台传递数据，可以在这个对象里调用put方法，把对象加到里面，前台可以通过el表达式拿到" class="headerlink" title="SpringMVC使用ModelMap对象从后台向前台传递数据，可以在这个对象里调用put方法，把对象加到里面，前台可以通过el表达式拿到"></a>SpringMVC使用ModelMap对象从后台向前台传递数据，可以在这个对象里调用put方法，把对象加到里面，前台可以通过el表达式拿到</h5><h5 id="如何将ModelMap里面的数据加入到Session里面"><a href="#如何将ModelMap里面的数据加入到Session里面" class="headerlink" title="如何将ModelMap里面的数据加入到Session里面"></a>如何将ModelMap里面的数据加入到Session里面</h5><p>可以在类上面加SessionAttributes注解，里面包含的字符串就是要放入Session里面的key</p>
<h5 id="SpringMVC拦截器如何写："><a href="#SpringMVC拦截器如何写：" class="headerlink" title="SpringMVC拦截器如何写："></a>SpringMVC拦截器如何写：</h5><p>1、实现HandlerInterceptor接口</p>
<p>2、继承适配器类</p>
<h5 id="SpringMVC系统分层："><a href="#SpringMVC系统分层：" class="headerlink" title="SpringMVC系统分层："></a>SpringMVC系统分层：</h5><p>表现层：数据展现，操作页面，请求转发</p>
<p>业务层：封装业务处理逻辑</p>
<p>持久层：封装数据访问逻辑</p>
<p>表现层通过接口调用业务层；业务层通过接口调用持久层</p>
<h5 id="SpringMVC对文件上传的注意事项："><a href="#SpringMVC对文件上传的注意事项：" class="headerlink" title="SpringMVC对文件上传的注意事项："></a>SpringMVC对文件上传的注意事项：</h5><p>1、在页面form中提交enctype=”multipart/form-data”的数据时，需要SpringMVC对multipart类型数据进行解析</p>
<p>2、在SpringMVC.xml中配置multipart类型解析器</p>
<p>3、方法中使用MultipartFile attach单个文件上传</p>
<p>​      方法中使用MultipartFile [] attachs多个文件上传</p>
<h5 id="在配置文件中开启"><a href="#在配置文件中开启" class="headerlink" title="在配置文件中开启"></a>在配置文件中开启</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="来实现注解处理器和适配器的开启"><a href="#来实现注解处理器和适配器的开启" class="headerlink" title="来实现注解处理器和适配器的开启"></a>来实现注解处理器和适配器的开启</h5><h5 id="Autowired和-Resource的区别："><a href="#Autowired和-Resource的区别：" class="headerlink" title="@Autowired和@Resource的区别："></a>@Autowired和@Resource的区别：</h5><p>同&gt;&gt;&gt; 二者都可以写在setter方法上；两者如果都写在字段上，就不需要再写setter方法</p>
<p>异&gt;&gt;&gt; @Autowired 只按照byType注入，默认情况下要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false，如果想使用按照名称来装配，可以结合Qualifier一起使用</p>
<p>​            @Resource 默认按照byName自动注入；</p>
<p>​                @Resource有两个属性：name和type；</p>
<p>​                Spring将@Resource的name属性解析为bean名字；type则解析为bean类型，所以使用name属性要使用byName；使用type属性则使用byType，都不指定时，通过反射机制使用byName自动注入策略。</p>
<h5 id="依赖注入的三种方式："><a href="#依赖注入的三种方式：" class="headerlink" title="依赖注入的三种方式："></a>依赖注入的三种方式：</h5><p>1、接口注入</p>
<p>2、Construct注入</p>
<p>3、Setter注入</p>
<h5 id="引入IOC的目的："><a href="#引入IOC的目的：" class="headerlink" title="引入IOC的目的："></a>引入IOC的目的：</h5><p>1、脱开、降低类之间的耦合</p>
<p>2、实施依赖倒换原则</p>
<p>3、提高系统可插入、可测试、可修改特性</p>
<h5 id="AOP应用场景："><a href="#AOP应用场景：" class="headerlink" title="AOP应用场景："></a>AOP应用场景：</h5><p>权限、缓存、内容传递、错误处理、性能优化、持久化、同步、事务等</p>
<h5 id="Spring框架为企业级开发带来的好处："><a href="#Spring框架为企业级开发带来的好处：" class="headerlink" title="Spring框架为企业级开发带来的好处："></a>Spring框架为企业级开发带来的好处：</h5><h6 id="非侵入性："><a href="#非侵入性：" class="headerlink" title="非侵入性："></a>非侵入性：</h6><p>不强制性的要求实现Spring框架中的接口或继承Spring框架中的类</p>
<h6 id="IOC容器："><a href="#IOC容器：" class="headerlink" title="IOC容器："></a>IOC容器：</h6><p>帮助应用程序管理对象以及对象之间的依赖关系，对象之间的依赖关系如果发生了改变，只需要修改配置文件而不是修改代码</p>
<h6 id="AOP："><a href="#AOP：" class="headerlink" title="AOP："></a>AOP：</h6><p>将所有的横切关注功能封装到切面中，通过配置的方式将横切关注功能动态添加到目标代码上，进一步实现了业务逻辑和系统服务之间的分离</p>
<h6 id="事务管理："><a href="#事务管理：" class="headerlink" title="事务管理："></a>事务管理：</h6><p>为多种持久层技术提供了声明式事务管理，方便的完成了事务管理</p>
<h5 id="持久层设计的目标："><a href="#持久层设计的目标：" class="headerlink" title="持久层设计的目标："></a>持久层设计的目标：</h5><p>1、数据存储逻辑的分离，提供抽象化的数据访问接口</p>
<p>2、数据访问底层实现的分离，可以在不修改代码的情况下切换底层实现</p>
<p>3、资源管理和调度的分离，在数据访问层实现统一的资源调度（如缓存机制）</p>
<p>4、数据抽象，提供更面向对象的数据操作</p>
<h5 id="实体对象的三种状态："><a href="#实体对象的三种状态：" class="headerlink" title="实体对象的三种状态："></a>实体对象的三种状态：</h5><p>瞬时态：new一个实体对象后，该对象就处于此态；</p>
<p>持久态：Session中的save()、merge()等方法把此态对象与数据库关联，并把数据插入或更新到数据库时，对象就转化为持久态</p>
<p>​                持久态对象实例在数据库中有对应的记录</p>
<p>游离态：使用Session中的close()、clear()等方法后可以将对象转化为游离态</p>
<p>​                游离态随拥有和持久态数据库对应记录一致的标识值，但因此对象已经从会话中消除掉，对象不在持久化管理之内，所以处于游离态</p>
<h5 id="锁机制："><a href="#锁机制：" class="headerlink" title="锁机制："></a>锁机制：</h5><p>有些业务逻辑在执行过程中要求对数据进行排他性访问，需要通过一些机制保证此过程中数据被锁住不会被外界修改</p>
<hr>
<blockquote>
<p>本文档记录的不够详细，只留做自己备忘查看，不定期更新…</p>
</blockquote>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot解决跨域问题</title>
    <url>/2019/06/21/Springboot%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>Springboot解决跨域问题</p>
<a id="more"></a>

<h4 id="Springboot解决跨域问题"><a href="#Springboot解决跨域问题" class="headerlink" title="Springboot解决跨域问题"></a>Springboot解决跨域问题</h4><p>前后端分离的项目，如果前端项目与后端项目部署在两个不同的域下，会引起跨域问题的出现</p>
<h6 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h6><p>在Controller类上加@CrossOrigin注解即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fxmaoyuzzz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*前端127.0.0.1:8888  后端127.0.0.1:8082</span></span><br><span class="line"><span class="comment">* 前后端因为来自不同的网域，所以在http的安全协议策略下不信任*/</span></span><br><span class="line"><span class="meta">@CrossOrigin</span>      <span class="comment">//解决前后端的跨域问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatalogController</span> </span>&#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id=""><a href="#" class="headerlink" title=""></a></h4><p><img src="/images/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98.png"></p>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Valid注解的使用</title>
    <url>/2019/01/17/Valid%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>@Valid注解用于验证注解是否符合要求，直接加在变量之前，在变量中添加验证信息的要求，当不符合要求时就会在方法中返回message 的错误提示信息。</p>
<a id="more"></a>

<h5 id="Valid注解的使用"><a href="#Valid注解的使用" class="headerlink" title="@Valid注解的使用"></a>@Valid注解的使用</h5><table>
<thead>
<tr>
<th>限制</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Null</td>
<td>限制只能为null</td>
</tr>
<tr>
<td>@NotNull</td>
<td>限制必须不为null</td>
</tr>
<tr>
<td>@AssertFalse</td>
<td>限制必须为false</td>
</tr>
<tr>
<td>@AssertTrue</td>
<td>限制必须为true</td>
</tr>
<tr>
<td>@DecimalMax(value)</td>
<td>限制必须为一个不大于指定值的数字</td>
</tr>
<tr>
<td>@DecimalMin(value)</td>
<td>限制必须为一个不小于指定值的数字</td>
</tr>
<tr>
<td>@Digits(integer,fraction)</td>
<td>限制必须为一个小数，且整数部分的位数不能超过integer，小数部分的位数不能超过fraction</td>
</tr>
<tr>
<td>@Future</td>
<td>限制必须是一个将来的日期</td>
</tr>
<tr>
<td>@Max(value)</td>
<td>限制必须为一个不大于指定值的数字</td>
</tr>
<tr>
<td>@Min(value)</td>
<td>限制必须为一个不小于指定值的数字</td>
</tr>
<tr>
<td>@Past</td>
<td>限制必须是一个过去的日期</td>
</tr>
<tr>
<td>@Pattern(value)</td>
<td>限制必须符合指定的正则表达式</td>
</tr>
<tr>
<td>@Size(max,min)</td>
<td>限制字符长度必须在min到max之间</td>
</tr>
<tr>
<td>@Past</td>
<td>验证注解的元素值（日期类型）比当前时间早</td>
</tr>
<tr>
<td>@NotEmpty</td>
<td>验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0）</td>
</tr>
<tr>
<td>@NotBlank</td>
<td>验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的空格</td>
</tr>
<tr>
<td>@Email</td>
<td>验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式</td>
</tr>
</tbody></table>
<hr>
<h5 id="使用例证："><a href="#使用例证：" class="headerlink" title="使用例证："></a>使用例证：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">create</span> <span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(user.getId());</span><br><span class="line">        System.out.println(user.getUsername());</span><br><span class="line">        System.out.println(user.getPassword());</span><br><span class="line">        user.setId(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p>然后在 User 类中添加验证信息的要求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;  </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;密码不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>@NotBlank 注解所指的 password 字段，表示验证密码不能为空，如果为空的话，上面 Controller 中的 create 方法会将message 中的”密码不能为空”返回。</p>
</blockquote>
</blockquote>
<hr>
<h5 id="自定义验证信息-MyConstraint"><a href="#自定义验证信息-MyConstraint" class="headerlink" title="自定义验证信息@MyConstraint:"></a>自定义验证信息@MyConstraint:</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@MyConstraint(message = &quot;这是一个测试&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注解的具体内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Constraint(validatedBy = &#123;MyConstraintValidator.class&#125;)</span></span><br><span class="line"><span class="meta">@Target(&#123;ELementtype.METHOD, ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyConstraint &#123;</span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span></span>;</span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>校验器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConstraintValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">MyConstraint</span>, <span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialie</span><span class="params">(<span class="meta">@MyConstraint</span> constarintAnnotation)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;my validator init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(Object value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">        userService.getUserByUsername(<span class="string">&quot;seina&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;valid&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA中lombok的使用</title>
    <url>/2018/01/10/idea%E4%B8%ADlombok%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>IDEA中lombok插件的使用（可省略get/set方法）</p>
<a id="more"></a>

<hr>
<h5 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1.安装插件"></a>1.安装插件</h5><p>在File-Setting-Plugins-Browse Repostitories中搜索Lombok Plugin插件安装</p>
<p>安装完成先别急着重启，继续设置，在File-Setting-Build, Execution, Deployment-Compiler-Annotation Processors中点击Enable annotation processors</p>
<p>确定后重启idea</p>
<p><img src="/images/idea1.png"></p>
<p><img src="/images/idea2.png"></p>
<hr>
<h5 id="2-导入包"><a href="#2-导入包" class="headerlink" title="2.导入包"></a>2.导入包</h5><p>在maven中导入依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.16.18&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h5><p>只需要在相关类、变量上加上注解即可</p>
<p>常用的有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>   ：<span class="comment">//注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法</span></span><br><span class="line"><span class="meta">@Setter</span>：<span class="comment">//注解在属性上；为属性提供 setting 方法</span></span><br><span class="line"><span class="meta">@Getter</span>：<span class="comment">//注解在属性上；为属性提供 getting 方法</span></span><br><span class="line"><span class="meta">@Log4j</span> ：<span class="comment">//注解在类上；为类提供一个 属性名为log 的 log4j 日志对象</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>：<span class="comment">//注解在类上；为类提供一个无参的构造方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>：<span class="comment">//注解在类上；为类提供一个全参的构造方法</span></span><br></pre></td></tr></table></figure>

<hr>
<h6 id="比如："><a href="#比如：" class="headerlink" title="比如："></a>比如：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@DynamicUpdate</span> <span class="comment">//可以让updateTime动态更新</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductCategory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类目id</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer categoryId;</span><br><span class="line">    <span class="comment">//类目名字</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="comment">//类目编号</span></span><br><span class="line">    <span class="keyword">private</span> Integer categoryType;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductCategory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCategoryId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> categoryId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategoryId</span><span class="params">(Integer categoryId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.categoryId = categoryId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCategoryName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> categoryName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategoryName</span><span class="params">(String categoryName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.categoryName = categoryName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCategoryType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> categoryType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategoryType</span><span class="params">(Integer categoryType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.categoryType = categoryType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> updateTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateTime</span><span class="params">(Date updateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ProductCategory&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;categoryId=&quot;</span> + categoryId +</span><br><span class="line">                <span class="string">&quot;, categoryName=&#x27;&quot;</span> + categoryName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, categoryType=&quot;</span> + categoryType +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在安装了 lombok 插件和 导入了 lombok 依赖后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@DynamicUpdate</span> <span class="comment">//可以让updateTime动态更新</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//自动生成 Setter/Getter toString()</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductCategory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类目id</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer categoryId;</span><br><span class="line">    <span class="comment">//类目名字</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="comment">//类目编号</span></span><br><span class="line">    <span class="keyword">private</span> Integer categoryType;</span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductCategory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>启动nginx时报错</title>
    <url>/2019/06/22/nginx%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>nginx启动报错：nginx: [error] open() “/var/run/nginx/nginx.pid” failed (2: No such file or directory)</p>
<a id="more"></a>


<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h5 id="解决此错误的方法如下："><a href="#解决此错误的方法如下：" class="headerlink" title="解决此错误的方法如下："></a>解决此错误的方法如下：</h5><p>（1）进入 <strong>cd /usr/local/nginx/conf/</strong> 目录，编辑配置文件<strong>nginx.conf</strong> ；</p>
<p>（2）在配置文件中有个注释的地方： <strong>#pid     logs/nginx.pid;</strong></p>
<p>（3）将注释放开，并修改为：<strong>pid   /usr/local/nginx/logs/nginx.pid;</strong></p>
<p>（4）在 <strong>/usr/local/nginx</strong> 目录下创建 <strong>logs 目录</strong>：<strong>mkdir /usr/local/nginx/logs</strong></p>
<p>（5）之后再次启动nginx服务：<strong>cd /usr/local/nginx/sbin/</strong></p>
<p>（6）启动成功 </p>
<blockquote>
<blockquote>
<p>在此做个记录，以防以后再次遇到此问题。</p>
</blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>Error</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>thymeleaf添加LEGACYHTML5松校验出错</title>
    <url>/2019/06/22/thymeleaf%E6%B7%BB%E5%8A%A0LEGACYHTML5%E6%9D%BE%E6%A0%A1%E9%AA%8C%E5%87%BA%E9%94%99/</url>
    <content><![CDATA[<p>错误信息：[Cannot perform conversion to XML from legacy HTML:]</p>
<a id="more"></a>




<p>详细信息: Cannot perform conversion to XML from legacy HTML: The nekoHTML library is not in classpath. nekoHTML 1.9.15 or newer is required for processing templates in “LEGACYHTML5” mode [<a href="http://nekohtml.sourceforge.net/">http://nekohtml.sourceforge.net</a>]. Maven spec: “net.sourceforge.nekohtml::nekohtml::1.9.15”. IMPORTANT: DO NOT use versions of nekoHTML older than 1.9.15.</p>
<h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5><h6 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>





<blockquote>
<blockquote>
<p>在使用springboot中，如果使用thymeleaf作为模板文件，则要求HTML格式必须为严格的html5格式，必须有结束标签，否则会报错！但是在application.properties中增加spring.thymeleaf.mode =LEGACYHTML5后运行仍然报错。</p>
<p>添加上面的依赖即可解决</p>
</blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Error</tag>
        <tag>thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>vagrant以及docker的使用</title>
    <url>/2020/11/03/vagrant%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85dokcer/</url>
    <content><![CDATA[<p>vagrant快速创建虚拟机及使用docker安装mysql、redis、rabbitmq、mongoDB、Elasticsearch、Kibana</p>
<a id="more"></a>

<h4 id="一、使用vagrant创建centos虚拟机"><a href="#一、使用vagrant创建centos虚拟机" class="headerlink" title="一、使用vagrant创建centos虚拟机"></a>一、使用vagrant创建centos虚拟机</h4><h5 id="1、下载virtualBox"><a href="#1、下载virtualBox" class="headerlink" title="1、下载virtualBox"></a>1、下载virtualBox</h5><p>​                &gt;&gt;&gt;下载地址：<a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></p>
<h5 id="2、下载vagrant"><a href="#2、下载vagrant" class="headerlink" title="2、下载vagrant"></a>2、下载vagrant</h5><p>​                &gt;&gt;&gt;下载地址：<a href="https://www.vagrantup.com/downloads">https://www.vagrantup.com/downloads</a></p>
<h5 id="3、安装虚拟机镜像"><a href="#3、安装虚拟机镜像" class="headerlink" title="3、安装虚拟机镜像"></a>3、安装虚拟机镜像</h5><p>​            a)、vagrant下载镜像速度太慢，建议使用迅雷下载镜像【或使用我提供的 centos7_64位 镜像】</p>
<p>​                        &gt;&gt;&gt;vagrant镜像百度网盘下载链接：<a href="https://pan.baidu.com/s/1WGHt1RziJJNkPCxkHj476Q">https://pan.baidu.com/s/1WGHt1RziJJNkPCxkHj476Q</a>  提取码：6a83</p>
<p>​            b)、使用**vagrant box add {title} {url}**命令的方式添加本地的镜像</p>
<p>​            c)、使用**vagrant init {title}**初始化</p>
<p>​            d)、启动虚拟机<strong>vagrant up</strong></p>
<p>​            e)、连接虚拟机 <strong>vagrant ssh</strong></p>
<h4 id="二、安装docker"><a href="#二、安装docker" class="headerlink" title="二、安装docker"></a>二、安装docker</h4><h6 id="gt-gt-gt-参考：https-docs-docker-com-engine-install-centos"><a href="#gt-gt-gt-参考：https-docs-docker-com-engine-install-centos" class="headerlink" title="&gt;&gt;&gt;参考：https://docs.docker.com/engine/install/centos/"></a>&gt;&gt;&gt;参考：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></h6><h5 id="1、下载安装步骤"><a href="#1、下载安装步骤" class="headerlink" title="1、下载安装步骤"></a>1、下载安装步骤</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.卸载旧版本</span><br><span class="line"><span class="meta">	$</span><span class="bash"> sudo yum remove docker \</span></span><br><span class="line"><span class="bash">                  docker-client \</span></span><br><span class="line"><span class="bash">                  docker-client-latest \</span></span><br><span class="line"><span class="bash">                  docker-common \</span></span><br><span class="line"><span class="bash">                  docker-latest \</span></span><br><span class="line"><span class="bash">                  docker-latest-logrotate \</span></span><br><span class="line"><span class="bash">                  docker-logrotate \</span></span><br><span class="line"><span class="bash">                  docker-engine</span></span><br><span class="line">2.设置存储库</span><br><span class="line">安装yum-utils软件包（提供yum-config-manager 实用程序）并设置稳定的存储库。</span><br><span class="line"><span class="meta">	$</span><span class="bash"> sudo yum install -y yum-utils</span></span><br><span class="line"></span><br><span class="line"><span class="meta">	$</span><span class="bash"> sudo yum-config-manager \</span></span><br><span class="line"><span class="bash">    --add-repo \</span></span><br><span class="line"><span class="bash">    https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line">   	 </span><br><span class="line">3.安装最新版本的Docker Engine和容器</span><br><span class="line"><span class="meta">	$</span><span class="bash"> sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br><span class="line">4.启动Docker</span><br><span class="line"><span class="meta">	$</span><span class="bash"> sudo systemctl start docker</span></span><br><span class="line">5.设置docker开机自启</span><br><span class="line"><span class="meta">	$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> docker</span></span><br></pre></td></tr></table></figure>
<h5 id="2、为docker配置阿里云镜像加速-centos"><a href="#2、为docker配置阿里云镜像加速-centos" class="headerlink" title="2、为docker配置阿里云镜像加速(centos)"></a>2、为docker配置阿里云镜像加速(centos)</h5><h6 id="gt-gt-gt-参考：https-cr-console-aliyun-com-cn-hangzhou-instances-mirrors"><a href="#gt-gt-gt-参考：https-cr-console-aliyun-com-cn-hangzhou-instances-mirrors" class="headerlink" title="&gt;&gt;&gt;参考：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors"></a>&gt;&gt;&gt;参考：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置镜像加速器</span></span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://much2eji.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<blockquote>
<p>使用阿里云实例安装以下镜像时，需要在阿里云控制台配置实例的安全组规则，否则无法连接</p>
</blockquote>
</blockquote>
<h4 id="三、安装MySQL"><a href="#三、安装MySQL" class="headerlink" title="三、安装MySQL"></a>三、安装MySQL</h4><h5 id="1、下载镜像文件"><a href="#1、下载镜像文件" class="headerlink" title="1、下载镜像文件"></a>1、下载镜像文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看镜像文件</span></span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h5 id="2、端口映射与目录挂载"><a href="#2、端口映射与目录挂载" class="headerlink" title="2、端口映射与目录挂载"></a>2、端口映射与目录挂载</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>

<h5 id="3、修改配置"><a href="#3、修改配置" class="headerlink" title="3、修改配置"></a>3、修改配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /mydata/mysql/conf/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#添加以下内容</span></span></span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#添加完后需要重启mysql</span></span></span><br><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure>

<h5 id="4、设置启动docker时自动运行mysql"><a href="#4、设置启动docker时自动运行mysql" class="headerlink" title="4、设置启动docker时自动运行mysql"></a>4、设置启动docker时自动运行mysql</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker update mysql --restart=always</span><br></pre></td></tr></table></figure>





<h4 id="四、安装redis"><a href="#四、安装redis" class="headerlink" title="四、安装redis"></a>四、安装redis</h4><h5 id="1、下载镜像文件-1"><a href="#1、下载镜像文件-1" class="headerlink" title="1、下载镜像文件"></a>1、下载镜像文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure>

<h5 id="2、修改配置"><a href="#2、修改配置" class="headerlink" title="2、修改配置"></a>2、修改配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /mydata/redis/conf</span><br><span class="line"></span><br><span class="line">touch /mydata/redis/conf/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Redis持久化（可选）</span></span></span><br><span class="line">echo &quot;appendonly yes&quot;  &gt;&gt; /mydata/redis/conf/redis.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3、端口映射与目录挂载"><a href="#3、端口映射与目录挂载" class="headerlink" title="3、端口映射与目录挂载"></a>3、端口映射与目录挂载</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span><br><span class="line"> -v/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line"> -d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<h5 id="4、设置redis容器在docker启动的时候自动启动"><a href="#4、设置redis容器在docker启动的时候自动启动" class="headerlink" title="4、设置redis容器在docker启动的时候自动启动"></a>4、设置redis容器在docker启动的时候自动启动</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker update redis --restart=always</span><br></pre></td></tr></table></figure>

<h5 id="5、连接redis客户端"><a href="#5、连接redis客户端" class="headerlink" title="5、连接redis客户端"></a>5、连接redis客户端</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it redis redis-cli</span><br></pre></td></tr></table></figure>



<h6 id="gt-gt-gt-redis文档链接：http-redis-cn-documentation-html"><a href="#gt-gt-gt-redis文档链接：http-redis-cn-documentation-html" class="headerlink" title="&gt;&gt;&gt;redis文档链接：http://redis.cn/documentation.html"></a>&gt;&gt;&gt;<strong>redis文档链接：</strong><a href="http://redis.cn/documentation.html">http://redis.cn/documentation.html</a></h6><h6 id="gt-gt-gt-redis命令参考：http-redisdoc-com"><a href="#gt-gt-gt-redis命令参考：http-redisdoc-com" class="headerlink" title="&gt;&gt;&gt;redis命令参考：http://redisdoc.com/"></a>&gt;&gt;&gt;redis命令参考：<a href="http://redisdoc.com/">http://redisdoc.com/</a></h6><h4 id="五、安装rabbitmq"><a href="#五、安装rabbitmq" class="headerlink" title="五、安装rabbitmq"></a>五、安装rabbitmq</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#下载镜像及端口映射</span></span></span><br><span class="line">docker run -d --name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:management</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置redis容器在docker启动的时候自动启动</span></span></span><br><span class="line">docker update rabbitmq --restart=always</span><br></pre></td></tr></table></figure>

<h4 id="六、安装mongoDB"><a href="#六、安装mongoDB" class="headerlink" title="六、安装mongoDB"></a>六、安装mongoDB</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#下载镜像</span></span></span><br><span class="line">docker pull mongo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#端口映射与目录挂载</span></span></span><br><span class="line">docker run -p 27017:27017 -v /mydata/mongo:/data/db --name mongodb -d mongo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置mongoDB跟随docker启动</span></span></span><br><span class="line">docker update mongodb --restart=always</span><br></pre></td></tr></table></figure>

<h4 id="七、安装Elasticsearch以及Kibana"><a href="#七、安装Elasticsearch以及Kibana" class="headerlink" title="七、安装Elasticsearch以及Kibana"></a>七、安装Elasticsearch以及Kibana</h4><h6 id="gt-gt-gt-Elasticsearch需要和Kibana版本一致"><a href="#gt-gt-gt-Elasticsearch需要和Kibana版本一致" class="headerlink" title="&gt;&gt;&gt;Elasticsearch需要和Kibana版本一致"></a>&gt;&gt;&gt;Elasticsearch需要和Kibana版本一致</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#下载elasticsearch镜像</span></span></span><br><span class="line">docker pull elasticsearch:7.6.2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建目录</span></span></span><br><span class="line">mkdir -p /mydata/elasticsearch/config</span><br><span class="line">mkdir -p /mydata/elasticsearch/data</span><br><span class="line">echo &quot;http.host: 0.0.0.0&quot; &gt;/mydata/elasticsearch/config/elasticsearch.yml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#更改目录权限</span></span></span><br><span class="line">chmod -R 777 /mydata/elasticsearch/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#端口映射与目录挂载</span></span></span><br><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e  &quot;discovery.type=single-node&quot; \</span><br><span class="line">-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; \</span><br><span class="line">-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v  /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-d elasticsearch:7.6.2 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置elasticsearch开机自启</span></span></span><br><span class="line">docker update elasticsearch --restart=always</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#下载kibana镜像</span></span></span><br><span class="line">docker pull kibana:7.6.2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#端口映射</span></span></span><br><span class="line">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://[elasticsearch主机IP地址]:9200 -p 5601:5601 -d kibana:7.6.2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置kibana开机自启</span></span></span><br><span class="line">docker update kibana  --restart=always</span><br></pre></td></tr></table></figure>

<h6 id="gt-gt-gt-Elasticsearch参考：https-www-elastic-co-guide-index-html"><a href="#gt-gt-gt-Elasticsearch参考：https-www-elastic-co-guide-index-html" class="headerlink" title="&gt;&gt;&gt;Elasticsearch参考：https://www.elastic.co/guide/index.html"></a>&gt;&gt;&gt;Elasticsearch参考：<a href="https://www.elastic.co/guide/index.html">https://www.elastic.co/guide/index.html</a></h6>]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>vagrant</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>npm笔记</title>
    <url>/2020/06/06/npm%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>npm的使用及相关命令</p>
<a id="more"></a>



<h4 id="npm的使用"><a href="#npm的使用" class="headerlink" title="npm的使用"></a>npm的使用</h4><hr>
<h5 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">建立一个空文件夹，在命令提示符进入该文件夹  执行命令初始化</span></span><br><span class="line">npm init</span><br><span class="line"><span class="meta">#</span><span class="bash">按照提示输入相关信息，如果是用默认值则直接回车即可。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">name: 项目名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash">version: 项目版本号</span></span><br><span class="line"><span class="meta">#</span><span class="bash">description: 项目描述</span></span><br><span class="line"><span class="meta">#</span><span class="bash">keywords: &#123;Array&#125;关键词，便于用户搜索到我们的项目</span></span><br><span class="line"><span class="meta">#</span><span class="bash">最后会生成package.json文件，这个是包的配置文件，相当于maven的pom.xml</span></span><br><span class="line"><span class="meta">#</span><span class="bash">我们之后也可以根据需要进行修改。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">如果想直接生成 package.json 文件，那么可以使用命令</span></span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<h5 id="修改镜像"><a href="#修改镜像" class="headerlink" title="修改镜像"></a>修改镜像</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">经过下面的配置，以后所有的 npm install 都会经过淘宝的镜像地址下载</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看npm配置信息</span></span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure>

<h5 id="npm-install-命令的使用"><a href="#npm-install-命令的使用" class="headerlink" title="npm install 命令的使用"></a>npm install 命令的使用</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用 npm install 安装依赖包的最新版，</span></span><br><span class="line"><span class="meta">#</span><span class="bash">模块安装的位置：项目目录\node_modules</span></span><br><span class="line"><span class="meta">#</span><span class="bash">安装会自动在项目目录下添加 package-lock.json文件，这个文件帮助锁定安装包的版本</span></span><br><span class="line"><span class="meta">#</span><span class="bash">同时package.json 文件中，依赖包会被添加到dependencies节点下，类似maven中的 &lt;dependencies&gt;</span></span><br><span class="line">npm install jquery</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">npm管理的项目在备份和传输的时候一般不携带node_modules文件夹</span></span><br><span class="line">npm install #根据package.json中的配置下载依赖，初始化项目</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">如果安装时想指定特定的版本</span></span><br><span class="line">npm install jquery@2.1.x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">devDependencies节点：开发时的依赖包，项目打包到生产环境的时候不包含的依赖</span></span><br><span class="line"><span class="meta">#</span><span class="bash">使用 -D参数将依赖添加到devDependencies节点</span></span><br><span class="line">npm install --save-dev eslint</span><br><span class="line"><span class="meta">#</span><span class="bash">或</span></span><br><span class="line">npm install -D eslint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">全局安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Node.js全局安装的npm包和工具的位置：用户目录\AppData\Roaming\npm\node_modules</span></span><br><span class="line"><span class="meta">#</span><span class="bash">一些命令行工具常使用全局安装的方式</span></span><br><span class="line">npm install -g webpack</span><br></pre></td></tr></table></figure>

<h5 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">更新包（更新到最新版本）</span></span><br><span class="line">npm update 包名</span><br><span class="line"><span class="meta">#</span><span class="bash">全局更新</span></span><br><span class="line">npm update -g 包名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">卸载包</span></span><br><span class="line">npm uninstall 包名</span><br><span class="line"><span class="meta">#</span><span class="bash">全局卸载</span></span><br><span class="line">npm uninstall -g 包名</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Spring的Pageable实现分页查询</title>
    <url>/2018/04/17/%E4%BD%BF%E7%94%A8Spring%E7%9A%84Pageable%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>使用Spring的Pageable实现分页查询</p>
<a id="more"></a>

<h5 id="1-导入包："><a href="#1-导入包：" class="headerlink" title="1.导入包："></a>1.导入包：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="2-测试类："><a href="#2-测试类：" class="headerlink" title="2.测试类："></a>2.测试类：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenQuerySeccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        mockMvc.perform(</span><br><span class="line">                get(<span class="string">&quot;/user&quot;</span>)</span><br><span class="line">                        <span class="comment">//分页查询参数，第三页，每页15个数据，按照年龄倒序排序</span></span><br><span class="line">                        .param(<span class="string">&quot;size&quot;</span>,<span class="string">&quot;15&quot;</span>)</span><br><span class="line">                        .param(<span class="string">&quot;page&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">                        .param(<span class="string">&quot;sort&quot;</span>,<span class="string">&quot;age,desc&quot;</span>)<span class="comment">//发送get请求，并带请求参数</span></span><br><span class="line"></span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_UTF8) <span class="comment">//编码格式为json的utf8</span></span><br><span class="line">        ).andExpect(status().isOk())  <span class="comment">//返回的状态码为200 OK</span></span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.length()&quot;</span>).value(<span class="number">3</span>))  <span class="comment">//判断返回的json长度是否为3</span></span><br><span class="line">                .andReturn().getResponse().getContentAsString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="3-controller类："><a href="#3-controller类：" class="headerlink" title="3.controller类："></a>3.controller类：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">query</span><span class="params">(Pageable pageable)</span></span>&#123;<span class="comment">//用spring自带的pageable对象来得到分页信息</span></span><br><span class="line"></span><br><span class="line">        System.out.println(pageable.getPageSize());<span class="comment">// 15</span></span><br><span class="line">        System.out.println(pageable.getPageNumber()); <span class="comment">// 3</span></span><br><span class="line">        System.out.println(pageable.getSort());<span class="comment">//age: DESC</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            查询操作</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="4-还可以传入默认的Pageable属性-使用-PageableDefault注解"><a href="#4-还可以传入默认的Pageable属性-使用-PageableDefault注解" class="headerlink" title="4.还可以传入默认的Pageable属性(使用@PageableDefault注解)"></a>4.还可以传入默认的Pageable属性(使用@PageableDefault注解)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">query</span><span class="params">(<span class="meta">@PageableDefault(page=2,size=17,sort=&quot;username,asc&quot;)</span>Pageable pageable)</span></span>&#123;<span class="comment">//用spring自带的pageable对象来得到分页信息</span></span><br><span class="line"></span><br><span class="line">        System.out.println(pageable.getPageSize());<span class="comment">// 17</span></span><br><span class="line">        System.out.println(pageable.getPageNumber()); <span class="comment">// 2</span></span><br><span class="line">        System.out.println(pageable.getSort());<span class="comment">// username: DESC</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            查询操作</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>如何保证RabbitMQ不被重复消费</title>
    <url>/2019/11/26/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81RabbitMQ%E4%B8%8D%E8%A2%AB%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9/</url>
    <content><![CDATA[<p>如何保证RabbitMQ不被重复消费</p>
<a id="more"></a>



<hr>
<h5 id="什么是重复消费："><a href="#什么是重复消费：" class="headerlink" title="什么是重复消费："></a>什么是重复消费：</h5><p>​        消费者在消费消息的时候，消费完毕之后会发送一个确认消息给消息队列，消息队列就会知道该消息被消费了，就会将该消息从消息队列中删除。</p>
<p>​        但因为网络故障等原因，确认消息没有传送到消息队列，导致消息队列不知道自己已经消费过该消息了，再次将消息分发给消费者。</p>
<h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><p>​        1、保证消息唯一性</p>
<p>​        2、保证消息等幂性</p>
<p>​        比如：在对写入消息队列时的数据做唯一标识，消费消息时，根据唯一标识判断是否消费过该消息。</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>关于dubbo的介绍和监控中心启动</title>
    <url>/2018/04/14/%E5%85%B3%E4%BA%8Edubbo%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%9B%91%E6%8E%A7%E4%B8%AD%E5%BF%83%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>关于dubbo的介绍和监控中心启动</p>
<a id="more"></a>


<h4 id="关于dubbo的介绍和监控中心启动"><a href="#关于dubbo的介绍和监控中心启动" class="headerlink" title="关于dubbo的介绍和监控中心启动"></a>关于dubbo的介绍和监控中心启动</h4><h5 id="soa面向服务-以dubbo为基础"><a href="#soa面向服务-以dubbo为基础" class="headerlink" title="soa面向服务(以dubbo为基础)"></a>soa面向服务(以dubbo为基础)</h5><p>1 、dubbo的soa的工作原理，和SpringCloud类似</p>
<p>2 、dubbo和SpringCloud的区别在于dubbo由自己的dubbo协议通讯，sc是由http协议(rest风格)</p>
<p>3 、dubbo有一个注册中心的客户端在时时同步注册中心的服务信息</p>
<p>4 、dubbo有一个JavaWeb的监控中心，负责监控服务的注册信息，甚至可以配置负载均衡</p>
<h5 id="将dubbo框架引入到项目中的步骤："><a href="#将dubbo框架引入到项目中的步骤：" class="headerlink" title="将dubbo框架引入到项目中的步骤："></a>将dubbo框架引入到项目中的步骤：</h5><h6 id="1、将dubbo监控中心和tomcat上传到Linux服务器，解压至指定目录"><a href="#1、将dubbo监控中心和tomcat上传到Linux服务器，解压至指定目录" class="headerlink" title="1、将dubbo监控中心和tomcat上传到Linux服务器，解压至指定目录"></a>1、将dubbo监控中心和tomcat上传到Linux服务器，解压至指定目录</h6><h6 id="2、用unzip命令解压dubbo-admin-war监控中心到dubbo目录下"><a href="#2、用unzip命令解压dubbo-admin-war监控中心到dubbo目录下" class="headerlink" title="2、用unzip命令解压dubbo-admin.war监控中心到dubbo目录下"></a>2、用unzip命令解压dubbo-admin.war监控中心到dubbo目录下</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip dubbo-admin.war -d dubbo</span><br></pre></td></tr></table></figure>



<h6 id="3、配置tomcat的server-xml配置文件"><a href="#3、配置tomcat的server-xml配置文件" class="headerlink" title="3、配置tomcat的server.xml配置文件"></a>3、配置tomcat的server.xml配置文件</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/dubbo&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;/opt/dubbo&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">privileged</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h6 id="4、启动tomcat，打开监控中心"><a href="#4、启动tomcat，打开监控中心" class="headerlink" title="4、启动tomcat，打开监控中心"></a>4、启动tomcat，打开监控中心</h6><p>在浏览器输入IP地址：xxx.xxx.xxx.xxx:8080/dubbo</p>
<p><img src="/images/dubbo.png"></p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>开源镜像网站汇总</title>
    <url>/2018/10/04/%E5%9B%BD%E5%86%85%E5%BC%80%E6%BA%90%E9%95%9C%E5%83%8F%E7%BD%91%E7%AB%99%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>资源站&gt;&gt;国内开源镜像网站汇总</p>
<a id="more"></a>

<h3 id="开源镜像网站汇总"><a href="#开源镜像网站汇总" class="headerlink" title="开源镜像网站汇总"></a>开源镜像网站汇总</h3><h4 id="一、站点版"><a href="#一、站点版" class="headerlink" title="一、站点版"></a>一、站点版</h4><h5 id="（一）、企业站"><a href="#（一）、企业站" class="headerlink" title="（一）、企业站"></a>（一）、企业站</h5><p>1.搜狐：<a href="http://mirrors.sohu.com/">http://mirrors.sohu.com/</a><br>2.网易：<a href="http://mirrors.163.com/">http://mirrors.163.com/</a><br>3.阿里云：<a href="http://mirrors.aliyun.com/">http://mirrors.aliyun.com/</a><br>4.腾讯：<a href="http://android-mirror.bugly.qq.com:8080/">http://android-mirror.bugly.qq.com:8080/</a>  （仅针对APP开发的软件，限流，不推荐）</p>
<h5 id="（二）、教育站"><a href="#（二）、教育站" class="headerlink" title="（二）、教育站"></a>（二）、教育站</h5><p>1.上海交通大学：<a href="http://ftp.sjtu.edu.cn/html/resources.xml">http://ftp.sjtu.edu.cn/html/resources.xml</a>  （部分移动运营商出口状况不佳，无法访问）<br>2.华中科技大学：<a href="http://mirror.hust.edu.cn/">http://mirror.hust.edu.cn/</a>  （当前已用容量估计：4.83T）<br>3.清华大学：<a href="http://mirrors.tuna.tsinghua.edu.cn/">http://mirrors.tuna.tsinghua.edu.cn/</a>  （当前已用容量估计：9.8T）<br>4.北京理工大学：<a href="http://mirror.bit.edu.cn/web/">http://mirror.bit.edu.cn/web/</a><br>5.兰州大学：<a href="http://mirror.lzu.edu.cn/">http://mirror.lzu.edu.cn/</a><br>6.中国科技大学：<a href="http://mirrors.ustc.edu.cn/">http://mirrors.ustc.edu.cn/</a>  （当前已用容量估计：21.32T）<br>7.大连东软信息学院：<a href="http://mirrors.neusoft.edu.cn/">http://mirrors.neusoft.edu.cn/</a>  （当前已用容量估计：2.5T）<br>8.东北大学：<a href="http://mirror.neu.edu.cn/">http://mirror.neu.edu.cn/</a><br>9.大连理工大学：<a href="http://mirror.dlut.edu.cn/">http://mirror.dlut.edu.cn/</a><br>10.哈尔滨工业大学：<a href="http://run.hit.edu.cn/html/">http://run.hit.edu.cn/html/</a>  （部分联通运营商出口状况不佳，无法访问）<br>11.北京交通大学：<a href="http://mirror.bjtu.edu.cn/cn/">http://mirror.bjtu.edu.cn/cn/</a><br>12.天津大学：[<a href="http://mirror.tju.edu.cn]">http://mirror.tju.edu.cn]</a><br>        (<a href="http://mirror.tju.edu.cn/">http://mirror.tju.edu.cn/</a>)  （无法访问，ping超时）<br>13.中国地质大学：<a href="http://mirrors.cug.edu.cn/">http://mirrors.cug.edu.cn/</a>  （当前已用容量估计：2.3T）<br>14.浙江大学：<a href="http://mirrors.zju.edu.cn/">http://mirrors.zju.edu.cn/</a><br>15.厦门大学：<a href="http://mirrors.xmu.edu.cn/">http://mirrors.xmu.edu.cn/</a><br>16.中山大学：<a href="http://mirror.sysu.edu.cn/">http://mirror.sysu.edu.cn/</a><br>17.重庆大学：<a href="http://mirrors.cqu.edu.cn/">http://mirrors.cqu.edu.cn/</a>  （当前已用容量估计：3.93T）<br>18.北京化工大学：<a href="http://ubuntu.buct.edu.cn/">http://ubuntu.buct.edu.cn/</a>  （Android SDK镜像仅供校内使用，当前已用容量估计：1.72T）<br>19.南阳理工学院：<a href="http://mirror.nyist.edu.cn/">http://mirror.nyist.edu.cn/</a><br>20.中国科学院：<a href="http://www.opencas.org/mirrors/">http://www.opencas.org/mirrors/</a><br>21.电子科技大学：<a href="http://ubuntu.uestc.edu.cn/">http://ubuntu.uestc.edu.cn/</a>  （无法访问，ping超时）<br>22.电子科技大学星辰工作室：<a href="http://mirrors.stuhome.net/">http://mirrors.stuhome.net/</a>  （当前已用容量估计：1.08T）<br>23.西北农林科技大学：<a href="http://mirrors.nwsuaf.edu.cn/">http://mirrors.nwsuaf.edu.cn/</a>  （只做CentOS镜像，当前已用容量估计：140GB）</p>
<h5 id="（三）、其他"><a href="#（三）、其他" class="headerlink" title="（三）、其他"></a>（三）、其他</h5><p>1.首都在线科技股份有限公司（英文名Capital Online Data Service）：<a href="http://mirrors.yun-idc.com/">http://mirrors.yun-idc.com/</a><br>2.中国电信天翼云：<a href="http://mirrors.ctyun.cn/">http://mirrors.ctyun.cn/</a><br>3.noc.im：<a href="http://mirrors.noc.im/">http://mirrors.noc.im/</a>  （当前已用容量估计：3.74T）<br>4.常州贝特康姆软件技术有限公司：<a href="http://centos.bitcomm.cn/">http://centos.bitcomm.cn/</a>  （只做CentOS镜像，当前已用容量估计：140GB）<br>5.公云PubYun（母公司为贝特康姆）：<a href="http://mirrors.pubyun.com/">http://mirrors.pubyun.com/</a><br>6.Linux运维派：<a href="http://mirrors.skyshe.cn/">http://mirrors.skyshe.cn/</a>  （使用阿里云服务器，界面使用浙江大学的模板，首页维护，内容可访问）<br>7.中国互联网络信息中心：<a href="http://mirrors.cnnic.cn/">http://mirrors.cnnic.cn/</a>  （只做Apache镜像，当前已用容量估计：120GB）<br>8.Fayea工作室：<a href="http://apache.fayea.com/">http://apache.fayea.com/</a>  （只做Apache镜像，当前已用容量估计：120GB）</p>
<h4 id="二、软件版"><a href="#二、软件版" class="headerlink" title="二、软件版"></a>二、软件版</h4><h5 id="（一）、操作系统类"><a href="#（一）、操作系统类" class="headerlink" title="（一）、操作系统类"></a>（一）、操作系统类</h5><h6 id="1-Ubuntu"><a href="#1-Ubuntu" class="headerlink" title="1.Ubuntu"></a>1.Ubuntu</h6><p>阿里云：<a href="http://mirrors.aliyun.com/ubuntu-releases/">http://mirrors.aliyun.com/ubuntu-releases/</a><br>网易：<a href="http://mirrors.163.com/ubuntu-releases/">http://mirrors.163.com/ubuntu-releases/</a><br>搜狐：<a href="http://mirrors.sohu.com/ubuntu-releases/">http://mirrors.sohu.com/ubuntu-releases/</a>  （搜狐在12年之后似乎不同步了）<br>首都在线科技股份有限公司：<a href="http://mirrors.yun-idc.com/ubuntu-releases/">http://mirrors.yun-idc.com/ubuntu-releases/</a></p>
<h6 id="2-centos"><a href="#2-centos" class="headerlink" title="2.centos"></a>2.centos</h6><p>网易：<a href="http://mirrors.163.com/centos/">http://mirrors.163.com/centos/</a><br>搜狐：<a href="http://mirrors.sohu.com/centos/">http://mirrors.sohu.com/centos/</a><br>阿里云：<a href="http://mirrors.aliyun.com/centos/">http://mirrors.aliyun.com/centos/</a></p>
<h5 id="（二）、服务器类"><a href="#（二）、服务器类" class="headerlink" title="（二）、服务器类"></a>（二）、服务器类</h5><h6 id="1-tomcat、Apache"><a href="#1-tomcat、Apache" class="headerlink" title="1.tomcat、Apache"></a>1.tomcat、Apache</h6><p>中国互联网络信息中心：<a href="http://mirrors.cnnic.cn/apache/">http://mirrors.cnnic.cn/apache/</a><br>华中科技大学：<a href="http://mirrors.hust.edu.cn/apache/">http://mirrors.hust.edu.cn/apache/</a><br>北京理工大学：<a href="http://mirror.bit.edu.cn/apache/">http://mirror.bit.edu.cn/apache/</a></p>
<h6 id="2-MySQL"><a href="#2-MySQL" class="headerlink" title="2.MySQL"></a>2.MySQL</h6><p>北京理工大学：<a href="http://mirror.bit.edu.cn/mysql/Downloads/">http://mirror.bit.edu.cn/mysql/Downloads/</a><br>中国电信天翼云：<a href="http://mirrors.ctyun.cn/Mysql/">http://mirrors.ctyun.cn/Mysql/</a></p>
<h6 id="3-PostgreSQL"><a href="#3-PostgreSQL" class="headerlink" title="3.PostgreSQL"></a>3.PostgreSQL</h6><p>浙江大学：<a href="http://mirrors.zju.edu.cn/postgresql/">http://mirrors.zju.edu.cn/postgresql/</a></p>
<h6 id="4-MariaDB"><a href="#4-MariaDB" class="headerlink" title="4.MariaDB"></a>4.MariaDB</h6><p>中国电信天翼云：<a href="http://mirrors.ctyun.cn/MariaDB/">http://mirrors.ctyun.cn/MariaDB/</a></p>
<h6 id="5-VideoLAN"><a href="#5-VideoLAN" class="headerlink" title="5.VideoLAN"></a>5.VideoLAN</h6><p>大连东软信息学院：<a href="http://mirrors.neusoft.edu.cn/videolan/">http://mirrors.neusoft.edu.cn/videolan/</a><br>中国科技大学：<a href="http://mirrors.ustc.edu.cn/videolan-ftp/">http://mirrors.ustc.edu.cn/videolan-ftp/</a></p>
<h5 id="（三）、开发工具类"><a href="#（三）、开发工具类" class="headerlink" title="（三）、开发工具类"></a>（三）、开发工具类</h5><h6 id="1-eclipse"><a href="#1-eclipse" class="headerlink" title="1.eclipse"></a>1.eclipse</h6><p>中国科技大学：<a href="http://mirrors.ustc.edu.cn/eclipse/">http://mirrors.ustc.edu.cn/eclipse/</a><br>中国科学院：<a href="http://mirrors.opencas.cn/eclipse/">http://mirrors.opencas.cn/eclipse/</a><br>东北大学：<a href="http://ftp.neu.edu.cn/mirrors/eclipse/%EF%BC%8Chttp://mirror.neu.edu.cn/eclipse/">http://ftp.neu.edu.cn/mirrors/eclipse/，http://mirror.neu.edu.cn/eclipse/</a></p>
<h6 id="2-安卓SDK"><a href="#2-安卓SDK" class="headerlink" title="2.安卓SDK"></a>2.安卓SDK</h6><p>中国科学院：<a href="http://mirrors.opencas.ac.cn/android/repository/">http://mirrors.opencas.ac.cn/android/repository/</a><br>南洋理工学院：<a href="http://mirror.nyist.edu.cn/android/repository/">http://mirror.nyist.edu.cn/android/repository/</a><br>中国科学院：<a href="http://mirrors.opencas.cn/android/repository/">http://mirrors.opencas.cn/android/repository/</a><br>腾讯：<a href="http://android-mirror.bugly.qq.com:8080/android/repository/">http://android-mirror.bugly.qq.com:8080/android/repository/</a>  （限流，不推荐）<br>大连东软信息学院：<a href="http://mirrors.neusoft.edu.cn/android/repository/">http://mirrors.neusoft.edu.cn/android/repository/</a>  （同步效果不如中科院的镜像，不推荐）</p>
<h6 id="3-Xcode"><a href="#3-Xcode" class="headerlink" title="3.Xcode"></a>3.Xcode</h6><p>腾讯：<a href="http://android-mirror.bugly.qq.com:8080/Xcode/">http://android-mirror.bugly.qq.com:8080/Xcode/</a>  （从7.2之后不再更新，建议直接从官网下载）</p>
<h4 id="三、官方镜像列表状态地址"><a href="#三、官方镜像列表状态地址" class="headerlink" title="三、官方镜像列表状态地址"></a>三、官方镜像列表状态地址</h4><p>CentOS：<a href="http://mirror-status.centos.org/#cn">http://mirror-status.centos.org/#cn</a><br>Archlinux：<a href="https://www.archlinux.org/mirrors/status/">https://www.archlinux.org/mirrors/status/</a><br>Ubuntu：<a href="https://launchpad.net/ubuntu/+cdmirrors">https://launchpad.net/ubuntu/+cdmirrors</a><br>Debian：<a href="http://mirror.debian.org/status.html">http://mirror.debian.org/status.html</a><br>Fedora Linux/Fedora EPEL：<a href="https://admin.fedoraproject.org/mirrormanager/mirrors">https://admin.fedoraproject.org/mirrormanager/mirrors</a><br>Apache：<a href="http://www.apache.org/mirrors/#cn">http://www.apache.org/mirrors/#cn</a></p>
<p>Cygwin：<a href="https://www.cygwin.com/mirrors.html">https://www.cygwin.com/mirrors.html</a></p>
<h5 id="参考文献：https-www-cnblogs-com-jtlgb-p-5702713-html"><a href="#参考文献：https-www-cnblogs-com-jtlgb-p-5702713-html" class="headerlink" title="***//参考文献：https://www.cnblogs.com/jtlgb/p/5702713.html"></a>***//参考文献：<a href="https://www.cnblogs.com/jtlgb/p/5702713.html">https://www.cnblogs.com/jtlgb/p/5702713.html</a></h5>]]></content>
      <tags>
        <tag>资源站</tag>
      </tags>
  </entry>
  <entry>
    <title>开发文档</title>
    <url>/2020/01/17/%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h5 id="开发文档链接记录"><a href="#开发文档链接记录" class="headerlink" title="开发文档链接记录"></a>开发文档链接记录</h5><a id="more"></a>

<p>thymeleaf：<a href="https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html">https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html</a></p>
<p>微信公众号：<a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html">https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html</a></p>
<p>微信支付：<a href="https://pay.weixin.qq.com/wiki/doc/api/index.html">https://pay.weixin.qq.com/wiki/doc/api/index.html</a></p>
<p>微信小程序：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">https://developers.weixin.qq.com/miniprogram/dev/framework/</a></p>
<p>支付宝APP支付：<a href="https://docs.open.alipay.com/204">https://docs.open.alipay.com/204</a></p>
<p>支付宝手机网站支付：<a href="https://docs.open.alipay.com/203">https://docs.open.alipay.com/203</a></p>
<p>支付宝电脑网站支付：<a href="https://docs.open.alipay.com/270">https://docs.open.alipay.com/270</a></p>
]]></content>
      <tags>
        <tag>文档</tag>
      </tags>
  </entry>
  <entry>
    <title>网页版工具链接</title>
    <url>/2020/03/02/%E7%BD%91%E9%A1%B5%E7%89%88%E5%B7%A5%E5%85%B7%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h5 id="网页版在线工具链接"><a href="#网页版在线工具链接" class="headerlink" title="网页版在线工具链接"></a>网页版在线工具链接</h5><a id="more"></a>


<p>取色器：<a href="http://xiaohudie.net/RGB.html">http://xiaohudie.net/RGB.html</a></p>
<p>PDF转换器：<a href="https://app.xunjiepdf.com/">https://app.xunjiepdf.com/</a></p>
<p>git国内镜像：<a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a></p>
<p>阿里Icon：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p>
<p>网易开源镜像站：<a href="http://mirrors.163.com/">http://mirrors.163.com/</a></p>
<p>URL在线编码解码工具：<a href="http://www.jsons.cn/urlencode/">http://www.jsons.cn/urlencode/</a></p>
<p>BootStrap可视化工具：<a href="http://www.ibootstrap.cn/">http://www.ibootstrap.cn/</a></p>
]]></content>
      <tags>
        <tag>备忘录</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>安装nginx时报错</title>
    <url>/2019/06/22/%E5%AE%89%E8%A3%85nginx%E6%97%B6%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>安装nginx时错误提示： ./configure: error: the HTTP rewrite module requires the PCRE library.</p>
<a id="more"></a>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h5 id="出现此错误的解决方法如下："><a href="#出现此错误的解决方法如下：" class="headerlink" title="出现此错误的解决方法如下："></a>出现此错误的解决方法如下：</h5><h6 id="执行以下两个命令："><a href="#执行以下两个命令：" class="headerlink" title="执行以下两个命令："></a>执行以下两个命令：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install pcre-devel</span><br></pre></td></tr></table></figure>

<h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure>





<h6 id="然后再去执行nginx的配置命令configure，顺利执行。"><a href="#然后再去执行nginx的配置命令configure，顺利执行。" class="headerlink" title="然后再去执行nginx的配置命令configure，顺利执行。"></a>然后再去执行nginx的配置命令configure，顺利执行。</h6><p><img src="/images/nginxerror.png"></p>
<blockquote>
<blockquote>
<p>在此做个记录，以防以后再次遇到此问题。</p>
</blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>Error</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>轮子工具</title>
    <url>/2020/03/02/%E8%BD%AE%E5%AD%90/</url>
    <content><![CDATA[<h5 id="拒绝重复造轮子"><a href="#拒绝重复造轮子" class="headerlink" title="拒绝重复造轮子"></a>拒绝重复造轮子</h5><a id="more"></a>

<p>IDE 插件 Cloud Toolkit（高效开发、测试、诊断、部署）：<a href="https://www.aliyun.com/product/cloudtoolkit">https://www.aliyun.com/product/cloudtoolkit</a></p>
<p>Java 代码规约扫描插件：<a href="https://github.com/alibaba/p3c">https://github.com/alibaba/p3c</a></p>
<p>Web 开发基础样式库 WeUI：<a href="https://github.com/Tencent/Weui">https://github.com/Tencent/Weui</a></p>
<p>阿里fastdfs-client-java插件：<a href="https://github.com/happyfish100/fastdfs-client-java">https://github.com/happyfish100/fastdfs-client-java</a></p>
<p>小程序组件化开发框架 WePY：<a href="https://github.com/Tencent/wepy">https://github.com/Tencent/wepy</a></p>
<p>个性化定制的数据可视化图表 Echarts：<a href="https://github.com/apache/incubator-echarts">https://github.com/apache/incubator-echarts</a></p>
<h5 id="登录、支付："><a href="#登录、支付：" class="headerlink" title="登录、支付："></a>登录、支付：</h5><p>微信Java SDK：<a href="https://github.com/Wechat-Group/WxJava">https://github.com/Wechat-Group/WxJava</a></p>
<p>支付SDK：<a href="https://github.com/Pay-Group/best-pay-sdk">https://github.com/Pay-Group/best-pay-sdk</a></p>
<p>Alipay 和 WeChat 的支付 SDK：<a href="https://github.com/yansongda/pay">https://github.com/yansongda/pay</a></p>
<h5 id="分享："><a href="#分享：" class="headerlink" title="分享："></a>分享：</h5><p>分享：<a href="http://www.mob.com/mobService/sharesdk">http://www.mob.com/mobService/sharesdk</a></p>
<p>友盟分享SDK：<a href="https://developer.umeng.com/sdk?spm=a213m0.13887608.0.0.3cb24030wK3Ds7">https://developer.umeng.com/sdk?spm=a213m0.13887608.0.0.3cb24030wK3Ds7</a></p>
<p>极光分享：<a href="https://www.jiguang.cn/share">https://www.jiguang.cn/share</a></p>
<h5 id="消息推送："><a href="#消息推送：" class="headerlink" title="消息推送："></a>消息推送：</h5><p>腾讯信鸽：<a href="https://xg.qq.com/ctr_index/download">https://xg.qq.com/ctr_index/download</a></p>
<p>极光推送：<a href="https://www.jiguang.cn/push">https://www.jiguang.cn/push</a></p>
<p>个推：<a href="http://docs.getui.com/download.html">http://docs.getui.com/download.html</a></p>
<p>百度云推送：<a href="http://push.baidu.com/sdk/push_client_sdk_for_android">http://push.baidu.com/sdk/push_client_sdk_for_android</a></p>
<p>友盟消息推送：<a href="https://developer.umeng.com/sdk">https://developer.umeng.com/sdk</a></p>
<h5 id="即时通信服务："><a href="#即时通信服务：" class="headerlink" title="即时通信服务："></a>即时通信服务：</h5><p>融云：<a href="https://www.rongcloud.cn/downloads">https://www.rongcloud.cn/downloads</a></p>
<p>环信：<a href="https://www.easemob.com/download/im">https://www.easemob.com/download/im</a></p>
<h5 id="语音服务："><a href="#语音服务：" class="headerlink" title="语音服务："></a>语音服务：</h5><p>OKVoice：<a href="https://jixianyuan.com/">https://jixianyuan.com/</a></p>
<h5 id="统计："><a href="#统计：" class="headerlink" title="统计："></a>统计：</h5><p>友盟移动统计：<a href="https://developer.umeng.com/sdk">https://developer.umeng.com/sdk</a></p>
<p>极光统计：<a href="https://www.jiguang.cn/analytics">https://www.jiguang.cn/analytics</a></p>
<p>个推统计：<a href="https://www.getui.com/analytics">https://www.getui.com/analytics</a></p>
<h5 id="短信服务："><a href="#短信服务：" class="headerlink" title="短信服务："></a>短信服务：</h5><p>极光短信：<a href="https://www.jiguang.cn/analytics">https://www.jiguang.cn/analytics</a></p>
<h5 id="认证："><a href="#认证：" class="headerlink" title="认证："></a>认证：</h5><p>个推认证：<a href="https://www.getui.com/verification">https://www.getui.com/verification</a></p>
<p>激光认证：<a href="https://www.jiguang.cn/identify">https://www.jiguang.cn/identify</a></p>
]]></content>
      <tags>
        <tag>备忘录</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>通用mapper整合</title>
    <url>/2019/04/17/%E9%80%9A%E7%94%A8mapper%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<p>Spring Boot通用mapper整合的方法及步骤</p>
<a id="more"></a>

<h5 id="通用mapper整合（作用是将单表的增删改查操作省去）"><a href="#通用mapper整合（作用是将单表的增删改查操作省去）" class="headerlink" title="**通用mapper整合（作用是将单表的增删改查操作省去）"></a><strong>**通用mapper整合（作用是将单表的增删改查操作省去）</strong></h5><h6 id="1、导入pom依赖"><a href="#1、导入pom依赖" class="headerlink" title="1、导入pom依赖"></a>1、导入pom依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通用mapper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="2、配置mapper-，继承通用mapper"><a href="#2、配置mapper-，继承通用mapper" class="headerlink" title="2、配置mapper ，继承通用mapper"></a>2、配置mapper ，继承通用mapper</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">UmsMember</span>&gt; </span>&#123;</span><br></pre></td></tr></table></figure>

<h6 id="3、配置通用mapper主键和主键返回策略"><a href="#3、配置通用mapper主键和主键返回策略" class="headerlink" title="3、配置通用mapper主键和主键返回策略"></a>3、配置通用mapper主键和主键返回策略</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>   <span class="comment">//主键返回策略</span></span><br></pre></td></tr></table></figure>

<h6 id="4、配置启动类扫描MapperScan，使用通用mapper的MapperScan"><a href="#4、配置启动类扫描MapperScan，使用通用mapper的MapperScan" class="headerlink" title="4、配置启动类扫描MapperScan，使用通用mapper的MapperScan"></a>4、配置启动类扫描MapperScan，使用通用mapper的MapperScan</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br></pre></td></tr></table></figure>

<h5 id="gt-gt-如果想查看执行的sql语句，需要修改日志级别为debug"><a href="#gt-gt-如果想查看执行的sql语句，需要修改日志级别为debug" class="headerlink" title="&gt;&gt;如果想查看执行的sql语句，需要修改日志级别为debug"></a>&gt;&gt;如果想查看执行的sql语句，需要修改日志级别为debug</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#日志级别</span><br><span class="line">logging.level.root=debug</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA快捷键</title>
    <url>/2019/07/11/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h5 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h5><a id="more"></a>


<h5 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h5><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + F</td>
<td>在当前文件进行文本查找 <strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + R</td>
<td>在当前文件进行文本替换 <strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + Z</td>
<td>撤销 <strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + Y</td>
<td>删除光标所在行 或 删除选中的行<strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + X</td>
<td>剪切光标所在行 或 剪切选择内容</td>
</tr>
<tr>
<td>Ctrl + C</td>
<td>复制光标所在行 或 复制选择内容</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面<strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围<strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + E</td>
<td>显示最近打开的文件记录列表</td>
</tr>
<tr>
<td>Ctrl + N</td>
<td>根据输入的 <strong>类名</strong> 查找类文件</td>
</tr>
<tr>
<td>Ctrl + G</td>
<td>在当前文件跳转到指定行处</td>
</tr>
<tr>
<td>Ctrl + J</td>
<td>插入自定义动态代码模板</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>方法参数提示显示</td>
</tr>
<tr>
<td>Ctrl + Q</td>
<td>光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容</td>
</tr>
<tr>
<td>Ctrl + U</td>
<td>前往当前光标所在的方法的父类的方法 / 接口定义</td>
</tr>
<tr>
<td>Ctrl + B</td>
<td>进入光标所在的方法/变量的接口或是定义出，等效于 <code>Ctrl + 左键单击</code></td>
</tr>
<tr>
<td>Ctrl + K</td>
<td>版本控制提交项目，需要此项目有加入到版本控制才可用</td>
</tr>
<tr>
<td>Ctrl + T</td>
<td>版本控制更新项目，需要此项目有加入到版本控制才可用</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>显示当前类的层次结构</td>
</tr>
<tr>
<td>Ctrl + O</td>
<td>选择可重写的方法</td>
</tr>
<tr>
<td>Ctrl + I</td>
<td>选择可继承的方法</td>
</tr>
<tr>
<td>Ctrl + +</td>
<td>展开代码</td>
</tr>
<tr>
<td>Ctrl + -</td>
<td>折叠代码</td>
</tr>
<tr>
<td>Ctrl + /</td>
<td>注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号<strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + [</td>
<td>移动光标到当前所在代码的花括号开始位置</td>
</tr>
<tr>
<td>Ctrl + ]</td>
<td>移动光标到当前所在代码的花括号结束位置</td>
</tr>
<tr>
<td>Ctrl + F1</td>
<td>在光标所在的错误代码出显示错误信息</td>
</tr>
<tr>
<td>Ctrl + F3</td>
<td>调转到所选中的词的下一个引用位置</td>
</tr>
<tr>
<td>Ctrl + F4</td>
<td>关闭当前编辑文件</td>
</tr>
<tr>
<td>Ctrl + F8</td>
<td>在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td>
</tr>
<tr>
<td>Ctrl + F9</td>
<td>执行 Make Project 操作</td>
</tr>
<tr>
<td>Ctrl + F11</td>
<td>选中文件 / 文件夹，使用助记符设定 / 取消书签</td>
</tr>
<tr>
<td>Ctrl + F12</td>
<td>弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td>
</tr>
<tr>
<td>Ctrl + Tab</td>
<td>编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td>
</tr>
<tr>
<td>Ctrl + Enter</td>
<td>智能分隔行</td>
</tr>
<tr>
<td>Ctrl + End</td>
<td>跳到文件尾</td>
</tr>
<tr>
<td>Ctrl + Home</td>
<td>跳到文件头</td>
</tr>
<tr>
<td>Ctrl + Space</td>
<td>基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 <code>Ctrl + 逗号</code></td>
</tr>
<tr>
<td>Ctrl + Delete</td>
<td>删除光标后面的单词或是中文句</td>
</tr>
<tr>
<td>Ctrl + BackSpace</td>
<td>删除光标前面的单词或是中文句</td>
</tr>
<tr>
<td>Ctrl + 1,2,3…9</td>
<td>定位到对应数值的书签位置</td>
</tr>
<tr>
<td>Ctrl + 左键单击</td>
<td>在打开的文件标题上，弹出该文件路径</td>
</tr>
<tr>
<td>Ctrl + 光标定位</td>
<td>按 Ctrl 不要松开，会显示光标所在的类信息摘要</td>
</tr>
<tr>
<td>Ctrl + 左方向键</td>
<td>光标跳转到当前单词 / 中文句的左侧开头位置</td>
</tr>
<tr>
<td>Ctrl + 右方向键</td>
<td>光标跳转到当前单词 / 中文句的右侧开头位置</td>
</tr>
<tr>
<td>Ctrl + 前方向键</td>
<td>等效于鼠标滚轮向前效果</td>
</tr>
<tr>
<td>Ctrl + 后方向键</td>
<td>等效于鼠标滚轮向后效果</td>
</tr>
</tbody></table>
<h5 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h5><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Alt + `</td>
<td>显示版本控制常用操作菜单弹出层</td>
</tr>
<tr>
<td>Alt + Q</td>
<td>弹出一个提示，显示当前类的声明 / 上下文信息</td>
</tr>
<tr>
<td>Alt + F1</td>
<td>显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td>
</tr>
<tr>
<td>Alt + F2</td>
<td>对于前面页面，显示各类浏览器打开目标选择弹出层</td>
</tr>
<tr>
<td>Alt + F3</td>
<td>选中文本，逐个往下查找相同文本，并高亮显示</td>
</tr>
<tr>
<td>Alt + F7</td>
<td>查找光标所在的方法 / 变量 / 类被调用的地方</td>
</tr>
<tr>
<td>Alt + F8</td>
<td>在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td>
</tr>
<tr>
<td>Alt + Home</td>
<td>定位 / 显示到当前文件的 <code>Navigation Bar</code></td>
</tr>
<tr>
<td>Alt + Enter</td>
<td>IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 <strong>（常用）</strong></td>
</tr>
<tr>
<td>Alt + Insert</td>
<td>代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td>
</tr>
<tr>
<td>Alt + 左方向键</td>
<td>按左方向切换当前已打开的文件视图</td>
</tr>
<tr>
<td>Alt + 右方向键</td>
<td>按右方向切换当前已打开的文件视图</td>
</tr>
<tr>
<td>Alt + 前方向键</td>
<td>当前光标跳转到当前文件的前一个方法名位置</td>
</tr>
<tr>
<td>Alt + 后方向键</td>
<td>当前光标跳转到当前文件的后一个方法名位置</td>
</tr>
<tr>
<td>Alt + 1,2,3…9</td>
<td>显示对应数值的选项卡，其中 1 是 Project 用得最多</td>
</tr>
</tbody></table>
<h5 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h5><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Shift + F1</td>
<td>如果有外部文档可以连接外部文档</td>
</tr>
<tr>
<td>Shift + F2</td>
<td>跳转到上一个高亮错误 或 警告位置</td>
</tr>
<tr>
<td>Shift + F3</td>
<td>在查找模式下，查找匹配上一个</td>
</tr>
<tr>
<td>Shift + F4</td>
<td>对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td>
</tr>
<tr>
<td>Shift + F6</td>
<td>对文件 / 文件夹 重命名</td>
</tr>
<tr>
<td>Shift + F7</td>
<td>在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td>
</tr>
<tr>
<td>Shift + F8</td>
<td>在 Debug 模式下，跳出，表现出来的效果跟 <code>F9</code> 一样</td>
</tr>
<tr>
<td>Shift + F9</td>
<td>等效于点击工具栏的 <code>Debug</code> 按钮</td>
</tr>
<tr>
<td>Shift + F10</td>
<td>等效于点击工具栏的 <code>Run</code> 按钮</td>
</tr>
<tr>
<td>Shift + F11</td>
<td>弹出书签显示层</td>
</tr>
<tr>
<td>Shift + Tab</td>
<td>取消缩进</td>
</tr>
<tr>
<td>Shift + ESC</td>
<td>隐藏当前 或 最后一个激活的工具窗口</td>
</tr>
<tr>
<td>Shift + End</td>
<td>选中光标到当前行尾位置</td>
</tr>
<tr>
<td>Shift + Home</td>
<td>选中光标到当前行头位置</td>
</tr>
<tr>
<td>Shift + Enter</td>
<td>开始新一行。光标所在行下空出一行，光标定位到新行位置</td>
</tr>
<tr>
<td>Shift + 左键单击</td>
<td>在打开的文件名上按此快捷键，可以关闭当前打开文件</td>
</tr>
<tr>
<td>Shift + 滚轮前后滚动</td>
<td>当前文件的横向滚动轴滚动</td>
</tr>
</tbody></table>
<h5 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl+Alt"></a>Ctrl+Alt</h5><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Alt + L</td>
<td>格式化代码，可以对当前文件和整个包目录使用**(常用)**</td>
</tr>
<tr>
<td>Ctrl + Alt + O</td>
<td>优化导入的类，可以对当前文件和整个包目录使用<strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + Alt + I</td>
<td>光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td>
</tr>
<tr>
<td>Ctrl + Alt + T</td>
<td>对选中的代码弹出环绕选项弹出层</td>
</tr>
<tr>
<td>Ctrl + Alt + J</td>
<td>弹出模板选择窗口，讲选定的代码加入动态模板中</td>
</tr>
<tr>
<td>Ctrl + Alt + H</td>
<td>调用层次</td>
</tr>
<tr>
<td>Ctrl + Alt + B</td>
<td>在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td>
</tr>
<tr>
<td>Ctrl + Alt + V</td>
<td>快速引进变量</td>
</tr>
<tr>
<td>Ctrl + Alt + Y</td>
<td>同步、刷新</td>
</tr>
<tr>
<td>Ctrl + Alt + S</td>
<td>打开 IntelliJ IDEA 系统设置</td>
</tr>
<tr>
<td>Ctrl + Alt + F7</td>
<td>显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td>
</tr>
<tr>
<td>Ctrl + Alt + F11</td>
<td>切换全屏模式</td>
</tr>
<tr>
<td>Ctrl + Alt + Enter</td>
<td>光标所在行上空出一行，光标定位到新行</td>
</tr>
<tr>
<td>Ctrl + Alt + Home</td>
<td>弹出跟当前文件有关联的文件弹出层</td>
</tr>
<tr>
<td>Ctrl + Alt + Space</td>
<td>类名自动完成</td>
</tr>
<tr>
<td>Ctrl + Alt + 左方向键</td>
<td>退回到上一个操作的地方<strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + Alt + 右方向键</td>
<td>前进到上一个操作的地方<strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + Alt + 前方向键</td>
<td>在查找模式下，跳到上个查找的文件</td>
</tr>
<tr>
<td>Ctrl + Alt + 后方向键</td>
<td>在查找模式下，跳到下个查找的文件</td>
</tr>
</tbody></table>
<h5 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl+Shift"></a>Ctrl+Shift</h5><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Shift + F</td>
<td>根据输入内容查找整个项目 或 指定目录内文件<strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + Shift + R</td>
<td>根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件<strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + Shift + J</td>
<td>自动将下一行合并到当前行末尾<strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + Shift + Z</td>
<td>取消撤销<strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + Shift + W</td>
<td>递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围<strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td>通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠<strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + Shift + U</td>
<td>对选中的代码进行大 / 小写轮流转换 <strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + Shift + T</td>
<td>对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td>
</tr>
<tr>
<td>Ctrl + Shift + C</td>
<td>复制当前文件磁盘路径到剪贴板</td>
</tr>
<tr>
<td>Ctrl + Shift + V</td>
<td>弹出缓存的最近拷贝的内容管理器弹出层</td>
</tr>
<tr>
<td>Ctrl + Shift + E</td>
<td>显示最近修改的文件列表的弹出层</td>
</tr>
<tr>
<td>Ctrl + Shift + H</td>
<td>显示方法层次结构</td>
</tr>
<tr>
<td>Ctrl + Shift + B</td>
<td>跳转到类型声明处</td>
</tr>
<tr>
<td>Ctrl + Shift + I</td>
<td>快速查看光标所在的方法 或 类的定义</td>
</tr>
<tr>
<td>Ctrl + Shift + A</td>
<td>查找动作 / 设置</td>
</tr>
<tr>
<td>Ctrl + Shift + /</td>
<td>代码块注释<strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + Shift + [</td>
<td>选中从光标所在位置到它的顶部中括号位置</td>
</tr>
<tr>
<td>Ctrl + Shift + ]</td>
<td>选中从光标所在位置到它的底部中括号位置</td>
</tr>
<tr>
<td>Ctrl + Shift + +</td>
<td>展开所有代码</td>
</tr>
<tr>
<td>Ctrl + Shift + -</td>
<td>折叠所有代码</td>
</tr>
<tr>
<td>Ctrl + Shift + F7</td>
<td>高亮显示所有该选中文本，按Esc高亮消失</td>
</tr>
<tr>
<td>Ctrl + Shift + F8</td>
<td>在 Debug 模式下，指定断点进入条件</td>
</tr>
<tr>
<td>Ctrl + Shift + F9</td>
<td>编译选中的文件 / 包 / Module</td>
</tr>
<tr>
<td>Ctrl + Shift + F12</td>
<td>编辑器最大化</td>
</tr>
<tr>
<td>Ctrl + Shift + Space</td>
<td>智能代码提示</td>
</tr>
<tr>
<td>Ctrl + Shift + Enter</td>
<td>自动结束代码，行末自动添加分号 <strong>（常用）</strong></td>
</tr>
<tr>
<td>Ctrl + Shift + Backspace</td>
<td>退回到上次修改的地方</td>
</tr>
<tr>
<td>Ctrl + Shift + 1,2,3…9</td>
<td>快速添加指定数值的书签</td>
</tr>
<tr>
<td>Ctrl + Shift + 左方向键</td>
<td>在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句</td>
</tr>
<tr>
<td>Ctrl + Shift + 右方向键</td>
<td>在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句</td>
</tr>
<tr>
<td>Ctrl + Shift + 左方向键</td>
<td>在光标焦点是在工具选项卡上，缩小选项卡区域</td>
</tr>
<tr>
<td>Ctrl + Shift + 右方向键</td>
<td>在光标焦点是在工具选项卡上，扩大选项卡区域</td>
</tr>
<tr>
<td>Ctrl + Shift + 前方向键</td>
<td>光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td>
</tr>
<tr>
<td>Ctrl + Shift + 后方向键</td>
<td>光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td>
</tr>
</tbody></table>
<h5 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h5><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Alt + Shift + N</td>
<td>选择 / 添加 task</td>
</tr>
<tr>
<td>Alt + Shift + F</td>
<td>显示添加到收藏夹弹出层</td>
</tr>
<tr>
<td>Alt + Shift + C</td>
<td>查看最近操作项目的变化情况列表</td>
</tr>
<tr>
<td>Alt + Shift + F</td>
<td>添加到收藏夹</td>
</tr>
<tr>
<td>Alt + Shift + I</td>
<td>查看项目当前文件</td>
</tr>
<tr>
<td>Alt + Shift + F7</td>
<td>在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td>
</tr>
<tr>
<td>Alt + Shift + F9</td>
<td>弹出 Debug的可选择菜单</td>
</tr>
<tr>
<td>Alt + Shift + F10</td>
<td>弹出 <code>Run</code> 的可选择菜单</td>
</tr>
<tr>
<td>Alt + Shift + 左键双击</td>
<td>选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句</td>
</tr>
<tr>
<td>Alt + Shift + 前方向键</td>
<td>移动光标所在行向上移动</td>
</tr>
<tr>
<td>Alt + Shift + 后方向键</td>
<td>移动光标所在行向下移动</td>
</tr>
</tbody></table>
<h5 id="Ctrl-Shift-Alt"><a href="#Ctrl-Shift-Alt" class="headerlink" title="Ctrl + Shift + Alt"></a>Ctrl + Shift + Alt</h5><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Shift + Alt + V</td>
<td>无格式黏贴</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + N</td>
<td>前往指定的变量 / 方法</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + S</td>
<td>打开当前项目设置</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + C</td>
<td>复制参考信息</td>
</tr>
</tbody></table>
<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><table>
<thead>
<tr>
<th>快捷键</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>F2</td>
<td>跳转到下一个高亮错误 或 警告位置<strong>（常用）</strong></td>
</tr>
<tr>
<td>F3</td>
<td>在查找模式下，定位到下一个匹配处</td>
</tr>
<tr>
<td>F4</td>
<td>编辑源</td>
</tr>
<tr>
<td>F7</td>
<td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td>
</tr>
<tr>
<td>F8</td>
<td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td>
</tr>
<tr>
<td>F9</td>
<td>在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td>
</tr>
<tr>
<td>F11</td>
<td>添加书签</td>
</tr>
<tr>
<td>F12</td>
<td>回到前一个工具窗口</td>
</tr>
<tr>
<td>Tab</td>
<td>缩进</td>
</tr>
<tr>
<td>ESC</td>
<td>从工具窗口进入代码文件窗口</td>
</tr>
<tr>
<td>连按两次Shift</td>
<td>弹出 <code>Search Everywhere</code> 弹出层</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/2017/09/24/Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>Linux命令</p>
<a id="more"></a>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">===================目录操作========================</span><br><span class="line">mkdir: 创建目录</span><br><span class="line">　　-p : 递归的创建目录 也就是可以创建多层目录</span><br><span class="line">　　一次创建多个目录： mkdir &#123;a,b,c,d,e,f&#125;</span><br><span class="line">　　一次创建 a b c d e f多个目录。</span><br><span class="line">rmdir：删除一个空文件夹</span><br><span class="line">cp：复制文件或者文件夹</span><br><span class="line"></span><br><span class="line">　　-a =-pdr</span><br><span class="line">　　-p 同时复制文件属性，比如修改日期</span><br><span class="line">　　-d 复制时保留文件链接</span><br><span class="line">　　-r: 复制文件夹时,递归复制子文件夹</span><br><span class="line">　　-l 不复制，而是创建指向源文件的链接文件，链接文件名由目标文件给出。   </span><br><span class="line">　　note:可以在拷贝的同时重命名</span><br><span class="line">mv：移动文件或者文件夹，可以在移动的时候重命名</span><br><span class="line"></span><br><span class="line">rm ：删除文件或者文件夹</span><br><span class="line">　　-r：递归删除</span><br><span class="line">　　-f：强制删除 即没有提醒</span><br><span class="line"></span><br><span class="line">======================文件处理命令==============================</span><br><span class="line">ls :查看文件</span><br><span class="line">　　-l 以列表形式查看</span><br><span class="line">　　-h 以一种人性化的方式查看，也是文件的大小以合适的单位显示</span><br><span class="line">　　-a 查看所有文件，包括隐藏文件</span><br><span class="line">　　-i 显示出文件的i节点号</span><br><span class="line">touch 文件名：创建文件 可以一次创建多个文件，以空格隔开</span><br><span class="line"></span><br><span class="line">cat :查看文件内容 </span><br><span class="line">　　-n:带行号</span><br><span class="line">tac:反向显示文件内容</span><br><span class="line"></span><br><span class="line">more：分页查看文件内容</span><br><span class="line">　　进入浏览模式后：</span><br><span class="line">　　f或者空格：下一页</span><br><span class="line">　　enter：一行一行往下翻</span><br><span class="line">　　q:退出</span><br><span class="line"></span><br><span class="line">less:查看文件内容 </span><br><span class="line">　　空格翻页</span><br><span class="line">　　回车换行</span><br><span class="line">　　pageup：上一页</span><br><span class="line">　　pagedown：下一页</span><br><span class="line">　　上箭头：向上翻</span><br><span class="line">　　下箭头：向下翻</span><br><span class="line">　　/搜索词 n向下找</span><br><span class="line"></span><br><span class="line">head -n 文件名 :查看文件前n行。缺省-n显示前10行</span><br><span class="line">tail -n 文件名 ：查看文件的末尾几行</span><br><span class="line">　　-f :动态显示文件末尾内容</span><br><span class="line"></span><br><span class="line">ln:链接命令</span><br><span class="line">　　-s创建软连接</span><br><span class="line">　　硬链接和cp -p的区别是硬链接会同步更新</span><br><span class="line">　　源文件如果丢失，硬链接依然存在。</span><br><span class="line">　　硬链接和源文件的i节点相同。</span><br><span class="line">　　硬链接不能夸分区，软连接可以跨分区。</span><br><span class="line">　　硬链接不可以链接目录，链接可以</span><br><span class="line">　　软连接文件具有的权限是ugo都是rwx</span><br><span class="line"></span><br><span class="line">====================权限管理命令==============</span><br><span class="line">chmod:修改文件或目录的权限，只有root和所有者可以更改</span><br><span class="line">　　[&#123;ugoa&#125;&#123;+-=&#125;&#123;rwx&#125;] [文件或目录] </span><br><span class="line">　　[mode=421] [文件或目录]</span><br><span class="line">　　-R 递归修改</span><br><span class="line">　　权限的数字表示：</span><br><span class="line"><span class="meta">　　r-&gt;</span><span class="bash">4</span></span><br><span class="line"><span class="meta">　　w-&gt;</span><span class="bash">2</span></span><br><span class="line"><span class="meta">　　x-&gt;</span><span class="bash">1</span></span><br><span class="line"></span><br><span class="line">　　例：chmod u+x a.txt</span><br><span class="line">　　　　chmod g+w,o-r a.txt //同时做多个权限的修改</span><br><span class="line">　　　　chmod g=rwx a.txt</span><br><span class="line">　　　　chmod 640 a.txt</span><br><span class="line">　　　　chmod -R 777 testdir //把目录和下面所有文件的权限</span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　　针对文件　　 　　　　 针对目录</span><br><span class="line">　　　　r　　 读权限 　　 可以查看文件内容　　  可以列出目录中的内容</span><br><span class="line">　　　　w 　  写权限 　　 可以修改文件内容 　　 可以在目录中创建、删除文件</span><br><span class="line">　　　　x 　   执行权限      可以执行文件 　　　　 可以进入目录</span><br><span class="line"></span><br><span class="line">chown:更改文件所有者，只有root可以更改</span><br><span class="line">　　chown root a.txt//把a.txt更改为root所有</span><br><span class="line"></span><br><span class="line">chgrp:更改所属组</span><br><span class="line">　　chgrp lambrother fengjie //把fengjie的所属组更改为lambrother</span><br><span class="line"></span><br><span class="line">umask -S:查看创建文件的缺省权限，即默认权限</span><br><span class="line">umask 023:修改文件的缺省权限为777-023=754。即rwxr-xr--</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">=====================文件搜索命令========================================</span><br><span class="line">find:搜索制定范围内的文件</span><br><span class="line">　　find [搜索范围] [匹配条件]</span><br><span class="line">　　-name 按文件名搜索</span><br><span class="line">　　-iname 根据文件名查找，不区分大小写</span><br><span class="line">　　-size +n大于 -n小于 n等于 这个n是数据块，在Linux中一个数据块是512字节大小</span><br><span class="line">　　-user 根据所有者查找</span><br><span class="line">　　-group 根据所属组查找</span><br><span class="line">　　根据文件属性查找：</span><br><span class="line">　　　　-amin 访问时间 access</span><br><span class="line">　　　　-cmin 根据文件属性被修改的时间 change</span><br><span class="line">　　　　-mmin 根据文件内容被修改的时间 modify</span><br><span class="line">　　例： find /etc -cmin -5 :查找/etc目录下五分钟内被修改过属性的文件和目录</span><br><span class="line"></span><br><span class="line">　　-a 两个条件同时满足</span><br><span class="line">　　　　find /etc -size +10 -a -size -50</span><br><span class="line">　　-o 两个条件满足一个即可</span><br><span class="line"></span><br><span class="line">　　-type </span><br><span class="line">　　　　f 文件 d 目录 l软连接文件</span><br><span class="line">　　-inum 根据i节点查找</span><br><span class="line"></span><br><span class="line">　　对找到的结果进行操作</span><br><span class="line">　　　　-exec或者-ok 命令 &#123;&#125; \;</span><br><span class="line">　　　　例如：</span><br><span class="line">　　　　　　find /etc -name init* -exec ls -l &#123;&#125; \; 对找到的文件名按列表查看</span><br><span class="line"></span><br><span class="line">　　find /etc -name init :搜索目录/etc下面所有的init文件，精确匹配，包括子目录中的init文件</span><br><span class="line">　　find / -size +204800 搜索大于100M的文件</span><br><span class="line"></span><br><span class="line">locate:(查找速度非常快，因为它维护了一个文件库。缺点就是新建立的文件没有很快收录到文件库)</span><br><span class="line">　　locate 文件名</span><br><span class="line">　　updatedb 更新locate的文件资料库 文件资料库不收录/tmp下的文件</span><br><span class="line">　　-i 不区分大小写</span><br><span class="line"></span><br><span class="line">which :查找命令的目录以及别名</span><br><span class="line">　　which 命令</span><br><span class="line"></span><br><span class="line">whereis :搜索命令所在目录及帮助文档路径。</span><br><span class="line"></span><br><span class="line">grep:在文件中搜寻字符串匹配的行并输出，多个文件以空格隔开。</span><br><span class="line">　　-i不区分大小写</span><br><span class="line">　　-v排除指定字符串</span><br><span class="line">　　-E 以正则表达式的方式搜索</span><br><span class="line">　　-F 以普通文本的方式搜索</span><br><span class="line">　　-n 显示搜索到的内容在文件中的行号。</span><br><span class="line"></span><br><span class="line">==================帮助命令======================</span><br><span class="line">man：查看命令或者配置文件的帮助信息</span><br><span class="line">　　man 命令/配置文件</span><br><span class="line">　　在手册里面，可以输入/要查找的str</span><br><span class="line">　　man ls</span><br><span class="line">　　man services</span><br><span class="line">　　man fstab //直接输入配置文件的名字，而不需要使用绝对路径 重点查看name选项和配置文件的格式。</span><br><span class="line">　　如果一个命令即使命令又是配置文件，那么可以使用一个序号进行区分，比如：</span><br><span class="line">　　man 1 passwd 查看命令passwd的帮助</span><br><span class="line">　　man 5 passwd 查看配置文件passwd的帮助</span><br><span class="line"></span><br><span class="line">whatis 命令：得到命令的简要信息</span><br><span class="line"></span><br><span class="line">apropos 配置文件名：查看配置文件的简短信息</span><br><span class="line"></span><br><span class="line">命令 --help：查看命令的选项。</span><br><span class="line"></span><br><span class="line">help 命令：查看shell内置命令的帮助信息。 shell内置命令是没有命令路径。不能使用man查看帮助。</span><br><span class="line"></span><br><span class="line">===================用户管理命令==========================================</span><br><span class="line">useradd: 添加用户</span><br><span class="line">　　useradd 用户名</span><br><span class="line"></span><br><span class="line">passwd: 修改用户密码</span><br><span class="line">　　passwd 用户名 不加用户名直接更改自己的密码</span><br><span class="line"></span><br><span class="line">who:查看当前的账户 显示的格式为： 登录用户名 登录终端（tty:本地登录 pts:远程终端） 登录时间 ip地址</span><br><span class="line"></span><br><span class="line">　　w:查看更详细的用户登录信息。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=====================================压缩解压缩命令============================</span><br><span class="line">.gz格式</span><br><span class="line">　　压缩：gzip 文件名 只能压缩文件不能压缩目录，压缩完源文件也不见了</span><br><span class="line">　　解压缩：gunzip/gzip -d 压缩包名称</span><br><span class="line"></span><br><span class="line">tar:</span><br><span class="line">　　-zcvf 压缩后文件名 打包的目录 :生成.tar.gz文件 注：这个命令先用tar归档，然后把归档的包压缩成.gz</span><br><span class="line">　　-zxvf 要解压的文件名 ：解压缩.tar.bz2的文件</span><br><span class="line"></span><br><span class="line">　　-jcvf 压缩后的文件名 打包的目录：生成.tar.bz2 注：这个命令先用tar归档，然后把归档的包压缩成.bz2</span><br><span class="line">　　-jxvf 要解压的文件名 :解压.tar.bz2的文件</span><br><span class="line"></span><br><span class="line">zip:</span><br><span class="line">　　zip -r 压缩生成的文件名 要压缩的目录</span><br><span class="line">　　zip 压缩生成的文件名 要压缩的文件。</span><br><span class="line"></span><br><span class="line">unzip:</span><br><span class="line">　　unzip 要解压缩的文件</span><br><span class="line"></span><br><span class="line">bzip2:</span><br><span class="line">　　bzip2 -k 要压缩的文件名 -k选项：保留源文件</span><br><span class="line">　　bunzip2 -k 要解压的文件名 -k选项：保留压缩包</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">===============网络命令==========================</span><br><span class="line">write:给在线用户发送信息，用户不在线不行。以Ctrl+D保存</span><br><span class="line">　　write 用户名</span><br><span class="line"></span><br><span class="line">wall:给所有用户名发送信息</span><br><span class="line">　　wall 要发送的信息</span><br><span class="line"></span><br><span class="line">ping:测试网络连通性</span><br><span class="line"></span><br><span class="line">　　ping ip地址 </span><br><span class="line">　　-c 要ping的次数</span><br><span class="line"></span><br><span class="line">ifconfig:</span><br><span class="line">　　直接回车查看当前网卡信息</span><br><span class="line">　　ifconfig 网卡名 ip地址 临时修改网络ip</span><br><span class="line">　　　　ifconfig th0:0 192.168.1.100 netmask 255.255.255.0</span><br><span class="line">　　　　　　给th0这个网卡新添加一个ip</span><br><span class="line">　　　　ifconfig eth0:0 down</span><br><span class="line">　　　　ifconfig eth0:0 up</span><br><span class="line">ifdown th0</span><br><span class="line">　　禁用th0这块网卡</span><br><span class="line"></span><br><span class="line">ifup th0</span><br><span class="line">　　开启th0这块网卡</span><br><span class="line"></span><br><span class="line">mail:邮件命令</span><br><span class="line">　　mail 要发送的用户名</span><br><span class="line">　　mail 直接回车：查看命令</span><br><span class="line">　　　　help :查看支持的命令格式</span><br><span class="line">　　　　输入序列号：查看邮件详细内容</span><br><span class="line">　　　　h: 回到邮件列表</span><br><span class="line">　　　　d 序列号：删除序列号对应的邮件</span><br><span class="line"></span><br><span class="line">last:统计计算机所有用户登录的时间信息，以及重启信息</span><br><span class="line">lastlog:所有用户最后一次登录的时间</span><br><span class="line">　　-u 用户的uid 查看指定用户的登录信息。</span><br><span class="line"></span><br><span class="line">traceroute:显示数据包到主机间的路径</span><br><span class="line">　　traceroute 要探测的地址.</span><br><span class="line">　　-n 使用ip而不使用域名</span><br><span class="line"></span><br><span class="line">nslookup www.baidu.com</span><br><span class="line">　　查看百度的ip地址</span><br><span class="line"></span><br><span class="line">netstat:显示网络相关信息</span><br><span class="line">　　-t :tcp协议</span><br><span class="line">　　-u :udp协议</span><br><span class="line">　　-l:监听</span><br><span class="line">　　-r:路由</span><br><span class="line">　　-n:显示ip地址和端口号</span><br><span class="line"></span><br><span class="line">　　netstat -tlun:查看本机监听的端口</span><br><span class="line">　　netstat -an:查看所有的监听信息</span><br><span class="line">　　netstat -rn ：查看路由表，即网管</span><br><span class="line"></span><br><span class="line">wget 文件地址</span><br><span class="line">　　下载文件</span><br><span class="line"></span><br><span class="line">service network restart:重启网络服务。</span><br><span class="line"></span><br><span class="line">telnet 域名或ip</span><br><span class="line">　　远程管理与端口探测</span><br><span class="line">　　如： telnet 192.168.2.3:80</span><br><span class="line">　　　　探测192.168.2.3是否开启了80端口</span><br><span class="line"></span><br><span class="line">mount:挂在命令</span><br><span class="line">　　mount -t iso9660 /dev/sr0 /mnt/cdrom :把sr0挂在到cdrom</span><br><span class="line"></span><br><span class="line">==============关机重启命令====================</span><br><span class="line"></span><br><span class="line">shutdown:这个关机命令更安全一些，不推荐使用其他关机命令。</span><br><span class="line">　　-h：关机</span><br><span class="line">shutdown -h now shutdown -h 20:30</span><br><span class="line">　　-r:重启 </span><br><span class="line">shutdown -r now </span><br><span class="line">　　-c:取消上次的关机命令</span><br><span class="line"></span><br><span class="line">重启：</span><br><span class="line">　　init 6</span><br><span class="line">　　reboot</span><br><span class="line"></span><br><span class="line">关机：</span><br><span class="line">　　init 0</span><br><span class="line">　　poweroff</span><br><span class="line"></span><br><span class="line">　　系统运行级别：</span><br><span class="line">　　　　0 关机</span><br><span class="line">　　　　1 单用户 类似windows安全模式</span><br><span class="line">　　　　2 不完全多用户，不含nfs服务</span><br><span class="line">　　　　3 完全多用户</span><br><span class="line">　　　　4 未分配</span><br><span class="line">　　　　5 图形界面</span><br><span class="line">　　　　6 重启</span><br><span class="line">　　可以通过查看/etc/inittab来查看系统启动的运行级别</span><br><span class="line">　　runlevel:查看当前的运行级别</span><br><span class="line">　　init n:设置系统运行级别</span><br><span class="line"></span><br><span class="line">logout:退出当前用户，返回到登录界面</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">==============其他小技巧==========</span><br><span class="line">\命令名字 :使用原始的命令</span><br><span class="line">　　比如：</span><br><span class="line">　　　　ls 实际上是ls --color auto</span><br><span class="line">　　　　\ls 就是原始的ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=============================================</span><br><span class="line">一、软件包分类</span><br><span class="line">　　源码包</span><br><span class="line">　　　　脚本安装包</span><br><span class="line">　　特点：</span><br><span class="line">　　　　1. 开源</span><br><span class="line">　　　　2. 可以自由选择所需的功能</span><br><span class="line">　　　　3. 软件是编译安装，所以更加适合自己的系统，更加稳定也效率更高</span><br><span class="line">　　　　4. 卸载方便，即可以直接删除文件夹。</span><br><span class="line">　　缺点：</span><br><span class="line">　　　　1. 安装过程步骤较多，尤其安装较大的软件集合时，容易出现错误</span><br><span class="line">　　　　2. 编译时间较长，安装毕二进制安装时间长</span><br><span class="line">　　　　3. 因为是编译安装，安装过程中一旦报错新手很难解决</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　二进制包(RPM包、系统默认包)</span><br><span class="line">　　　　优点：</span><br><span class="line">　　　　　　1. 包管理系统简单，只通过几个命令就可以实现包的安装、升级、查询和卸载</span><br><span class="line">　　　　　　2. 安装速度比源码包安装快的多</span><br><span class="line">　　　　缺点：</span><br><span class="line">　　　　　　1. 经过编译，不再可以看到源代码</span><br><span class="line">　　　　　　2. 功能选择不如源码包灵活</span><br><span class="line">　　　　　　3. 依赖性</span><br><span class="line"></span><br><span class="line">=============rpm命令管理-包命名与依赖性=======================================</span><br><span class="line">1. RPM包命名原则</span><br><span class="line">　　httpd-2.2.15-15.el6.centos.l.i686.rpm</span><br><span class="line">　　　　httpd 软件包名</span><br><span class="line">　　　　2.2.15 软件版本</span><br><span class="line">　　　　15 软件发布的次数</span><br><span class="line">　　　　el6.centos 适合的Linux平台</span><br><span class="line">　　　　i686 适合的硬件平台</span><br><span class="line">　　　　rpm rpm包扩展名</span><br><span class="line">　　　　如果名字里有noarch,则表示所有平台都可以。</span><br><span class="line"></span><br><span class="line">2、 rpm包依赖性</span><br><span class="line">　　　　树形依赖： a-&gt;b-&gt;c 从后往前安装所依赖的包。</span><br><span class="line">　　　　环形依赖： a-&gt;b-&gt;c-&gt;a 解决办法：一次性安装三个包</span><br><span class="line">　　　　模块依赖：模块依赖查询网站 ：www.rpmfind.net 一般以.so.数字结尾的依赖包，是库依赖包，只需要安装包括这个库的软件就可以自动安装好这个所需的库依赖包</span><br><span class="line"></span><br><span class="line">包全名：操作的包是没有安装的软件包时，使用包全名，而且要注意路径。安装、升级时用</span><br><span class="line">包名 ：操作已经安装的软件包时，使用包名。是搜索/var/lib/rpm中的数据库。一般查询，卸载时用</span><br><span class="line"></span><br><span class="line">3. rpm安装：</span><br><span class="line">　　rpm-ivh 包全名</span><br><span class="line">　　　　-i(install) 安装</span><br><span class="line">　　　　-v(verbose) 显示详细信息</span><br><span class="line">　　　　-h(hash) 显示进度</span><br><span class="line">　　　　--nodeps 不检测依赖性 一般都必须要检测</span><br><span class="line"></span><br><span class="line">4. rpm包升级：</span><br><span class="line">　　rpm -Uvh 包全名</span><br><span class="line">　　　　-U(upgrade) 升级</span><br><span class="line">　　　　-h</span><br><span class="line"></span><br><span class="line">5. rpm -e 包名</span><br><span class="line">　　-e(erase) 卸载</span><br><span class="line">　　--nodeps 不检查依赖性</span><br><span class="line"></span><br><span class="line">6. 查询是否安装</span><br><span class="line">　　rpm - q 包名 :查询包是否安装</span><br><span class="line">　　　　-q(query) 查询</span><br><span class="line">　　　　-a(all) 所有</span><br><span class="line">　　　　-i(information) 查询软件信息</span><br><span class="line">　　　　-p(package) 查询未安装包信息</span><br><span class="line">　　rpm -ql 包名：查询包中文件安装位置(list) 注：包的安装路径在包生成的时候就确定了</span><br><span class="line">　　rpm -qlp 包全名：查询未安装包安装时会安装在哪里。</span><br><span class="line">　　rpm -qf 系统文件名 ：查询系统文件属于哪个rpm包 注：系统文件名必须是通过安装哪个包生成的文件</span><br><span class="line">　　　　-f:查询系统文件属于哪个包</span><br><span class="line">　　rpm -qR 包名 查询已安装软件包的依赖性</span><br><span class="line">　　　　-r: 查询软件包的依赖性(requires)</span><br><span class="line">　　rpm -qRp:查询未安装包的依赖性</span><br><span class="line">　　　　-p: 查询未安装包的依赖性</span><br><span class="line"></span><br><span class="line">　　　　例如：</span><br><span class="line">　　　　　　rpm -qa | grep httpd 查询所有Apache的包</span><br><span class="line"></span><br><span class="line">7. rpm包校验</span><br><span class="line">　　rpm -V 已安装的包名 ：如果没有提示则表示没有被修改过</span><br><span class="line">　　　　-V 校验指定rpm包中的文件(verify)</span><br><span class="line">　　　　校验值的含义：</span><br><span class="line">　　　　　　S:文件大小是否改变</span><br><span class="line">　　　　　　M:文件的类型或文件的权限(rwx)是否被改变</span><br><span class="line">　　　　　　5：文件MD5校验和是否改变(可以看成文件内容是否改变)</span><br><span class="line">　　　　　　D:设备的中，从代码是否改变</span><br><span class="line">　　　　　　L:文件路径是否改变</span><br><span class="line">　　　　　　U:文件的属主(所有者)是否改变</span><br><span class="line">　　　　　　G:文件的属组是否改变</span><br><span class="line">　　　　　　T:文件的修改时间是否改变</span><br><span class="line"></span><br><span class="line">8. rpm包中文件提取：</span><br><span class="line">　　rpm2cpio 包全名 | \</span><br><span class="line">　　cpio -div .文件绝对路径</span><br><span class="line"></span><br><span class="line">　　rpm2cpio:讲rpm包转换为cpio格式的命令 </span><br><span class="line">　　\表示命令没有输完,在下一行继续输入</span><br><span class="line">　　cpio:是一个标准工具，它用于创建软件档案文件和从档案文件中提取文件</span><br><span class="line">　　cpio 选项 &lt;[文件|设备]</span><br><span class="line">　　　　-i copy-in模式，还原</span><br><span class="line">　　　　-d:还原时自动新建目录</span><br><span class="line">　　　　-v:显示还原过程</span><br><span class="line"></span><br><span class="line">　　例如：</span><br><span class="line">　　　　rpm -qf /bin/ls #查看ls命令属于哪个包</span><br><span class="line">　　　　mv /bin/ls /tmp #将ls命令移走</span><br><span class="line">　　　　rpm2cpio /mnt/cdrom/Packages/coreutils-8.4-19.el6.i686.rpm | cpio -idv ./bin/ls #提取rpm保重ls命令到当前目录的/bin/ls下</span><br><span class="line">　　　　cp /root/bin/ls /bin/ #把ls命令复制到/bin/目录，修复文件丢失</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">yum在线管理：</span><br><span class="line">一、 ip地址配置</span><br><span class="line">第1步：setup:使用图形界面配置ip地址</span><br><span class="line">第2步：vi/etc/sysconfig/network-scripts/ifcfg-eth0 把ONBOOT=&quot;no&quot;改为ONBOOT=&quot;yes&quot; #启动网卡</span><br><span class="line">第3步：service network restart :重新启动网络服务。</span><br><span class="line"></span><br><span class="line">二、网络yum源</span><br><span class="line">1. yum源位置：/etc/yum.repos.d/CentOS-Base.repo,这个是默认的网络yum源</span><br><span class="line">　　[base]    容器名称，一定要放在[]中</span><br><span class="line">　　name  容器说明，可以自己随便写</span><br><span class="line">　　mirrorlist    镜像站点，这个可以注释掉</span><br><span class="line">　　baseurl   我们的yum源服务器的地址，默认是CentOS官方的yum源服务器，是可以使用的，如果你觉得慢可以改成你喜欢的yum源地址</span><br><span class="line">　　enabled   此容器是否生效，如果不写或写成enable=1都是生效，写成enable=0就是不生效</span><br><span class="line">　　gpgcheck  如果是1是指rpm的数字证书生效，如果是0则不生效</span><br><span class="line">　　gpgkey    数字证书的公钥文件保存位置。不用修改。</span><br><span class="line"></span><br><span class="line">2. yum命令</span><br><span class="line">　　yum list :获取服务器上所有可用的软件的列表</span><br><span class="line">　　yum search 关键字：搜索服务器上所有和关键字相关的包</span><br><span class="line">　　yum -y install 包名：安装软件包</span><br><span class="line">　　　　install:安装</span><br><span class="line">　　　　-y:自动回答yes</span><br><span class="line">　　yum -y update 包名：升级软件包</span><br><span class="line">　　　　update:升级</span><br><span class="line">　　　　-y:自动回答yes</span><br><span class="line">　　　　如果没有包名，就会升级所有的软件包，包括Linux内核。慎用</span><br><span class="line">　　yum -y remove 包名</span><br><span class="line">　　　　remove:卸载</span><br><span class="line">　　　　-y:自动回答yes</span><br><span class="line">　　　　注：yum会自动卸载依赖包，而很有可能这个依赖包也被别的包依赖，所以很危险，慎用。</span><br><span class="line"></span><br><span class="line">　　yum grouplist:列出所有可用的软件组列表</span><br><span class="line">　　yum groupinstall 软件组名：安装指定软件组，组名可以由grouplist查询出来 注：如果查询出来的软件组名中间有空格，要使用&quot;&quot;引起来。</span><br><span class="line">　　yum groupremove 软件组名：卸载指定软件组</span><br><span class="line"></span><br><span class="line">3. 光盘yum源</span><br><span class="line">　　1) 挂在光盘 mount /dev/sr0 /mnt/cdrom </span><br><span class="line">　　2) 让网络yum源文件失效</span><br><span class="line">　　　　cd /etc/yum.repos.d/</span><br><span class="line">　　　　mv CentOS-Base.repo CentOS-Base.repo.bak</span><br><span class="line">　　　　mv CentOS-Debuginfo.repo CentOS-Debuginfo.repo.bak</span><br><span class="line">　　　　mv Centos-Vault.repo Centos-Vault.repo.bak</span><br><span class="line">　　3) 修改光盘yum源文件</span><br><span class="line">　　　　vim CentOS-Media.repo</span><br><span class="line">　　　　[c6-media]</span><br><span class="line">　　　　name=CentOS-$releaserver -Media</span><br><span class="line">　　　　baseurl=file:///mnt/cdrom </span><br><span class="line">　　　　#地址为你自己的光盘挂载地址</span><br><span class="line">　　　　#   file:///media/cdrom/</span><br><span class="line">　　　　#   file:///media/cdrecorder/</span><br><span class="line">　　　　#注释这两个不存在的地址</span><br><span class="line">　　　　gpgcheck=1</span><br><span class="line">　　　　enabled=1 #把enabled=0改为enabled=1，让这个yum配置文件生效</span><br><span class="line">　　　　gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br><span class="line">　　　　注意：注释配置行的时候，#符号一定要写在开头，不要随便在配置文件某一行后面加注释，也不要随便加空格。</span><br><span class="line"></span><br><span class="line">源码包管理</span><br><span class="line">　　1. 区别</span><br><span class="line">　　　　安装之前的区别：概念上的区别</span><br><span class="line">　　　　安装之后的区别：安装位置不同</span><br><span class="line"></span><br><span class="line">　　2. rpm包安装位置(大多数)</span><br><span class="line">　　　　/etc/   配置文件安装目录</span><br><span class="line">　　　　/usr/bin/   可执行的命令安装目录</span><br><span class="line">　　　　/usr/lib/   程序所使用的函数库保存位置</span><br><span class="line">　　　　/usr/share/doc  软件的基本使用书册保存位置</span><br><span class="line">　　　　/usr/share/man/ 帮助文件保存位置    </span><br><span class="line">　　3. 源码包安装位置</span><br><span class="line">　　　　安装在指定位置当中，一般是</span><br><span class="line">　　　　/usr/local/软件名/ </span><br><span class="line">　　4. 安装位置不同带来的影响</span><br><span class="line">　　　　rpm包安装的服务可以使用系统服务管理命令(service)来管理</span><br><span class="line">　　　　例如rpm包安装的Apache的启动方法是：</span><br><span class="line">　　　　/etc/rc.d/init.d/httpd start 注：服务的安装路径一般在：/etc/rc.d/init.d下</span><br><span class="line">　　　　service httpd start 注：service命令是红帽的专用命令,只能管理rpm包安装的服务</span><br><span class="line">源码包安装过程</span><br><span class="line">　　1. 安装准备</span><br><span class="line">　　　　安装C语言编译器 gcc</span><br><span class="line">　　　　下载源码包</span><br><span class="line">　　　　http://mirror.bit.edu.cn/apach/httpd/   </span><br><span class="line">　　2. 安装注意事项</span><br><span class="line">　　　　源代码保存位置：/usr/local/src/</span><br><span class="line">　　　　软件安装位置： /usr/local/</span><br><span class="line">　　　　如何确定安装过程报错：</span><br><span class="line">　　　　　　安装过程停止并出现error、warning或no的提示  </span><br><span class="line">　　3. 源码包安装过程</span><br><span class="line">　　　　1)下载源码包</span><br><span class="line">　　　　2)解压缩下载的源码包</span><br><span class="line">　　　　3)进入解压缩目录 注：里面有个INSTALL是系统安装的步骤说明</span><br><span class="line">　　　　4)./configure 软件配置与检查</span><br><span class="line">　　　　　　定义需要的功能选项</span><br><span class="line">　　　　　　检测系统环境是否符合安装要求</span><br><span class="line">　　　　　　把定义好的功能选项和检测系统环境的信息都写入Makefile文件，用于后续的编辑。</span><br><span class="line">　　　　./configure --prefix=/usr/local/apache2 ：定义安装位置 </span><br><span class="line">　　　　5)make :编译</span><br><span class="line">　　　　　　如果前面有错误，则使用make clean命令清楚编译产生的临时文件</span><br><span class="line">　　　　6)make install:编译安装</span><br><span class="line">　　4. 源码包的卸载</span><br><span class="line">　　　　不需要卸载命令，直接删除安装目录即可。不会遗留任何垃圾文件</span><br><span class="line"></span><br><span class="line">脚本安装</span><br><span class="line">　　1. 脚本安装包</span><br><span class="line">　　　　脚本安装包并不是独立的软件包类型，常见安装的是源码包</span><br><span class="line">　　　　是人为把安装过程写成了自动安装的脚本，只要执行脚本，定义简单的参数，就可以完成安装</span><br><span class="line">　　　　非常类似于windows下软件的安装方式</span><br><span class="line">　　2. Webmin的作用</span><br><span class="line">　　　　Webmin是一个基于web的Linux系统管理界面，你就可以通过图形化的方式</span><br><span class="line">　　　　设置用户账号、Apache，DNS、文件共享等服务。</span><br><span class="line">　　3、 webmin安装过程</span><br><span class="line">　　　　1) 下载软件</span><br><span class="line">　　　　　　http;//sourceforge.net/projects/webadmin/files/webmin/</span><br><span class="line">　　　　2) 解压缩，并进入解压缩目录</span><br><span class="line">　　　　3) 执行安装脚本 ./setup.sh</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">其他命令</span><br><span class="line"></span><br><span class="line">du -sh 文件名</span><br><span class="line"></span><br><span class="line">ps 静态查看系统进程，系统默认安装</span><br><span class="line">　　ps -aux 使用BSD语法查看所有进程</span><br><span class="line">　　ps -ef 标准语法查看所有进程</span><br><span class="line">　　　　UID 程序被该 UID 所拥有</span><br><span class="line">　　　　PID 就是这个程序的 ID </span><br><span class="line">　　　　PPID 则是其上级父程序的ID</span><br><span class="line">　　　　C CPU 使用的资源百分比</span><br><span class="line">　　　　STIME 系统启动时间</span><br><span class="line">　　　　TTY 登入者的终端机位置</span><br><span class="line">　　　　TIME 使用掉的 CPU 时间。</span><br><span class="line">　　　　CMD 所下达的指令为何</span><br><span class="line">　　ps -aux --sort -pcpu,-pmem</span><br><span class="line">　　　　根据CPU占用情况和内存占用情况来显示进程</span><br><span class="line">　　watch -n 1 &#x27;ps -aux --sort -pcpu,-pmem&#x27;</span><br><span class="line">　　　　每隔1秒监控一次进程情况</span><br><span class="line"></span><br><span class="line">top 动态查看系统的状态</span><br><span class="line"></span><br><span class="line">lsof -Pti :8000</span><br><span class="line">　　通过端口号获得进程pid</span><br><span class="line"></span><br><span class="line">kill -9 pid</span><br><span class="line">　　杀死指定pid的进程，强行杀死。</span><br><span class="line"></span><br><span class="line">history</span><br><span class="line">　　查看历史命令</span><br><span class="line"></span><br><span class="line">执行历史命令</span><br><span class="line">　　!! 执行上一条命令</span><br><span class="line">　　!n 执行历史命令的中第n条</span><br><span class="line">　　!-n 执行导数第n条</span><br><span class="line">　　!string 执行以string开头的历史命令行</span><br><span class="line">　　!?string? 执行包含string的历史命令行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alias </span><br><span class="line">　　给命令起别名</span><br><span class="line"></span><br><span class="line">　　alias 命令=&#x27;别名&#x27;</span><br><span class="line">　　alias -p 查看已存在的别名</span><br><span class="line"></span><br><span class="line">unlias </span><br><span class="line">　　取消别名</span><br><span class="line">　　unlias name</span><br><span class="line"></span><br><span class="line">cal </span><br><span class="line">　　查看某一年的日历，可以是1-9999中的任意一年</span><br><span class="line">　　cal 88</span><br><span class="line"></span><br><span class="line">zcat</span><br><span class="line">　　查看压缩包中的内容</span><br><span class="line"></span><br><span class="line">sed -i &#x27;s#old#new#g&#x27; 文件名</span><br><span class="line">　　使用new替换文件中的old</span><br><span class="line"></span><br><span class="line">ssh root@192.168.8.15 &quot;ifconfig&quot;</span><br><span class="line">　　远程执行命令</span><br><span class="line"></span><br><span class="line">bash -x 脚本名</span><br><span class="line">　　调试脚本</span><br><span class="line"></span><br><span class="line">centos6上的三个网络配置文件</span><br><span class="line">　　/etc/sysconfig/network-scripts/ifcfg-etho</span><br><span class="line">　　/etc/sysconfig/network</span><br><span class="line">　　/etc/resolv.conf # dns</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot学习笔记（一）</title>
    <url>/2018/04/05/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>SpringBoot学习笔记（一）</p>
<a id="more"></a>




<h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h4><h6 id="微服务：架构风格（服务微化）"><a href="#微服务：架构风格（服务微化）" class="headerlink" title="微服务：架构风格（服务微化）"></a>微服务：架构风格（服务微化）</h6><p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p>
<p>单体应用：ALL IN ONE</p>
<p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p>
<p>微服务参考文档：<a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa">https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa</a></p>
<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；</p>
<p>–maven3.x：maven 3.3以上版本；</p>
<h4 id="MAVEN设置"><a href="#MAVEN设置" class="headerlink" title="MAVEN设置"></a>MAVEN设置</h4><p>给maven 的settings.xml配置文件的profiles标签添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="导入spring-boot相关的依赖"><a href="#导入spring-boot相关的依赖" class="headerlink" title="导入spring boot相关的依赖"></a>导入spring boot相关的依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="编写一个主程序；启动Spring-Boot应用"><a href="#编写一个主程序；启动Spring-Boot应用" class="headerlink" title="编写一个主程序；启动Spring Boot应用"></a>编写一个主程序；启动Spring Boot应用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="编写相关的Controller、Service"><a href="#编写相关的Controller、Service" class="headerlink" title="编写相关的Controller、Service"></a>编写相关的Controller、Service</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="简化部署"><a href="#简化部署" class="headerlink" title="简化部署"></a>简化部署</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p>
</blockquote>
</blockquote>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h4 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h4><h5 id="1、父项目"><a href="#1、父项目" class="headerlink" title="1、父项目"></a>1、父项目</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目是</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">他来真正管理Spring Boot应用里面的所有依赖版本；</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Spring Boot的版本仲裁中心；</p>
<p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p>
<h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>spring-boot-starter</strong>-==web==：</p>
<p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p>
<p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p>
<h4 id="主程序类，主入口类"><a href="#主程序类，主入口类" class="headerlink" title="主程序类，主入口类"></a>主程序类，主入口类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure>

<p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p>
<p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p>
<p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p>
<p>​            配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p>
<p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p>
<p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(EnableAutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure>

<p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p>
<p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p>
<p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p>
<p>==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==</p>
<p>​    @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p>
<p>​        给容器中导入组件？</p>
<p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p>
<p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p>
<p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；</p>
<p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p>
<p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</p>
<p>==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；</p>
<p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p>
<hr>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p>
<p>•application.properties</p>
<p>•application.yml</p>
<p>配置文件的作用：修改SpringBoot自动配置的默认值 (SpringBoot在底层都给我们自动配置好了)</p>
<p>标记语言：</p>
<p>​    以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p>
<p>​    YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p>
<p>​    YAML配置示例</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<p>​    XML：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>k:(空格)v：表示一对键值对（空格必须有）；</p>
<p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure>

<p>属性和值也是大小写敏感；</p>
<h4 id="值的写法"><a href="#值的写法" class="headerlink" title="值的写法"></a>值的写法</h4><h5 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h5><p>​    k: v：字面直接来写；</p>
<p>​        字符串默认不用加上单引号或者双引号；</p>
<p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p>
<p>​                name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p>
<p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p>
<p>​                name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p>
<h5 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h5><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p>
<p>​        对象还是k: v的方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">		<span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">		<span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span> &#123;<span class="attr">lastName:</span> <span class="string">zhangsan</span>,<span class="attr">age:</span> <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure>



<h5 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h5><p>用- 值表示数组中的一个元素</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure>



<h4 id="配置文件值注入"><a href="#配置文件值注入" class="headerlink" title="配置文件值注入"></a>配置文件值注入</h4><p>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">lastName:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">    <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line">    <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="number">12</span>&#125;</span><br><span class="line">    <span class="attr">lists:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zhaoliu</span></span><br><span class="line">    <span class="attr">dog:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">小狗</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>javaBean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>导入配置文件处理器，以后编写配置就会有提示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="Value获取值和-ConfigurationProperties获取值比较"><a href="#Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="@Value获取值和@ConfigurationProperties获取值比较"></a>@Value获取值和@ConfigurationProperties获取值比较</h4><table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定（松散语法）</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<p>配置文件无论是yml还是properties他们都能获取到值；</p>
<p>如果只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p>
<p>如果专门编写了一个javaBean来和配置文件进行映射，就直接使用@ConfigurationProperties；</p>
<h4 id="配置文件注入值数据校验"><a href="#配置文件注入值数据校验" class="headerlink" title="配置文件注入值数据校验"></a>配置文件注入值数据校验</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">//@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value(&quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>



<h4 id="PropertySource-amp-ImportResource-amp-Bean"><a href="#PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="@PropertySource&amp;@ImportResource&amp;@Bean"></a>@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ConfigurationProperties</span>(prefix = &quot;person&quot;)默认从全局配置文件中获取值；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:person.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class=&quot;Person&quot;&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">   <span class="comment">// @Email</span></span><br><span class="line">    <span class="comment">//@Value(&quot;$&#123;person.last-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value(&quot;#&#123;11*2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value(&quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p>
<p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p>
<p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource(locations = &#123;&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class="line">导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure>



<p>不来编写Spring的配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.springboot.service.HelloService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SpringBoot推荐给容器中添加组件的方式：推荐使用全注解的方式</p>
<p>1、配置类**@Configuration**——&gt;Spring配置文件</p>
<p>2、使用**@Bean**给容器中添加组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;配置类@Bean给容器中添加组件了...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>####配置文件占位符</p>
<h5 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="keyword">int</span>&#125;、$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">person.last-name</span>=<span class="string">张三$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="meta">person.birth</span>=<span class="string">2017/12/15</span></span><br><span class="line"><span class="meta">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="meta">person.maps.k2</span>=<span class="string">14</span></span><br><span class="line"><span class="meta">person.lists</span>=<span class="string">a,b,c</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">$&#123;person.hello:hello&#125;_dog</span></span><br><span class="line"><span class="meta">person.dog.age</span>=<span class="string">15</span></span><br></pre></td></tr></table></figure>



<h3 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h3><h4 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h4><p>在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p>
<p>默认使用application.properties的配置；</p>
<h4 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure>





<h4 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h4><p>​    1、在配置文件中指定  spring.profiles.active=dev</p>
<p>​    2、命令行：</p>
<p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p>
<p>​        可以直接在测试的时候，配置传入命令行参数</p>
<p>​    3、虚拟机参数；</p>
<p>​        -Dspring.profiles.active=dev</p>
<h3 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h3><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>
<p>–file:./config/</p>
<p>–file:./</p>
<p>–classpath:/config/</p>
<p>–classpath:/</p>
<p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p>
<p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p>
<p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p>
<p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p>
<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p>
<h3 id="外部配置加载顺序"><a href="#外部配置加载顺序" class="headerlink" title="外部配置加载顺序"></a>外部配置加载顺序</h3><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p>
<p><strong>1.命令行参数</strong></p>
<p>所有的配置都可以在命令行上进行指定</p>
<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p>
<p>多个配置用空格分开； –配置项=值</p>
<p>2.来自java:comp/env的JNDI属性</p>
<p>3.Java系统属性（System.getProperties()）</p>
<p>4.操作系统环境变量</p>
<p>5.RandomValuePropertySource配置的random.*属性值</p>
<p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p>
<p>==<strong>优先加载带profile</strong>==</p>
<p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
<p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
<p>==<strong>再来加载不带profile</strong>==</p>
<p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
<p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
<p>10.@Configuration注解类上的@PropertySource</p>
<p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p>
<p>所有支持的配置加载来源参考官方文档：<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config">https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config</a></p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Python知识点</title>
    <url>/2020/03/16/Python/</url>
    <content><![CDATA[<p>Python知识点笔记</p>
<a id="more"></a>

<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>简单：伪代码</p>
<p>高层语言：无需考虑诸如如何管理你的程序使用的内存</p>
<p>可移植性：无需修改就可以在任何平台上运行</p>
<p>解释性：可直接从源代码运行程序，在计算机内部，Python解释器把源代码转换成称为字节码的中间形式，然后再把它翻译成为计算机使用的机器语言并允许。</p>
<p>面向对象：既支持面向过程也支持面向对象的编程</p>
<p>可扩展性：</p>
<p>丰富的库：</p>
<p>规范的代码：</p>
<h4 id="主要运用得领域："><a href="#主要运用得领域：" class="headerlink" title="主要运用得领域："></a>主要运用得领域：</h4><p>云计算、web计算、科学计算和人工智能、系统操作和维护、金融、图像GUI</p>
<h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><h5 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h5><p>默认情况下，源文件以UTF-8编码，所有的字符串都是Unicode字符串</p>
<h5 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h5><p>第一个字符必须是字母表中的字母或者下划线</p>
<p>标识符的其他部分由字母、数字和下划线组成</p>
<p>标识符对大小写敏感</p>
<h5 id="python保留字"><a href="#python保留字" class="headerlink" title="python保留字"></a>python保留字</h5><p>关键字不能用作任何标识符名称</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> keyword</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keyword.kwlist</span><br><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>单行注释以#开头</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Hello, Python!&quot;</span>) <span class="comment"># 第二个注释</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Hello, Python!</span><br></pre></td></tr></table></figure>

<hr>
<p>多行注释可以使用多个#号，还有‘’‘和”“”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="comment"># 第二个注释</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第三注释</span></span><br><span class="line"><span class="string">第四注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第五注释</span></span><br><span class="line"><span class="string">第六注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Hello, Python!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Hello, Python!</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h5><p>使用缩进来表示代码块，不需要使用大括号{}</p>
<p>缩进的空格数是可变的，但同一个代码块的语句必须包含相同的缩进空格数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="错误示例："><a href="#错误示例：" class="headerlink" title="错误示例："></a>错误示例：</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Answer&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Answer&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)    <span class="comment"># 缩进不一致，会导致运行错误</span></span><br></pre></td></tr></table></figure>

<p>以上程序由于缩进不一致，执行后会出现类似以下错误：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> File <span class="string">&quot;test.py&quot;</span>, line <span class="number">6</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)    <span class="comment"># 缩进不一致，会导致运行错误</span></span><br><span class="line">                                      ^</span><br><span class="line">IndentationError: unindent does <span class="keyword">not</span> match <span class="built_in">any</span> outer indentation level</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h5><p>通常一行写完一条语句，但如果语句很长，可以使用反斜杠来实现多条语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure>

<p>在[],{},或()中的多行语句，不需要使用反斜杠</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h5><p>四种类型：整数、布尔型、浮点数、复数</p>
<p>int(整数)：如1。只有一种整数类型int，表示为长整型。【没有python2中的Long】</p>
<p>bool（布尔）：如true</p>
<p>float（浮点数）：如1.23、3E-2</p>
<p>complex（复数）：如1+2j、1.1+2.2j</p>
<hr>
<h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>单引号和双引号使用完全相同</p>
<p>使用三引号（’’’或者”””）可以指定一个多行字符串</p>
<p>转义符‘&#39;</p>
<p>反斜杠可以用来转义，使用r可以让反斜杠不发生转义</p>
<p>​        【比如：r”this is a line with \n”，则\n会显示而不是换行】</p>
<p>按字面意义级联字符串，如“this” “is” “string”会被自动转换为this is string</p>
<p>字符串可以用+运算符连接在一起，用*运算符重复</p>
<p>字符串有两种索引方式，从左往右以0开始，从右往左以-1开始</p>
<p>字符串不能改变</p>
<p>没有单独的字符类型，一个字符就是长度为1的字符串</p>
<h6 id="字符串的汲取语法格式如下：变量-头下标-尾下标-步长"><a href="#字符串的汲取语法格式如下：变量-头下标-尾下标-步长" class="headerlink" title="字符串的汲取语法格式如下：变量[头下标:尾下标:步长]"></a>字符串的汲取语法格式如下：变量[头下标:尾下标:步长]</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;Runoob&#x27;</span></span><br><span class="line"> </span><br><span class="line">print(<span class="built_in">str</span>)                 <span class="comment"># 输出字符串</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])           <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">0</span>])              <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])            <span class="comment"># 输出从第三个开始到第五个的字符</span></span><br><span class="line">print(<span class="built_in">str</span>[<span class="number">2</span>:])             <span class="comment"># 输出从第三个开始后的所有字符</span></span><br><span class="line">print(<span class="built_in">str</span> * <span class="number">2</span>)             <span class="comment"># 输出字符串两次</span></span><br><span class="line">print(<span class="built_in">str</span> + <span class="string">&#x27;你好&#x27;</span>)        <span class="comment"># 连接字符串</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">&#x27;------------------------------&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">print(<span class="string">&#x27;hello\nrunoob&#x27;</span>)      <span class="comment"># 使用反斜杠(\)+n转义特殊字符</span></span><br><span class="line">print(<span class="string">r&#x27;hello\nrunoob&#x27;</span>)     <span class="comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Runoob</span><br><span class="line">Runoo</span><br><span class="line">R</span><br><span class="line">noo</span><br><span class="line">noob</span><br><span class="line">RunoobRunoob</span><br><span class="line">Runoob你好</span><br><span class="line">------------------------------</span><br><span class="line">hello</span><br><span class="line">runoob</span><br><span class="line">hello\nrunoob</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h5><p>函数之间或者类的方法之间用空行分隔，表示一段新的代码开始。类和函数入口之间也需要一行空行分隔，以突出函数入口的开始。</p>
<p>【空行与代码缩进不同，空行并不是python语法的一部分，书写时不插入空行，python解释器运行也不会报错，但是空行的作用在于分隔两段不同功能或含义的代码，便于代码维护和重构】</p>
<p>【空行也是程序代码的一部分】</p>
<hr>
<h5 id="等待用户输入"><a href="#等待用户输入" class="headerlink" title="等待用户输入"></a>等待用户输入</h5><p>执行下面的程序再按回车键后就会等待用户输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;\n\n按下 enter 键后退出。&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>【以上代码中：”\n\n“在结果输出前会输出两个新的空行。一旦用户按下enter键时，程序将退出】</p>
<hr>
<h5 id="同一行显示多条语句"><a href="#同一行显示多条语句" class="headerlink" title="同一行显示多条语句"></a>同一行显示多条语句</h5><p>可以在同一行中使用多条语句，语句之间使用<strong>分号</strong>分割</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys; x = <span class="string">&#x27;runoob&#x27;</span>; sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>使用脚本执行代码输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">runoob</span><br></pre></td></tr></table></figure>

<p>使用交互式命令行执行输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys; x = <span class="string">&#x27;runoob&#x27;</span>; sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">runoob</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="多个语句构成代码组"><a href="#多个语句构成代码组" class="headerlink" title="多个语句构成代码组"></a>多个语句构成代码组</h5><p>缩进相同的一组语句构成一个代码块，称为代码组</p>
<p>像if、while、def和class这样的复合语句，首行以<strong>关键字</strong>开始，以<strong>冒号</strong>结束，该行之后的一行或者多行代码构成代码组</p>
<p>【将首行及后面的代码组称为一个子句（clause）】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression : </span><br><span class="line">   suite</span><br><span class="line"><span class="keyword">elif</span> expression : </span><br><span class="line">   suite </span><br><span class="line"><span class="keyword">else</span> : </span><br><span class="line">   suite</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="Print输出"><a href="#Print输出" class="headerlink" title="Print输出"></a>Print输出</h5><p>默认输出是换行的，如果实现不换行需要在变量末尾加上end=””:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">x=<span class="string">&quot;a&quot;</span></span><br><span class="line">y=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line">print( x )</span><br><span class="line">print( y )</span><br><span class="line"> </span><br><span class="line">print(<span class="string">&#x27;---------&#x27;</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line">print( x, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line">print( y, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line">print()</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">---------</span><br><span class="line">a b</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="import和from…import"><a href="#import和from…import" class="headerlink" title="import和from…import"></a>import和from…import</h5><p>用import和from…import来导入相应的模块</p>
<p>将整个模块导入，格式为：import somemodule</p>
<p>从某个模块中导入某个函数，格式为：from somemodule import somefunction</p>
<p>从某个模块中导入多个函数，格式为：from somemodule import firstfunc，secondfunc，thirdfunc</p>
<p>将某个模块中的全部函数导入，格式为from somemodule import *</p>
<h6 id="导入sys模块示例："><a href="#导入sys模块示例：" class="headerlink" title="导入sys模块示例："></a>导入sys模块示例：</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(<span class="string">&#x27;================Python import mode==========================&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;命令行参数为:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</span><br><span class="line">    <span class="built_in">print</span> (i)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n python 路径为&#x27;</span>,sys.path)</span><br></pre></td></tr></table></figure>

<p>导入sys模块的argv,path成员</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv,path  <span class="comment">#  导入特定的成员</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">&#x27;================python from import===================================&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;path:&#x27;</span>,path) <span class="comment"># 因为已经导入path成员，所以此处引用时不需要加sys.path</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h5><p>可以执行一些操作来查看一些基本信息，比如可以使用-h来查看各参数帮助信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python -h</span><br><span class="line">usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...</span><br><span class="line">Options <span class="keyword">and</span> arguments (<span class="keyword">and</span> corresponding environment variables):</span><br><span class="line">-c cmd : program passed <span class="keyword">in</span> <span class="keyword">as</span> string (terminates option <span class="built_in">list</span>)</span><br><span class="line">-d     : debug output <span class="keyword">from</span> parser (also PYTHONDEBUG=x)</span><br><span class="line">-E     : ignore environment variables (such <span class="keyword">as</span> PYTHONPATH)</span><br><span class="line">-h     : <span class="built_in">print</span> this <span class="built_in">help</span> message <span class="keyword">and</span> exit</span><br><span class="line"></span><br><span class="line">[ etc. ]</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>变量不需要声明。每个变量在使用前都必须赋值。变量赋值以后该变量才会被创建。</p>
<p>在python中，变量就是变量，没有类型。【所说的类型是变量所指的内存中对象的类型】</p>
<h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">counter = <span class="number">100</span>          <span class="comment"># 整型变量</span></span><br><span class="line">miles   = <span class="number">1000.0</span>       <span class="comment"># 浮点型变量</span></span><br><span class="line">name    = <span class="string">&quot;runoob&quot;</span>     <span class="comment"># 字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (counter)</span><br><span class="line"><span class="built_in">print</span> (miles)</span><br><span class="line"><span class="built_in">print</span> (name)</span><br></pre></td></tr></table></figure>

<h6 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">1000.0</span></span><br><span class="line">runoob</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h5><p>允许同时为多个变量赋值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span>	<span class="comment">#创建一个整型对象，值为1，从后向前赋值，三个变量被赋予相同的数值</span></span><br></pre></td></tr></table></figure>

<p>也可以为多个对象指定多个变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;runoob&quot;</span>	<span class="comment">#两个整型对象1和2的分配给变量a和b,字符串对象&quot;runoob&quot;分配给变量c</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="标准数据类型（六种）"><a href="#标准数据类型（六种）" class="headerlink" title="标准数据类型（六种）"></a>标准数据类型（六种）</h4><p>Number(数字)</p>
<p>String(字符串)</p>
<p>List(列表)</p>
<p>Tuple(元组)</p>
<p>Set(集合)</p>
<p>Dictionary(字典)</p>
<p>【不可变数据3个：Number（数字）、String（字符串）、Tuple（元组）】</p>
<p>【可变数据3个：List（列表）、Dictionary（字典）、Set（集合）】</p>
<hr>
<p>内置的type()函数可以用来查询变量所指的对象类型</p>
<h6 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c, d = <span class="number">20</span>, <span class="number">5.5</span>, <span class="literal">True</span>, <span class="number">4</span>+<span class="number">3j</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="built_in">type</span>(a), <span class="built_in">type</span>(b), <span class="built_in">type</span>(c), <span class="built_in">type</span>(d))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">float</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">bool</span>&#x27;&gt; &lt;<span class="title">class</span> &#x27;<span class="title">complex</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>此外还可以用isinstance来判断</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="number">111</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(a, <span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<hr>
<p>isinstance和type的区别在于：</p>
<p>type()不会认为子类是一种父类型</p>
<p>isinstance()会认为子类是一种父类型</p>
<h6 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(A(), A)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(A()) == A </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(B(), A)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(B()) == A</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>在python2中是没有布尔型的，它用数字0表示false，用1表示true。</p>
<p>python3中，将true和false定义成关键字了，但他们的值还是1和0，可以和数字相加。</p>
</blockquote>
</blockquote>
<hr>
<h5 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h5><h6 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">5</span> + <span class="number">4</span>  <span class="comment"># 加法</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4.3</span> - <span class="number">2</span> <span class="comment"># 减法</span></span><br><span class="line"><span class="number">2.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> * <span class="number">7</span>  <span class="comment"># 乘法</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> / <span class="number">4</span>  <span class="comment"># 除法，得到一个浮点数</span></span><br><span class="line"><span class="number">0.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> // <span class="number">4</span> <span class="comment"># 除法，得到一个整数</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">17</span> % <span class="number">3</span> <span class="comment"># 取余 </span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> ** <span class="number">5</span> <span class="comment"># 乘方</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure>

<h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><p>1、可同时为多个变量赋值。如a,b = 1,2</p>
<p>2、一个变量可以通过赋值指向不同类型的对象</p>
<p>3、数值的除法包含两个运算符：/返回一个浮点数；//返回一个整数</p>
<p>4、在混合计算时，Python会把整型转换成浮点数。</p>
<hr>
<h4 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h4><p>列表可以完成大多数集合的数据结构实现。列表中元素的类型可以不相同，支持数字、字符串甚至包含列表（所谓嵌套）。</p>
<p>列表是写在方括号之间、用逗号分隔开的元素列表。</p>
<p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p>
<h6 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量[头下标:尾下标]</span><br></pre></td></tr></table></figure>

<p>加号+是列表连接运算符，星号*是重复操作。</p>
<h6 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">list</span> = [ <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>)            <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">0</span>])         <span class="comment"># 输出列表第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>])       <span class="comment"># 从第二个开始输出到第三个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">2</span>:])        <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinylist * <span class="number">2</span>)    <span class="comment"># 输出两次列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span> + tinylist) <span class="comment"># 连接列表</span></span><br></pre></td></tr></table></figure>

<h6 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>]</span><br><span class="line">abcd</span><br><span class="line">[<span class="number">786</span>, <span class="number">2.23</span>]</span><br><span class="line">[<span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>]</span><br><span class="line">[<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>, <span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h6 id="列表中元素是可以改变的"><a href="#列表中元素是可以改变的" class="headerlink" title="列表中元素是可以改变的"></a>列表中元素是可以改变的</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">5</span>] = []   <span class="comment"># 将对应的元素值设置为 [] </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<p>列表截取可以接收第三个参数，参数作用是截取的步长。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;letters = [<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;o&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;letters = [<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h6 id="如果第三个参数为负数表示逆向读取，以下示例用于翻转字符串"><a href="#如果第三个参数为负数表示逆向读取，以下示例用于翻转字符串" class="headerlink" title="如果第三个参数为负数表示逆向读取，以下示例用于翻转字符串"></a>如果第三个参数为负数表示逆向读取，以下示例用于翻转字符串</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseWords</span>(<span class="params"><span class="built_in">input</span></span>):</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment"># 通过空格将字符串分隔符，把各个单词分隔为列表</span></span><br><span class="line">    inputWords = <span class="built_in">input</span>.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 翻转字符串</span></span><br><span class="line">    <span class="comment"># 假设列表 list = [1,2,3,4],  </span></span><br><span class="line">    <span class="comment"># list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样)</span></span><br><span class="line">    <span class="comment"># inputWords[-1::-1] 有三个参数</span></span><br><span class="line">    <span class="comment"># 第一个参数 -1 表示最后一个元素</span></span><br><span class="line">    <span class="comment"># 第二个参数为空，表示移动到列表末尾</span></span><br><span class="line">    <span class="comment"># 第三个参数为步长，-1 表示逆向</span></span><br><span class="line">    inputWords=inputWords[-<span class="number">1</span>::-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 重新组合字符串</span></span><br><span class="line">    output = <span class="string">&#x27; &#x27;</span>.join(inputWords)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">input</span> = <span class="string">&#x27;I like runoob&#x27;</span></span><br><span class="line">    rw = reverseWords(<span class="built_in">input</span>)</span><br><span class="line">    print(rw)</span><br></pre></td></tr></table></figure>

<h6 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">runoob like I</span><br></pre></td></tr></table></figure>

<hr>
<p>元组的元素不能修改，元组写在小括号内，元素之间用逗号隔开，元组中的元素类型也可以不相同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">tuple</span> = ( <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>  )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>)             <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinytuple * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span> + tinytuple) <span class="comment"># 连接元组</span></span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>)</span><br><span class="line">abcd</span><br><span class="line">(<span class="number">786</span>, <span class="number">2.23</span>)</span><br><span class="line">(<span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>)</span><br><span class="line">(<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>, <span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>元组与字符串类似，可以被索引且下标索引从0开始，-1从末尾开始。也可以进行截取</p>
<p>【可以把字符串看成一种特殊的元组】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup[<span class="number">0</span>])</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup[<span class="number">0</span>] = <span class="number">11</span>  <span class="comment"># 修改元组元素的操作是非法的</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表</p>
<p>【构造包含0个或1个元素的元组比较特殊，所以会有一些额外的语法规则】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = ()    <span class="comment"># 空元组</span></span><br><span class="line">tup2 = (<span class="number">20</span>,) <span class="comment"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<p>string、list和tuple都属于sequence（序列）</p>
</blockquote>
</blockquote>
<hr>
<h4 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h4><p>集合是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p>
<p>基本功能是进行成员关系测试和删除重复元素</p>
<p>可以使用大括号{}或者set()函数创建集合</p>
<p>【创建一个空集合必须用set()而不是{}，因为{}是用来创建一个空字典】</p>
<h6 id="创建格式"><a href="#创建格式" class="headerlink" title="创建格式"></a>创建格式</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parame = &#123;value01,value02,...&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="built_in">set</span>(value)</span><br></pre></td></tr></table></figure>

<h6 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">student = &#123;<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jim&#x27;</span>, <span class="string">&#x27;Mary&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">print(student)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 成员测试</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Rose&#x27;</span> <span class="keyword">in</span> student :</span><br><span class="line">    print(<span class="string">&#x27;Rose 在集合中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    print(<span class="string">&#x27;Rose 不在集合中&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">print(a)</span><br><span class="line"> </span><br><span class="line">print(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"> </span><br><span class="line">print(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"> </span><br><span class="line">print(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"> </span><br><span class="line">print(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Mary&#x27;</span>, <span class="string">&#x27;Jim&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>&#125;</span><br><span class="line">Rose 在集合中</span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="Dictionary-字典"><a href="#Dictionary-字典" class="headerlink" title="Dictionary(字典)"></a>Dictionary(字典)</h4><p>字典是内置数据类型</p>
<p>列表是有序的对象集合，字典是无序的对象集合。</p>
<p>【区别在于：字典当中的元素是通过键来获取的，而不是通过偏移获取】</p>
<p>字典是一种映射类型，字典用{}标识，它是一个无序的key:value的集合</p>
<p>key必须使用不可变类型</p>
<p>在同一个字典中，key必须是唯一的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;1 - 教程&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>]     = <span class="string">&quot;2 - 工具&quot;</span></span><br><span class="line"> </span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>])       <span class="comment"># 输出键为 &#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> - 教程</span><br><span class="line"><span class="number">2</span> - 工具</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line">dict_keys([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;site&#x27;</span>])</span><br><span class="line">dict_values([<span class="string">&#x27;runoob&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>构造函数dict()可以直接从键值对序列中构建字典如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">dict</span>([(<span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;Google&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;Taobao&#x27;</span>, <span class="number">3</span>)])</span><br><span class="line">&#123;<span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Google&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(Runoob=<span class="number">1</span>, Google=<span class="number">2</span>, Taobao=<span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">&#x27;Runoob&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Google&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p>字典类型也有一些内置的函数，例如clear()、keys()、values()等</p>
<hr>
<h4 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h4><p>数据类型的转换，只需要将数据类型作为函数名即可。</p>
<p>以下列表中内置的函数可以执行数据类型之间的转换，这些函数返回一个新的对象，表示转换的值。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>int(x[,base])</td>
<td>将x转换为一个整数</td>
</tr>
<tr>
<td>float(x)</td>
<td>将x转换到一个浮点数</td>
</tr>
<tr>
<td>complex(real[,imag])</td>
<td>创建一个复数</td>
</tr>
<tr>
<td>str(x)</td>
<td>将对象x转换为字符串</td>
</tr>
<tr>
<td>repr(x)</td>
<td>将对象x转换为表达式字符串</td>
</tr>
<tr>
<td>eval(str)</td>
<td>用来计算在字符串中的有效python表达式，并返回一个对象</td>
</tr>
<tr>
<td>tuple(s)</td>
<td>将序列s转换为一个元组</td>
</tr>
<tr>
<td>list(s)</td>
<td>将序列s转换为一个列表</td>
</tr>
<tr>
<td>set(s)</td>
<td>转换为可变集合</td>
</tr>
<tr>
<td>dict(d)</td>
<td>创建一个字典。d必须是一个(key,value)元组序列</td>
</tr>
<tr>
<td>frozenset(s)</td>
<td>转换为不可变集合</td>
</tr>
<tr>
<td>chr(x)</td>
<td>将一个整数转换为一个字符</td>
</tr>
<tr>
<td>ord(x)</td>
<td>将一个字符转换为它的整数值</td>
</tr>
<tr>
<td>hex(x)</td>
<td>将一个整数转换为一个十六进制字符串</td>
</tr>
<tr>
<td>oct(x)</td>
<td>将一个整数转换为一个八进制字符串</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot学习笔记（二）</title>
    <url>/2018/04/22/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>SpringBoot学习笔记（二）</p>
<a id="more"></a>






<h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><p>配置文件能配置的属性参照：<a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties">https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties</a></p>
<h4 id="自动配置原理："><a href="#自动配置原理：" class="headerlink" title="自动配置原理："></a><strong>自动配置原理：</strong></h4><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</p>
<p><strong>2）、@EnableAutoConfiguration 作用：</strong></p>
<ul>
<li><p>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</p>
</li>
<li><p>可以查看selectImports()方法的内容；</p>
</li>
<li><p>List<String> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</p>
<ul>
<li><pre><code class="java">SpringFactoriesLoader.loadFactoryNames()
扫描所有jar包类路径下  META-INF/spring.factories
把扫描到的这些文件的内容包装成properties对象
从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">**&#x3D;&#x3D;将 类路径下  META-INF&#x2F;spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；&#x3D;&#x3D;**</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;properties</span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p>
<p>3）、每一个自动配置类进行自动配置功能；</p>
<p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HttpEncodingProperties.class)</span>  <span class="comment">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span>  <span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span>  <span class="comment">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span></span><br><span class="line"><span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean(CharacterEncodingFilter.class)</span> <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">		filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">		filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">		filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">		<span class="keyword">return</span> filter;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>根据当前不同的条件判断，决定这个配置类是否生效？</p>
<p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p>
<p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</span>  <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>





<p><strong>精髓：</strong></p>
<p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p>
<p>​    <strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p>
<p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p>
<p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p>
<p>xxxxAutoConfigurartion：自动配置类；</p>
<p>给容器中添加组件</p>
<p>xxxxProperties:封装配置文件中相关属性；</p>
<h3 id="gt-gt-重要细节"><a href="#gt-gt-重要细节" class="headerlink" title="&gt;&gt;重要细节"></a>&gt;&gt;重要细节</h3><h4 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>
<table>
<thead>
<tr>
<th>@Conditional扩展注解</th>
<th>作用（判断是否满足当前指定条件）</th>
</tr>
</thead>
<tbody><tr>
<td>@ConditionalOnJava</td>
<td>系统的java版本是否符合要求</td>
</tr>
<tr>
<td>@ConditionalOnBean</td>
<td>容器中存在指定Bean；</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>容器中不存在指定Bean；</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足SpEL表达式指定</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>系统中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>系统中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中指定的属性是否有指定的值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否存在指定资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是web环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>当前不是web环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI存在指定项</td>
</tr>
</tbody></table>
<p><strong>自动配置类必须在一定的条件下才能生效；</strong></p>
<p>**==可以通过启用  debug=true属性；来让控制台打印自动配置报告==**，这样就可以知道哪些自动配置类生效；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">=========================</span><br><span class="line">AUTO-CONFIGURATION REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:（自动配置类启用的）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnClass</span> found required <span class="class"><span class="keyword">class</span> &#x27;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&#x27;</span>; <span class="meta">@ConditionalOnMissingClass</span> <span class="function">did not find unwanted <span class="title">class</span> <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function">      - @<span class="title">ConditionalOnWebApplication</span> <span class="params">(required)</span> found <span class="title">StandardServletEnvironment</span> <span class="params">(OnWebApplicationCondition)</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">Negative matches:（没有启动，没有匹配成功的自动配置类）</span></span><br><span class="line"><span class="function">-----------------</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   ActiveMQAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes &#x27;javax.jms.ConnectionFactory&#x27;, &#x27;org.apache.activemq.ActiveMQConnectionFactory&#x27; <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   AopAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes &#x27;org.aspectj.lang.annotation.Aspect&#x27;, &#x27;org.aspectj.lang.reflect.Advice&#x27; <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function">        </span></span><br></pre></td></tr></table></figure>





<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h4><h5 id="市面上的日志框架；"><a href="#市面上的日志框架；" class="headerlink" title="市面上的日志框架；"></a><strong>市面上的日志框架；</strong></h5><p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p>
<table>
<thead>
<tr>
<th>日志门面  （日志的抽象层）</th>
<th>日志实现</th>
</tr>
</thead>
<tbody><tr>
<td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td>
<td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td>
</tr>
</tbody></table>
<p>左边选一个门面（抽象层）、右边来选一个实现；</p>
<p>日志门面：  SLF4J；</p>
<p>日志实现：Logback；</p>
<p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p>
<p>​    <strong>==SpringBoot选用 SLF4j和logback；==</strong></p>
<h4 id="SLF4j使用"><a href="#SLF4j使用" class="headerlink" title="SLF4j使用"></a>SLF4j使用</h4><h5 id="如何在系统中使用SLF4j-参考：-https-www-slf4j-org"><a href="#如何在系统中使用SLF4j-参考：-https-www-slf4j-org" class="headerlink" title="如何在系统中使用SLF4j 参考：  https://www.slf4j.org"></a>如何在系统中使用SLF4j 参考：  <a href="https://www.slf4j.org/">https://www.slf4j.org</a></h5><p>在开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p>
<p>给系统里面导入slf4j的jar和  logback的实现jar</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p>
<h5 id=""><a href="#" class="headerlink" title=""></a></h5><p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p>
<p>==1、将系统中其他日志框架先排除出去；==</p>
<p>==2、用中间包来替换原有的日志框架；==</p>
<p>==3、我们导入slf4j其他的实现==</p>
<h4 id="SpringBoot日志关系"><a href="#SpringBoot日志关系" class="headerlink" title="SpringBoot日志关系"></a>SpringBoot日志关系</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>SpringBoot使用它来做日志功能；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h6 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h6><p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p>
<p>​    2）、SpringBoot也把其他的日志都替换成了slf4j；</p>
<p>​    3）、中间替换包？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class="string">&quot;http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> LogFactory logFactory = <span class="keyword">new</span> SLF4JLogFactory();</span><br></pre></td></tr></table></figure>



<p>​    4）、SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，如果需要引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可。</p>
<p>​            （Spring框架用的是commons-logging</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="日志使用"><a href="#日志使用" class="headerlink" title="日志使用"></a>日志使用</h4><h5 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h5><p>SpringBoot默认配置好了日志；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记录器</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//System.out.println();</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//日志的级别；</span></span><br><span class="line">	<span class="comment">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line">	<span class="comment">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span></span><br><span class="line">	logger.trace(<span class="string">&quot;这是trace日志...&quot;</span>);</span><br><span class="line">	logger.debug(<span class="string">&quot;这是debug日志...&quot;</span>);</span><br><span class="line">	<span class="comment">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span></span><br><span class="line">	logger.info(<span class="string">&quot;这是info日志...&quot;</span>);</span><br><span class="line">	logger.warn(<span class="string">&quot;这是warn日志...&quot;</span>);</span><br><span class="line">	logger.error(<span class="string">&quot;这是error日志...&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<pre><code>    日志输出格式：
        %d表示日期时间，
        %thread表示线程名，
        %-5level：级别从左显示5个字符宽度
        %logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 
        %msg：日志消息，
        %n是换行符
    --&gt;
    %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</code></pre>
<p>SpringBoot修改日志的默认配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.level.com.atguigu</span>=<span class="string">trace</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#logging.path=</span></span><br><span class="line"><span class="comment"># 不指定路径在当前项目下生成springboot.log日志</span></span><br><span class="line"><span class="comment"># 可以指定完整的路径；</span></span><br><span class="line"><span class="comment">#logging.file=G:/springboot.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span></span><br><span class="line"><span class="meta">logging.path</span>=<span class="string">/spring/log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  在控制台输出的日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"><span class="comment"># 指定文件中日志输出的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>logging.file</th>
<th>logging.path</th>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>(none)</td>
<td>(none)</td>
<td></td>
<td>只在控制台输出</td>
</tr>
<tr>
<td>指定文件名</td>
<td>(none)</td>
<td>my.log</td>
<td>输出日志到my.log文件</td>
</tr>
<tr>
<td>(none)</td>
<td>指定目录</td>
<td>/var/log</td>
<td>输出到指定目录的 spring.log 文件中</td>
</tr>
</tbody></table>
<h5 id="2、指定配置"><a href="#2、指定配置" class="headerlink" title="2、指定配置"></a>2、指定配置</h5><p>给类路径下放上每个日志框架自己的配置文件即可；此时SpringBoot就不使用默认配置了</p>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>Customization</th>
</tr>
</thead>
<tbody><tr>
<td>Logback</td>
<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td>
</tr>
<tr>
<td>Log4j2</td>
<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>
</tr>
<tr>
<td>JDK (Java Util Logging)</td>
<td><code>logging.properties</code></td>
</tr>
</tbody></table>
<p>logback.xml：直接就被日志框架识别了；</p>
<p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;staging&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&gt;</span></span><br><span class="line">  	可以指定某段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;stdout&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">			%d表示日期时间，</span></span><br><span class="line"><span class="comment">			%thread表示线程名，</span></span><br><span class="line"><span class="comment">			%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">			%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class="line"><span class="comment">			%msg：日志消息，</span></span><br><span class="line"><span class="comment">			%n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;!dev&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p>
<p> <code>no applicable action for [springProfile]</code></p>
<h4 id="切换日志框架"><a href="#切换日志框架" class="headerlink" title="切换日志框架"></a>切换日志框架</h4><p>可以按照slf4j的日志适配图，进行相关的切换；</p>
<p>slf4j+log4j的方式；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>切换为log4j2</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h3><p><strong>自动配置原理</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xxxxAutoConfiguration：   &#x2F;&#x2F;帮我们给容器中自动配置组件；</span><br><span class="line">xxxxProperties:   &#x2F;&#x2F;配置类来封装配置文件的内容；</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="SpringBoot对静态资源的映射规则；"><a href="#SpringBoot对静态资源的映射规则；" class="headerlink" title="SpringBoot对静态资源的映射规则；"></a>SpringBoot对静态资源的映射规则；</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line">  <span class="comment">//可以设置和静态资源有关的参数，缓存时间等</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WebMvcAuotConfiguration：</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">			logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Integer cachePeriod = <span class="keyword">this</span>.resourceProperties.getCachePeriod();</span><br><span class="line">		<span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">			customizeResourceHandlerRegistration(</span><br><span class="line">					registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">							.addResourceLocations(</span><br><span class="line">									<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class="line">					.setCachePeriod(cachePeriod));</span><br><span class="line">		&#125;</span><br><span class="line">		String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">         	<span class="comment">//静态资源文件夹映射</span></span><br><span class="line">		<span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">			customizeResourceHandlerRegistration(</span><br><span class="line">					registry.addResourceHandler(staticPathPattern)</span><br><span class="line">							.addResourceLocations(</span><br><span class="line">									<span class="keyword">this</span>.resourceProperties.getStaticLocations())</span><br><span class="line">					.setCachePeriod(cachePeriod));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//配置欢迎页映射</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),</span><br><span class="line">				<span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//配置喜欢的图标</span></span><br><span class="line">	<span class="meta">@Configuration</span></span><br><span class="line">	<span class="meta">@ConditionalOnProperty(value = &quot;spring.mvc.favicon.enabled&quot;, matchIfMissing = true)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FaviconConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">FaviconConfiguration</span><span class="params">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> SimpleUrlHandlerMapping <span class="title">faviconHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			SimpleUrlHandlerMapping mapping = <span class="keyword">new</span> SimpleUrlHandlerMapping();</span><br><span class="line">			mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class="number">1</span>);</span><br><span class="line">             	<span class="comment">//所有  **/favicon.ico </span></span><br><span class="line">			mapping.setUrlMap(Collections.singletonMap(<span class="string">&quot;**/favicon.ico&quot;</span>,</span><br><span class="line">					faviconRequestHandler()));</span><br><span class="line">			<span class="keyword">return</span> mapping;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> ResourceHttpRequestHandler <span class="title">faviconRequestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			ResourceHttpRequestHandler requestHandler = <span class="keyword">new</span> ResourceHttpRequestHandler();</span><br><span class="line">			requestHandler</span><br><span class="line">					.setLocations(<span class="keyword">this</span>.resourceProperties.getFaviconLocations());</span><br><span class="line">			<span class="keyword">return</span> requestHandler;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>所有 /webjars/** ，都会去 classpath:/META-INF/resources/webjars/ 找资源；==</p>
<p>​    webjars：以jar包的方式引入静态资源；</p>
<blockquote>
<blockquote>
<p>参考官方文档：<a href="http://www.webjars.org/">http://www.webjars.org</a></p>
</blockquote>
</blockquote>
<p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入jquery-webjar--&gt;</span>在访问的时候只需要写webjars下面资源的名称即可</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>“/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;, </span><br><span class="line">&quot;classpath:&#x2F;resources&#x2F;&quot;,</span><br><span class="line">&quot;classpath:&#x2F;static&#x2F;&quot;, </span><br><span class="line">&quot;classpath:&#x2F;public&#x2F;&quot; </span><br><span class="line">&quot;&#x2F;&quot;：当前项目的根路径</span><br></pre></td></tr></table></figure>

<p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p>
<h4 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h4><p>JSP、Velocity、Freemarker、Thymeleaf</p>
<h5 id="1、引入thymeleaf；"><a href="#1、引入thymeleaf；" class="headerlink" title="1、引入thymeleaf；"></a>1、引入thymeleaf；</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          	2.1.6</span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">切换thymeleaf版本</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- thymeleaf2   layout1--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="2、Thymeleaf使用"><a href="#2、Thymeleaf使用" class="headerlink" title="2、Thymeleaf使用"></a>2、Thymeleaf使用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">  	<span class="comment">//</span></span><br></pre></td></tr></table></figure>

<p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p>
<p>使用：</p>
<h6 id="1、导入thymeleaf的名称空间"><a href="#1、导入thymeleaf的名称空间" class="headerlink" title="1、导入thymeleaf的名称空间"></a>1、导入thymeleaf的名称空间</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="2、使用thymeleaf语法；"><a href="#2、使用thymeleaf语法；" class="headerlink" title="2、使用thymeleaf语法；"></a>2、使用thymeleaf语法；</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:text 将div里面的文本内容设置为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;hello&#125;&quot;</span>&gt;</span>这是显示欢迎信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h4><p>1）、th:text；改变当前元素里面的文本内容；</p>
<p>​    th：任意html属性；来替换原生属性的值</p>
<p>2）、表达式？</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Simple</span> <span class="string">expressions:（表达式语法）</span></span><br><span class="line">    <span class="attr">Variable</span> <span class="string">Expressions: $&#123;...&#125;：获取变量值；OGNL；</span></span><br><span class="line">    		<span class="attr">1）、获取对象的属性、调用方法</span></span><br><span class="line">    		<span class="attr">2）、使用内置的基本对象：</span></span><br><span class="line"><span class="comment">    			#ctx : the context object.</span></span><br><span class="line"><span class="comment">    			#vars: the context variables.</span></span><br><span class="line"><span class="comment">                #locale : the context locale.</span></span><br><span class="line"><span class="comment">                #request : (only in Web Contexts) the HttpServletRequest object.</span></span><br><span class="line"><span class="comment">                #response : (only in Web Contexts) the HttpServletResponse object.</span></span><br><span class="line"><span class="comment">                #session : (only in Web Contexts) the HttpSession object.</span></span><br><span class="line"><span class="comment">                #servletContext : (only in Web Contexts) the ServletContext object.</span></span><br><span class="line">                </span><br><span class="line">                <span class="attr">$&#123;session.foo&#125;</span></span><br><span class="line">            <span class="attr">3）、内置的一些工具对象：</span></span><br><span class="line"><span class="comment">#execInfo : information about the template being processed.</span></span><br><span class="line"><span class="comment">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.</span></span><br><span class="line"><span class="comment">#uris : methods for escaping parts of URLs/URIs</span></span><br><span class="line"><span class="comment">#conversions : methods for executing the configured conversion service (if any).</span></span><br><span class="line"><span class="comment">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span></span><br><span class="line"><span class="comment">#calendars : analogous to #dates , but for java.util.Calendar objects.</span></span><br><span class="line"><span class="comment">#numbers : methods for formatting numeric objects.</span></span><br><span class="line"><span class="comment">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span></span><br><span class="line"><span class="comment">#objects : methods for objects in general.</span></span><br><span class="line"><span class="comment">#bools : methods for boolean evaluation.</span></span><br><span class="line"><span class="comment">#arrays : methods for arrays.</span></span><br><span class="line"><span class="comment">#lists : methods for lists.</span></span><br><span class="line"><span class="comment">#sets : methods for sets.</span></span><br><span class="line"><span class="comment">#maps : methods for maps.</span></span><br><span class="line"><span class="comment">#aggregates : methods for creating aggregates on arrays or collections.</span></span><br><span class="line"><span class="comment">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Selection</span> <span class="string">Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span></span><br><span class="line">    	<span class="meta">补充：配合</span> <span class="string">th:object=&quot;$&#123;session.user&#125;：</span></span><br><span class="line">   <span class="meta">&lt;div</span> <span class="string">th:object=&quot;$&#123;session.user&#125;&quot;&gt;</span></span><br><span class="line">    <span class="meta">&lt;p&gt;Name</span>: <span class="string">&lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class="line">    <span class="meta">&lt;p&gt;Surname</span>: <span class="string">&lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class="line">    <span class="meta">&lt;p&gt;Nationality</span>: <span class="string">&lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span></span><br><span class="line">    <span class="attr">&lt;/div&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">Message</span> <span class="string">Expressions: #&#123;...&#125;：获取国际化内容</span></span><br><span class="line">    <span class="attr">Link</span> <span class="string">URL Expressions: @&#123;...&#125;：定义URL；</span></span><br><span class="line">    		<span class="meta">@&#123;/order/process(execId</span>=<span class="string">$&#123;execId&#125;,execType=&#x27;FAST&#x27;)&#125;</span></span><br><span class="line">    <span class="attr">Fragment</span> <span class="string">Expressions: ~&#123;...&#125;：片段引用表达式</span></span><br><span class="line">    		<span class="meta">&lt;div</span> <span class="string">th:insert=&quot;~&#123;commons :: main&#125;&quot;&gt;...&lt;/div&gt;</span></span><br><span class="line">    		</span><br><span class="line"><span class="attr">Literals（字面量）</span></span><br><span class="line">      <span class="attr">Text</span> <span class="string">literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,…</span></span><br><span class="line">      <span class="attr">Number</span> <span class="string">literals: 0 , 34 , 3.0 , 12.3 ,…</span></span><br><span class="line">      <span class="attr">Boolean</span> <span class="string">literals: true , false</span></span><br><span class="line">      <span class="attr">Null</span> <span class="string">literal: null</span></span><br><span class="line">      <span class="attr">Literal</span> <span class="string">tokens: one , sometext , main ,…</span></span><br><span class="line"><span class="attr">Text</span> <span class="string">operations:（文本操作）</span></span><br><span class="line">    <span class="attr">String</span> <span class="string">concatenation: +</span></span><br><span class="line">    <span class="attr">Literal</span> <span class="string">substitutions: |The name is $&#123;name&#125;|</span></span><br><span class="line"><span class="attr">Arithmetic</span> <span class="string">operations:（数学运算）</span></span><br><span class="line">    <span class="attr">Binary</span> <span class="string">operators: + , - , * , / , %</span></span><br><span class="line">    <span class="attr">Minus</span> <span class="string">sign (unary operator): -</span></span><br><span class="line"><span class="attr">Boolean</span> <span class="string">operations:（布尔运算）</span></span><br><span class="line">    <span class="attr">Binary</span> <span class="string">operators: and , or</span></span><br><span class="line">    <span class="attr">Boolean</span> <span class="string">negation (unary operator): ! , not</span></span><br><span class="line"><span class="attr">Comparisons</span> <span class="string">and equality:（比较运算）</span></span><br><span class="line">    <span class="attr">Comparators</span>: <span class="string">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span></span><br><span class="line">    <span class="attr">Equality</span> <span class="string">operators: == , != ( eq , ne )</span></span><br><span class="line"><span class="attr">Conditional</span> <span class="string">operators:条件运算（三元运算符）</span></span><br><span class="line">    <span class="meta">If-then</span>: <span class="string">(if) ? (then)</span></span><br><span class="line">    <span class="meta">If-then-else</span>: <span class="string">(if) ? (then) : (else)</span></span><br><span class="line">    <span class="attr">Default</span>: <span class="string">(value) ?: (defaultvalue)</span></span><br><span class="line"><span class="attr">Special</span> <span class="string">tokens:</span></span><br><span class="line">    <span class="meta">No-Operation</span>: <span class="string">_ </span></span><br></pre></td></tr></table></figure>



<h4 id="SpringMVC自动配置"><a href="#SpringMVC自动配置" class="headerlink" title="SpringMVC自动配置"></a>SpringMVC自动配置</h4><blockquote>
<blockquote>
<p>参考官方文档：<a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p>
</blockquote>
</blockquote>
<h5 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1. Spring MVC auto-configuration"></a>1. Spring MVC auto-configuration</h5><p>以下是SpringBoot对SpringMVC的默认配置:<strong>==（WebMvcAutoConfiguration）==</strong></p>
<ul>
<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>
<ul>
<li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发or重定向））</li>
<li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li>
<li>==定制方法：给容器中添加一个视图解析器；自动的将其组合进来；==</li>
</ul>
</li>
<li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p>
</li>
<li><p>Static <code>index.html</code> support. 静态首页访问</p>
</li>
<li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p>
</li>
</ul>
<ul>
<li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p>
<ul>
<li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li>
<li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date-format&quot;)</span><span class="comment">//在文件中配置日期格式化的规则</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Formatter&lt;Date&gt; <span class="title">dateFormatter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> DateFormatter(<span class="keyword">this</span>.mvcProperties.getDateFormat());<span class="comment">//日期格式化组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    ==自己添加的格式化器转换器放在容器中即可==</p>
<ul>
<li><p>Support for <code>HttpMessageConverters</code> (see below).</p>
<ul>
<li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p>
</li>
<li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p>
<p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p>
</li>
<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p>
<p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始化WebDataBinder；</span><br><span class="line">请求数据&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;JavaBean；</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="2、扩展SpringMVC"><a href="#2、扩展SpringMVC" class="headerlink" title="2、扩展SpringMVC"></a>2、扩展SpringMVC</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/hello&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="编写一个配置类（-Configuration），是WebMvcConfigurerAdapter类型；不能标注-EnableWebMvc"><a href="#编写一个配置类（-Configuration），是WebMvcConfigurerAdapter类型；不能标注-EnableWebMvc" class="headerlink" title="==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==;"></a><strong>==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==</strong>;</h6><p>既保留了所有的自动配置，也能扩展配置；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/atguigu&quot;</span>).setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原理：</p>
<p>​    1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p>
<p>​    2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//从容器中获取所有的WebMvcConfigurer</span></span><br><span class="line">     <span class="meta">@Autowired(required = false)</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">             <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">           	<span class="comment">//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  </span></span><br><span class="line">           	<span class="meta">@Override</span></span><br><span class="line">            <span class="comment">// public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line">             <span class="comment">//    for (WebMvcConfigurer delegate : this.delegates) &#123;</span></span><br><span class="line">              <span class="comment">//       delegate.addViewControllers(registry);</span></span><br><span class="line">              <span class="comment">//   &#125;</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    3）、容器中所有的WebMvcConfigurer会一起起作用；</p>
<p>​    4）、我们自己的配置类也会被调用；</p>
<p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p>
<h5 id="3、全面接管SpringMVC；"><a href="#3、全面接管SpringMVC；" class="headerlink" title="3、全面接管SpringMVC；"></a>3、全面接管SpringMVC；</h5><p>当SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p>
<p><strong>我们只需要在配置类中添加@EnableWebMvc即可；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/atguigu&quot;</span>).setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h6><p>为什么@EnableWebMvc自动配置就失效了；</p>
<p>1）@EnableWebMvc的核心</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(DelegatingWebMvcConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br></pre></td></tr></table></figure>

<p>2）、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>3）、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class,</span></span><br><span class="line"><span class="meta">		WebMvcConfigurerAdapter.class &#125;)</span></span><br><span class="line"><span class="comment">//容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">		ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p>
<p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p>
<h5 id="如何修改SpringBoot的默认配置"><a href="#如何修改SpringBoot的默认配置" class="headerlink" title="如何修改SpringBoot的默认配置"></a>如何修改SpringBoot的默认配置</h5><h6 id="模式："><a href="#模式：" class="headerlink" title="模式："></a>模式：</h6><p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p>
<p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助进行扩展配置</p>
<p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助进行定制配置</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot学习笔记（三）</title>
    <url>/2018/05/13/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p>SpringBoot学习笔记（三）</p>
<a id="more"></a>



<h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4><p><strong>1）、编写国际化配置文件；</strong></p>
<p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p>
<p>3）、在页面使用fmt:message取出国际化内容</p>
<p>步骤：</p>
<p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p>
<p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.messages&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Comma-separated list of basenames (essentially a fully-qualified classpath</span></span><br><span class="line"><span class="comment">	 * location), each following the ResourceBundle convention with relaxed support for</span></span><br><span class="line"><span class="comment">	 * slash based locations. If it doesn&#x27;t contain a package qualifier (such as</span></span><br><span class="line"><span class="comment">	 * &quot;org.mypackage&quot;), it will be resolved from the classpath root.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> String basename = <span class="string">&quot;messages&quot;</span>;  </span><br><span class="line">    <span class="comment">//我们的配置文件可以直接放在类路径下叫messages.properties；</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.basename)) &#123;</span><br><span class="line">            <span class="comment">//设置国际化资源文件的基础名（去掉语言国家代码的）</span></span><br><span class="line">			messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(</span><br><span class="line">					StringUtils.trimAllWhitespace(<span class="keyword">this</span>.basename)));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">			messageSource.setDefaultEncoding(<span class="keyword">this</span>.encoding.name());</span><br><span class="line">		&#125;</span><br><span class="line">		messageSource.setFallbackToSystemLocale(<span class="keyword">this</span>.fallbackToSystemLocale);</span><br><span class="line">		messageSource.setCacheSeconds(<span class="keyword">this</span>.cacheSeconds);</span><br><span class="line">		messageSource.setAlwaysUseMessageFormat(<span class="keyword">this</span>.alwaysUseMessageFormat);</span><br><span class="line">		<span class="keyword">return</span> messageSource;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p>3）、去页面获取国际化的值；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>  <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;asserts/css/bootstrap.min.css&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;asserts/css/signin.css&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/asserts/css/signin.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">action</span>=<span class="string">&quot;dashboard.html&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/asserts/img/bootstrap-solid.svg&#125;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;asserts/img/bootstrap-solid.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;72&quot;</span> <span class="attr">height</span>=<span class="string">&quot;72&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span> <span class="attr">autofocus</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox mb-3&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">          		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;remember-me&quot;</span>/&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.btn&#125;&quot;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="效果：根据浏览器语言设置的信息切换了国际化；"><a href="#效果：根据浏览器语言设置的信息切换了国际化；" class="headerlink" title="效果：根据浏览器语言设置的信息切换了国际化；"></a>效果：根据浏览器语言设置的信息切换了国际化；</h6><h6 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h6><p>​    国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">		<span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties</span><br><span class="line">					.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">			&#125;</span><br><span class="line">			AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">			localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">			<span class="keyword">return</span> localeResolver;</span><br><span class="line">		&#125;</span><br><span class="line">默认的就是根据请求头带来的区域信息获取Locale进行国际化</span><br></pre></td></tr></table></figure>

<p>4）、点击链接切换国际化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以在连接上携带区域信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String l = request.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(l))&#123;</span><br><span class="line">            String[] split = l.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h5 id="开发期间模板引擎页面修改以后，要实时生效"><a href="#开发期间模板引擎页面修改以后，要实时生效" class="headerlink" title="开发期间模板引擎页面修改以后，要实时生效"></a>开发期间模板引擎页面修改以后，要实时生效</h5><p>1）、禁用模板引擎的缓存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 禁用缓存</span><br><span class="line">spring.thymeleaf.cache&#x3D;false </span><br></pre></td></tr></table></figure>

<p>2）、页面修改完成以后ctrl+f9：重新编译；</p>
<h4 id="拦截器进行登陆检查"><a href="#拦截器进行登陆检查" class="headerlink" title="拦截器进行登陆检查"></a>拦截器进行登陆检查</h4><h6 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登陆检查，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//目标方法执行之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//未登陆，返回登陆页面</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;没有权限请先登陆&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//已登陆，放行请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h6 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class="line">  <span class="meta">@Bean</span> <span class="comment">//将组件注册在容器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">      WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">              registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">              registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">              registry.addViewController(<span class="string">&quot;/main.html&quot;</span>).setViewName(<span class="string">&quot;dashboard&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//注册拦截器</span></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">              <span class="comment">//super.addInterceptors(registry);</span></span><br><span class="line">              <span class="comment">//静态资源；  *.css , *.js</span></span><br><span class="line">              <span class="comment">//SpringBoot已经做好了静态资源映射</span></span><br><span class="line">              registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                      .excludePathPatterns(<span class="string">&quot;/index.html&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/user/login&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> adapter;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>





<h4 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1、抽取公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2、引入公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;footer :: copy&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">~&#123;templatename::selector&#125;：模板名::选择器</span><br><span class="line">~&#123;templatename::fragmentname&#125;:模板名::片段名</span><br><span class="line"></span><br><span class="line">3、默认效果：</span><br><span class="line">insert的公共片段在div标签中</span><br><span class="line">如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：</span><br><span class="line">行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]；</span><br></pre></td></tr></table></figure>



<h6 id="三种引入公共片段的th属性："><a href="#三种引入公共片段的th属性：" class="headerlink" title="三种引入公共片段的th属性："></a>三种引入公共片段的th属性：</h6><p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p>
<p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p>
<p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">引入方式</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">效果</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>引入片段的时候传入参数： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 d-none d-md-block bg-light sidebar&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-sticky&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav flex-column&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link active&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">th:class</span>=<span class="string">&quot;$&#123;activeUri==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span> <span class="attr">class</span>=<span class="string">&quot;feather feather-home&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;9 22 9 12 15 12 15 22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                    Dashboard <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入侧边栏;传入参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;commons/bar::#sidebar(activeUri=&#x27;emps&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="错误处理机制"><a href="#错误处理机制" class="headerlink" title="错误处理机制"></a>错误处理机制</h3><h4 id="1）、SpringBoot默认的错误处理机制"><a href="#1）、SpringBoot默认的错误处理机制" class="headerlink" title="1）、SpringBoot默认的错误处理机制"></a>1）、SpringBoot默认的错误处理机制</h4><h6 id="默认效果："><a href="#默认效果：" class="headerlink" title="默认效果："></a>默认效果：</h6><p>​        1）、浏览器，返回一个默认的错误页面</p>
<p>​        2）、如果是客户端，默认响应一个json数据</p>
<p>​    </p>
<h6 id="原理：-1"><a href="#原理：-1" class="headerlink" title="原理："></a>原理：</h6><p>​    可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p>
<pre><code>  给容器中添加了以下组件</code></pre>
<p>​    1、DefaultErrorAttributes：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">帮我们在页面共享信息；</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class="line">		errorAttributes.put(<span class="string">&quot;timestamp&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">		addStatus(errorAttributes, requestAttributes);</span><br><span class="line">		addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);</span><br><span class="line">		addPath(errorAttributes, requestAttributes);</span><br><span class="line">		<span class="keyword">return</span> errorAttributes;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p>​    2、BasicErrorController：处理默认/error请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(produces = &quot;text/html&quot;)</span><span class="comment">//产生html类型的数据；浏览器发送的请求来到这个方法处理</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">			HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">		HttpStatus status = getStatus(request);</span><br><span class="line">		Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class="line">				request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">		response.setStatus(status.value());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//去哪个页面作为错误页面；包含页面地址和页面内容</span></span><br><span class="line">		ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">		<span class="keyword">return</span> (modelAndView == <span class="keyword">null</span> ? <span class="keyword">new</span> ModelAndView(<span class="string">&quot;error&quot;</span>, model) : modelAndView);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span></span><br><span class="line">	<span class="meta">@ResponseBody</span>    <span class="comment">//产生json数据，其他客户端来到这个方法处理；</span></span><br><span class="line">	<span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">		Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class="line">				isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">		HttpStatus status = getStatus(request);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p>​    3、ErrorPageCustomizer：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;error.path:/error&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">&quot;/error&quot;</span>;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）</span><br></pre></td></tr></table></figure>



<p>​    4、DefaultErrorViewResolver：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">			Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">		ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class="line">		<span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">			modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> modelAndView;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//默认SpringBoot可以去找到一个页面？  error/404</span></span><br><span class="line">		String errorViewName = <span class="string">&quot;error/&quot;</span> + viewName;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class="line">		TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders</span><br><span class="line">				.getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line">		<span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html</span></span><br><span class="line">		<span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h6 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h6><p>​        一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p>
<p>​        1）响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//所有的ErrorViewResolver得到ModelAndView</span></span><br><span class="line">   <span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">      <span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> modelAndView;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h4 id="定制错误响应"><a href="#定制错误响应" class="headerlink" title="定制错误响应"></a>定制错误响应</h4><h5 id="1）、如何定制错误的页面；"><a href="#1）、如何定制错误的页面；" class="headerlink" title="1）、如何定制错误的页面；"></a><strong>1）、如何定制错误的页面；</strong></h5><p>​            <strong>1）、有模板引擎的情况下；error/状态码;</strong> 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p>
<p>​            可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；        </p>
<p>​            页面能获取的信息；</p>
<p>​                timestamp：时间戳</p>
<p>​                status：状态码</p>
<p>​                error：错误提示</p>
<p>​                exception：异常对象</p>
<p>​                message：异常消息</p>
<p>​                errors：JSR303数据校验的错误都在这里</p>
<p>​            2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p>
<p>​            3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p>
<h5 id="2）、如何定制错误的json数据；"><a href="#2）、如何定制错误的json数据；" class="headerlink" title="2）、如何定制错误的json数据；"></a>2）、如何定制错误的json数据；</h5><p>​        1）、自定义异常处理&amp;返回定制json数据；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(UserNotExistException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">handleException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;user.notexist&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有自适应效果...</span></span><br></pre></td></tr></table></figure>



<p>​        2）、转发到/error进行自适应响应效果处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(UserNotExistException.class)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">handleException</span><span class="params">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">       Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       <span class="comment">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程</span></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Integer statusCode = (Integer) request</span></span><br><span class="line"><span class="comment">        .getAttribute(&quot;javax.servlet.error.status_code&quot;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       request.setAttribute(<span class="string">&quot;javax.servlet.error.status_code&quot;</span>,<span class="number">500</span>);</span><br><span class="line">       map.put(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;user.notexist&quot;</span>);</span><br><span class="line">       map.put(<span class="string">&quot;message&quot;</span>,e.getMessage());</span><br><span class="line">       <span class="comment">//转发到/error</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;forward:/error&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h5 id="3）、将我们的定制数据携带出去；"><a href="#3）、将我们的定制数据携带出去；" class="headerlink" title="3）、将我们的定制数据携带出去；"></a>3）、将我们的定制数据携带出去；</h5><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p>
<p>​    1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p>
<p>​    2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p>
<p>​            容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p>
<p>自定义ErrorAttributes</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给容器中加入我们自己定义的ErrorAttributes</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class="line">        map.put(<span class="string">&quot;company&quot;</span>,<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，"><a href="#最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，" class="headerlink" title="最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，"></a>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，</h6><h3 id="配置嵌入式Servlet容器-SpringBoot默认使用Tomcat作为嵌入式的Servlet容器"><a href="#配置嵌入式Servlet容器-SpringBoot默认使用Tomcat作为嵌入式的Servlet容器" class="headerlink" title="配置嵌入式Servlet容器(SpringBoot默认使用Tomcat作为嵌入式的Servlet容器)"></a>配置嵌入式Servlet容器(SpringBoot默认使用Tomcat作为嵌入式的Servlet容器)</h3><h5 id="如何定制和修改Servlet容器的相关配置；"><a href="#如何定制和修改Servlet容器的相关配置；" class="headerlink" title="如何定制和修改Servlet容器的相关配置；"></a>如何定制和修改Servlet容器的相关配置；</h5><p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">server.context-path</span>=<span class="string">/crud</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.tomcat.uri-encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//通用的Servlet容器设置</span></span><br><span class="line"><span class="attr">server.xxx</span></span><br><span class="line"><span class="attr">//Tomcat的设置</span></span><br><span class="line"><span class="attr">server.tomcat.xxx</span></span><br></pre></td></tr></table></figure>

<p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  <span class="comment">//一定要将这个定制器加入到容器中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainerCustomizer <span class="title">embeddedServletContainerCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定制嵌入式的Servlet容器相关的规则</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">            container.setPort(<span class="number">8083</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="注册Servlet三大组件【Servlet、Filter、Listener】"></a>注册Servlet三大组件【Servlet、Filter、Listener】</h4><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p>
<p>注册三大组件用以下方式</p>
<h6 id="ServletRegistrationBean"><a href="#ServletRegistrationBean" class="headerlink" title="ServletRegistrationBean"></a>ServletRegistrationBean</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册三大组件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> MyServlet(),<span class="string">&quot;/myServlet&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="FilterRegistrationBean"><a href="#FilterRegistrationBean" class="headerlink" title="FilterRegistrationBean"></a>FilterRegistrationBean</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    registrationBean.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">    registrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/hello&quot;</span>,<span class="string">&quot;/myServlet&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="ServletListenerRegistrationBean"><a href="#ServletListenerRegistrationBean" class="headerlink" title="ServletListenerRegistrationBean"></a>ServletListenerRegistrationBean</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyListener());</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>SpringBoot自动配置SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p>
<p>DispatcherServletAutoConfiguration中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      DispatcherServlet dispatcherServlet)</span> </span>&#123;</span><br><span class="line">   ServletRegistrationBean registration = <span class="keyword">new</span> ServletRegistrationBean(</span><br><span class="line">         dispatcherServlet, <span class="keyword">this</span>.serverProperties.getServletMapping());</span><br><span class="line">    <span class="comment">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp</span></span><br><span class="line">    <span class="comment">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span></span><br><span class="line">    </span><br><span class="line">   registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class="line">   registration.setLoadOnStartup(</span><br><span class="line">         <span class="keyword">this</span>.webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.multipartConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">      registration.setMultipartConfig(<span class="keyword">this</span>.multipartConfig);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="替换为其他嵌入式Servlet容器"><a href="#替换为其他嵌入式Servlet容器" class="headerlink" title="替换为其他嵌入式Servlet容器"></a>替换为其他嵌入式Servlet容器</h4><h6 id="Tomcat（默认使用）"><a href="#Tomcat（默认使用）" class="headerlink" title="Tomcat（默认使用）"></a>Tomcat（默认使用）</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="Undertow"><a href="#Undertow" class="headerlink" title="Undertow"></a>Undertow</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="嵌入式Servlet容器自动配置原理；"><a href="#嵌入式Servlet容器自动配置原理；" class="headerlink" title="嵌入式Servlet容器自动配置原理；"></a>嵌入式Servlet容器自动配置原理；</h4><h6 id="EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置"><a href="#EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置" class="headerlink" title="EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置"></a>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@Import(BeanPostProcessorsRegistrar.class)</span></span><br><span class="line"><span class="comment">//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件</span></span><br><span class="line"><span class="comment">//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：</span></span><br><span class="line"><span class="comment">//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass(&#123; Servlet.class, Tomcat.class &#125;)</span><span class="comment">//判断当前是否引入了Tomcat依赖；</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span><span class="comment">//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedTomcat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="title">tomcatEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Nested configuration if Jetty is being used.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Configuration</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass(&#123; Servlet.class, Server.class, Loader.class,</span></span><br><span class="line"><span class="meta">			WebAppContext.class &#125;)</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedJetty</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> JettyEmbeddedServletContainerFactory <span class="title">jettyEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> JettyEmbeddedServletContainerFactory();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Nested configuration if Undertow is being used.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Configuration</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedUndertow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> UndertowEmbeddedServletContainerFactory <span class="title">undertowEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> UndertowEmbeddedServletContainerFactory();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取嵌入式的Servlet容器</span></span><br><span class="line">   <span class="function">EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">         ServletContextInitializer... initializers)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2）、EmbeddedServletContainer：（嵌入式的Servlet容器）</p>
<p>3）、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个Tomcat</span></span><br><span class="line">   Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置Tomcat的基本环节</span></span><br><span class="line">   File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span> ? <span class="keyword">this</span>.baseDirectory</span><br><span class="line">         : createTempDir(<span class="string">&quot;tomcat&quot;</span>));</span><br><span class="line">   tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">   Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">   tomcat.getService().addConnector(connector);</span><br><span class="line">   customizeConnector(connector);</span><br><span class="line">   tomcat.setConnector(connector);</span><br><span class="line">   tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">   configureEngine(tomcat.getEngine());</span><br><span class="line">   <span class="keyword">for</span> (Connector additionalConnector : <span class="keyword">this</span>.additionalTomcatConnectors) &#123;</span><br><span class="line">      tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">   &#125;</span><br><span class="line">   prepareContext(tomcat.getHost(), initializers);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器</span></span><br><span class="line">   <span class="keyword">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4）、嵌入式容器的配置修改如何生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ServerProperties、EmbeddedServletContainerCustomizer</span><br></pre></td></tr></table></figure>



<p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置</p>
<p>修改的原理</p>
<p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化之前</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="comment">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件</span></span><br><span class="line">   <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;</span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postProcessBeforeInitialization</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			ConfigurableEmbeddedServletContainer bean)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；</span></span><br><span class="line">    <span class="keyword">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;</span><br><span class="line">        customizer.customize(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class="title">getCustomizers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.customizers == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Look up does not include the parent context</span></span><br><span class="line">        <span class="keyword">this</span>.customizers = <span class="keyword">new</span> ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(</span><br><span class="line">            <span class="keyword">this</span>.beanFactory</span><br><span class="line">            <span class="comment">//从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer</span></span><br><span class="line">            <span class="comment">//定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span></span><br><span class="line">            .getBeansOfType(EmbeddedServletContainerCustomizer.class,</span><br><span class="line">                            <span class="keyword">false</span>, <span class="keyword">false</span>)</span><br><span class="line">            .values());</span><br><span class="line">        Collections.sort(<span class="keyword">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">        <span class="keyword">this</span>.customizers = Collections.unmodifiableList(<span class="keyword">this</span>.customizers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.customizers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ServerProperties也是定制器</span><br></pre></td></tr></table></figure>



<h6 id="步骤：-1"><a href="#步骤：-1" class="headerlink" title="步骤："></a>步骤：</h6><p>1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p>
<p>2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p>
<p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p>
<p>3）、后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p>
<p>####嵌入式Servlet容器启动原理</p>
<p>1）、SpringBoot应用启动运行run方法</p>
<p>2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></p>
<p>3）、refresh(context);<strong>刷新刚才创建好的ioc容器；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">      <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">      prepareRefresh();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">      prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">         postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">         registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">         initMessageSource();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">         initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">         onRefresh();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">         registerListeners();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">         finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">         finishRefresh();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">         destroyBeans();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">         cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line">         <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">         resetCommonCaches();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4）、  onRefresh(); web的ioc容器重写了onRefresh方法</p>
<p>5）、webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p>
<p><strong>6）、获取嵌入式的Servlet容器工厂：</strong></p>
<p>EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</p>
<p>​    从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p>
<p>7）、<strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());</p>
<p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p>
<p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p>
<p><strong>==IOC容器启动创建嵌入式的Servlet容器==</strong></p>
<h3 id="使用外置的Servlet容器"><a href="#使用外置的Servlet容器" class="headerlink" title="使用外置的Servlet容器"></a>使用外置的Servlet容器</h3><p>嵌入式Servlet容器：应用打成可执行的jar</p>
<h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h6><p>​                    简单、便携；</p>
<h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h6><p>​                    默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；</p>
<h6 id="外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；"><a href="#外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；" class="headerlink" title="外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；"></a>外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；</h6><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>1）、必须创建一个war项目；（利用idea创建好目录结构）</p>
<p>2）、将嵌入式的Tomcat指定为provided；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3）、必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//传入SpringBoot应用的主程序</span></span><br><span class="line">      <span class="keyword">return</span> application.sources(SpringBoot04WebJspApplication.class);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4）、启动服务器就可以使用；</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p>
<p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>【SpringBootServletInitializer】，启动ioc容器；</p>
<p>servlet3.0（Spring注解版）：</p>
<p>8.2.4 Shared libraries / runtimes pluggability：</p>
<h6 id="规则："><a href="#规则：" class="headerlink" title="规则："></a>规则：</h6><p>​    1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：</p>
<p>​    </p>
<p>2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</p>
<p>​    3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</p>
<h6 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h6><p>1）、启动Tomcat</p>
<p>2）、org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer：</p>
<p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p>
<p>3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例；</p>
<p>4）、每一个WebApplicationInitializer都调用自己的onStartup；</p>
<p>5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p>
<p>6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、创建SpringApplicationBuilder</span></span><br><span class="line">   SpringApplicationBuilder builder = createSpringApplicationBuilder();</span><br><span class="line">   StandardServletEnvironment environment = <span class="keyword">new</span> StandardServletEnvironment();</span><br><span class="line">   environment.initPropertySources(servletContext, <span class="keyword">null</span>);</span><br><span class="line">   builder.environment(environment);</span><br><span class="line">   builder.main(getClass());</span><br><span class="line">   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);</span><br><span class="line">   <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.logger.info(<span class="string">&quot;Root context already created (using as parent).&quot;</span>);</span><br><span class="line">      servletContext.setAttribute(</span><br><span class="line">            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">null</span>);</span><br><span class="line">      builder.initializers(<span class="keyword">new</span> ParentContextApplicationContextInitializer(parent));</span><br><span class="line">   &#125;</span><br><span class="line">   builder.initializers(</span><br><span class="line">         <span class="keyword">new</span> ServletContextApplicationContextInitializer(servletContext));</span><br><span class="line">   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来</span></span><br><span class="line">   builder = configure(builder);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用builder创建一个Spring应用</span></span><br><span class="line">   SpringApplication application = builder.build();</span><br><span class="line">   <span class="keyword">if</span> (application.getSources().isEmpty() &amp;&amp; AnnotationUtils</span><br><span class="line">         .findAnnotation(getClass(), Configuration.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      application.getSources().add(getClass());</span><br><span class="line">   &#125;</span><br><span class="line">   Assert.state(!application.getSources().isEmpty(),</span><br><span class="line">         <span class="string">&quot;No SpringApplication sources have been defined. Either override the &quot;</span></span><br><span class="line">               + <span class="string">&quot;configure method or add an @Configuration annotation&quot;</span>);</span><br><span class="line">   <span class="comment">// Ensure error pages are registered</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.registerErrorPageFilter) &#123;</span><br><span class="line">      application.getSources().add(ErrorPageFilterConfiguration.class);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//启动Spring应用</span></span><br><span class="line">   <span class="keyword">return</span> run(application);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>7）、Spring的应用就启动并且创建IOC容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">   stopWatch.start();</span><br><span class="line">   ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">   FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">   listeners.starting();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">            args);</span><br><span class="line">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">            applicationArguments);</span><br><span class="line">      Banner printedBanner = printBanner(environment);</span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">      analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">            printedBanner);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//刷新IOC容器</span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">      listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">      stopWatch.stop();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">         <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> context;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>==启动Servlet容器，再启动SpringBoot应用==**</p>
<h3 id="SpringBoot与数据访问"><a href="#SpringBoot与数据访问" class="headerlink" title="SpringBoot与数据访问"></a>SpringBoot与数据访问</h3><h4 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.15.22:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<h6 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h6><p>​    默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；</p>
<p>​    数据源的相关配置都在DataSourceProperties里面；</p>
<h5 id="自动配置原理："><a href="#自动配置原理：" class="headerlink" title="自动配置原理："></a>自动配置原理：</h5><p>org.springframework.boot.autoconfigure.jdbc：</p>
<p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p>
<p>2、SpringBoot默认可以支持；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、</span><br></pre></td></tr></table></figure>



<p>3、自定义数据源类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generic DataSource configuration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;)</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性</span></span><br><span class="line">      <span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p>
<h6 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h6><p>​        1）、runSchemaScripts();运行建表语句；</p>
<p>​        2）、runDataScripts();运行插入数据的sql语句；</p>
<h6 id="默认只需要将文件命名为："><a href="#默认只需要将文件命名为：" class="headerlink" title="默认只需要将文件命名为："></a>默认只需要将文件命名为：</h6><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">schema-*.sql、data-*.sql</span></span><br><span class="line"><span class="attr">默认规则：schema.sql，schema-all.sql；</span></span><br><span class="line"><span class="meta">可以使用</span>   <span class="string"></span></span><br><span class="line">	<span class="attr">schema</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">classpath:department.sql</span></span><br><span class="line">      <span class="attr">指定位置</span></span><br></pre></td></tr></table></figure>



<p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p>
<h4 id="整合Druid数据源"><a href="#整合Druid数据源" class="headerlink" title="整合Druid数据源"></a>整合Druid数据源</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">导入druid数据源</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Druid的监控</span></span><br><span class="line">    <span class="comment">//1、配置一个管理后台的Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        initParams.put(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        initParams.put(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        initParams.put(<span class="string">&quot;allow&quot;</span>,<span class="string">&quot;&quot;</span>);<span class="comment">//默认就是允许所有访问</span></span><br><span class="line">        initParams.put(<span class="string">&quot;deny&quot;</span>,<span class="string">&quot;192.168.15.21&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、配置一个web监控的filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h6 id="步骤：-2"><a href="#步骤：-2" class="headerlink" title="步骤："></a>步骤：</h6><p>​    1）、配置数据源相关属性（见上一节Druid）</p>
<p>​    2）、给数据库建表</p>
<p>​    3）、创建JavaBean</p>
<h4 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from department where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from department where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into department(departmentName) values(#&#123;departmentName&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h6><p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用MapperScan批量扫描所有的Mapper接口；</span><br><span class="line"><span class="meta">@MapperScan(value = &quot;com.atguigu.springboot.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot06DataMybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(SpringBoot06DataMybatisApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="配置文件版"><a href="#配置文件版" class="headerlink" title="配置文件版"></a>配置文件版</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span> <span class="string">指定全局配置文件的位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span>  <span class="string">指定sql映射文件的位置</span></span><br></pre></td></tr></table></figure>



<p>使用方法参照官方文档：<a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p>
<h3 id="整合SpringData-JPA"><a href="#整合SpringData-JPA" class="headerlink" title="整合SpringData JPA"></a>整合SpringData JPA</h3><p>JPA:ORM（Object Relational Mapping）；</p>
<h6 id="1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；"><a href="#1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；" class="headerlink" title="1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；"></a>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class="line"><span class="meta">@Table(name = &quot;tbl_user&quot;)</span> <span class="comment">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//这是一个主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><span class="comment">//自增主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;last_name&quot;,length = 50)</span> <span class="comment">//这是和数据表对应的一个列</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@Column</span> <span class="comment">//省略默认列名就是属性名</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure>



<h6 id="2）、编写一个Dao接口来操作实体类对应的数据表（Repository）"><a href="#2）、编写一个Dao接口来操作实体类对应的数据表（Repository）" class="headerlink" title="2）、编写一个Dao接口来操作实体类对应的数据表（Repository）"></a>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository来完成对数据库的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h6 id="3）、基本的配置JpaProperties"><a href="#3）、基本的配置JpaProperties" class="headerlink" title="3）、基本的配置JpaProperties"></a>3）、基本的配置JpaProperties</h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line"> <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line"><span class="comment">#     更新或者创建数据表结构</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="comment">#    控制台显示SQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h3 id="启动配置原理"><a href="#启动配置原理" class="headerlink" title="启动配置原理"></a>启动配置原理</h3><h6 id="几个重要的事件回调机制"><a href="#几个重要的事件回调机制" class="headerlink" title="几个重要的事件回调机制"></a>几个重要的事件回调机制</h6><p>配置在META-INF/spring.factories</p>
<p><strong>ApplicationContextInitializer</strong></p>
<p><strong>SpringApplicationRunListener</strong></p>
<p>只需要放在ioc容器中</p>
<p><strong>ApplicationRunner</strong></p>
<p><strong>CommandLineRunner</strong></p>
<h3 id="启动流程："><a href="#启动流程：" class="headerlink" title="启动流程："></a>启动流程：</h3><h6 id="1、创建SpringApplication对象"><a href="#1、创建SpringApplication对象" class="headerlink" title="1、创建SpringApplication对象"></a><strong>1、创建SpringApplication对象</strong></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">initialize(sources);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//保存主配置类</span></span><br><span class="line">    <span class="keyword">if</span> (sources != <span class="keyword">null</span> &amp;&amp; sources.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断当前是否一个web应用</span></span><br><span class="line">    <span class="keyword">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class="line">    <span class="comment">//从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer；然后保存起来</span></span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">        ApplicationContextInitializer.class));</span><br><span class="line">    <span class="comment">//从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener</span></span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="comment">//从多个配置类中找到有main方法的主配置类</span></span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="2、运行run方法"><a href="#2、运行run方法" class="headerlink" title="2、运行run方法"></a>2、运行run方法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">   stopWatch.start();</span><br><span class="line">   ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">   FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories</span></span><br><span class="line">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    <span class="comment">//回调所有的获取SpringApplicationRunListener.starting()方法</span></span><br><span class="line">   listeners.starting();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//封装命令行参数</span></span><br><span class="line">      ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">            args);</span><br><span class="line">      <span class="comment">//准备环境</span></span><br><span class="line">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">            applicationArguments);</span><br><span class="line">       		<span class="comment">//创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成</span></span><br><span class="line">       </span><br><span class="line">      Banner printedBanner = printBanner(environment);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//创建ApplicationContext；决定创建web的ioc还是普通的ioc</span></span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">       </span><br><span class="line">      analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">       <span class="comment">//准备上下文环境;将environment保存到ioc中；而且applyInitializers()；</span></span><br><span class="line">       <span class="comment">//applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法</span></span><br><span class="line">       <span class="comment">//回调所有的SpringApplicationRunListener的contextPrepared()；</span></span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">            printedBanner);</span><br><span class="line">       <span class="comment">//prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded（）；</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版</span></span><br><span class="line">       <span class="comment">//扫描，创建，加载所有组件的地方；（配置类，组件，自动配置）</span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">       <span class="comment">//从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调</span></span><br><span class="line">       <span class="comment">//ApplicationRunner先回调，CommandLineRunner再回调</span></span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">       <span class="comment">//所有的SpringApplicationRunListener回调finished方法</span></span><br><span class="line">      listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">      stopWatch.stop();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">         <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//整个SpringBoot应用启动完成以后返回启动的ioc容器；</span></span><br><span class="line">      <span class="keyword">return</span> context;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="3、事件监听机制"><a href="#3、事件监听机制" class="headerlink" title="3、事件监听机制"></a>3、事件监听机制</h6><p>配置在META-INF/spring.factories</p>
<p><strong>ApplicationContextInitializer</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span>&lt;<span class="title">ConfigurableApplicationContext</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ApplicationContextInitializer...initialize...&quot;</span>+applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>SpringApplicationRunListener</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须有的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloSpringApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpringApplicationRunListener...starting...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">        Object o = environment.getSystemProperties().get(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;SpringApplicationRunListener...environmentPrepared..&quot;</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpringApplicationRunListener...contextPrepared...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpringApplicationRunListener...contextLoaded...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finished</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpringApplicationRunListener...finished...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>配置（META-INF/spring.factories）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.atguigu.springboot.listener.HelloApplicationContextInitializer</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.boot.SpringApplicationRunListener</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.atguigu.springboot.listener.HelloSpringApplicationRunListener</span></span><br></pre></td></tr></table></figure>





<p>只需要放在ioc容器中</p>
<p><strong>ApplicationRunner</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ApplicationRunner...run....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>CommandLineRunner</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CommandLineRunner...run...&quot;</span>+ Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h3><h5 id="starter："><a href="#starter：" class="headerlink" title="starter："></a>starter：</h5><h6 id="1、这个场景需要所使用到的依赖"><a href="#1、这个场景需要所使用到的依赖" class="headerlink" title="1、这个场景需要所使用到的依赖"></a>1、这个场景需要所使用到的依赖</h6><h6 id="2、如何编写自动配置"><a href="#2、如何编写自动配置" class="headerlink" title="2、如何编写自动配置"></a>2、如何编写自动配置</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//指定这个类是一个配置类</span></span><br><span class="line"><span class="meta">@ConditionalOnXXX</span>  <span class="comment">//在指定条件成立的情况下自动配置类生效</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>  <span class="comment">//指定自动配置类的顺序</span></span><br><span class="line"><span class="meta">@Bean</span>  <span class="comment">//给容器中添加组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationPropertie</span>结合相关xxxProperties类来绑定相关的配置</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span> <span class="comment">//让xxxProperties生效加入到容器中</span></span><br><span class="line"></span><br><span class="line">自动配置类要能加载</span><br><span class="line">将需要启动就加载的自动配置类，配置在META-INF/spring.factories</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br></pre></td></tr></table></figure>



<h6 id="3、模式："><a href="#3、模式：" class="headerlink" title="3、模式："></a>3、模式：</h6><p>启动器只用来做依赖导入；</p>
<p>专门来写一个自动配置模块；</p>
<p>启动器依赖自动配置；别人只需要引入启动器（starter）</p>
<p>mybatis-spring-boot-starter；自定义启动器名-spring-boot-starter</p>
<h4 id="步骤：-3"><a href="#步骤：-3" class="headerlink" title="步骤："></a>步骤：</h4><h6 id="1）、启动器模块"><a href="#1）、启动器模块" class="headerlink" title="1）、启动器模块"></a>1）、启动器模块</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入自动配置模块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h6 id="2）、自动配置模块"><a href="#2）、自动配置模块" class="headerlink" title="2）、自动配置模块"></a>2）、自动配置模块</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--引入spring-boot-starter；所有starter的基本配置--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;atguigu.hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHellAtguigu</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix()+<span class="string">&quot;-&quot;</span> +name + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//web应用才生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HelloService service = <span class="keyword">new</span> HelloService();</span><br><span class="line">        service.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h5 id="SpringBoot整合示例参考文档：https-github-com-spring-projects-spring-boot-tree-master-spring-boot-samples"><a href="#SpringBoot整合示例参考文档：https-github-com-spring-projects-spring-boot-tree-master-spring-boot-samples" class="headerlink" title="SpringBoot整合示例参考文档：https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples"></a>SpringBoot整合示例参考文档：<a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples">https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples</a></h5>]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL笔记</title>
    <url>/2017/05/12/mysql%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>mysql学习笔记</p>
<a id="more"></a>






<h3 id="mysql笔记"><a href="#mysql笔记" class="headerlink" title="mysql笔记"></a>mysql笔记</h3><hr>
<h4 id="一、常用命令："><a href="#一、常用命令：" class="headerlink" title="一、常用命令："></a>一、常用命令：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##登录</span><br><span class="line">	mysql -h 主机名 -P 端口号 -u 用户名 -p 密码</span><br><span class="line">##退出</span><br><span class="line">	exit或ctrl+C</span><br><span class="line">##查看数据库</span><br><span class="line">	show databases;</span><br><span class="line">##进入指定数据库</span><br><span class="line">	use database_name;</span><br><span class="line">##查看当前数据库有哪些表</span><br><span class="line">	show tables;</span><br><span class="line">##查看某个数据库有哪些表</span><br><span class="line">	show tables from database_name;</span><br><span class="line">##查看处于哪个库</span><br><span class="line">	select databases();</span><br><span class="line">##创建数据库(test)</span><br><span class="line">	create database test;</span><br><span class="line">##创建表(stuinfo)</span><br><span class="line">	create table stuinfo(</span><br><span class="line">		id int,</span><br><span class="line">		name varchar(20)</span><br><span class="line">	);</span><br><span class="line">##查看表结构(stuinfo)</span><br><span class="line">	desc stuinfo;</span><br><span class="line">##查看数据库服务器版本</span><br><span class="line">	select version();</span><br><span class="line">##查看数据库使用的字符集</span><br><span class="line">	select variables like &#39;%char%&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="二、数据查询语言-DQL"><a href="#二、数据查询语言-DQL" class="headerlink" title="二、数据查询语言(DQL)"></a>二、数据查询语言(DQL)</h4><hr>
<h5 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">##起别名 使用as 或 空格 (别名有特殊字符需要加双引号)</span></span><br><span class="line">	<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">as</span> 编号 <span class="keyword">from</span> stuinfo;</span><br><span class="line"><span class="comment">##去重</span></span><br><span class="line">	<span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">id</span> <span class="keyword">from</span> stuinfo;</span><br><span class="line"><span class="comment">##+号的作用(运算符)</span></span><br><span class="line">	<span class="keyword">select</span> <span class="number">100</span>+<span class="number">90</span>;		两个操作数都为数值型，则做加法运算</span><br><span class="line">	<span class="keyword">select</span> <span class="string">&#x27;123&#x27;</span>+<span class="number">90</span>		只要一方为字符型，试图将字符型数值转换成数值型；</span><br><span class="line">						如果转换成功，则做加法运算	（<span class="number">213</span>）</span><br><span class="line">	<span class="keyword">select</span> <span class="string">&#x27;john&#x27;</span>+<span class="number">90</span>	如果转换失败，则将字符型数值转换成<span class="number">0</span>	（<span class="number">90</span>）</span><br><span class="line">	<span class="keyword">select</span> <span class="literal">null</span>+<span class="number">90</span>		只要一方为<span class="literal">null</span>，则结果肯定为<span class="literal">null</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">##拼接</span></span><br><span class="line">	<span class="keyword">select</span> <span class="keyword">concat</span>(last_name,first_name) <span class="keyword">as</span> 姓名 <span class="keyword">from</span> stuinfo;</span><br><span class="line"><span class="comment">##转义(查询第二个字符为_的学生姓名)</span></span><br><span class="line">	<span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> stuinfo <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">&#x27;_$_%&#x27;</span> escape <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">			&gt;&gt;&gt;其中$可以为任意字符</span><br><span class="line"><span class="comment">##查询NULL值(不能使用=)</span></span><br><span class="line">	<span class="keyword">select</span> * <span class="keyword">from</span> stuinfo <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">is</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">##安全等于(可以判断NULL值，也可以判断普通值)</span></span><br><span class="line">	<span class="keyword">select</span> * <span class="keyword">from</span> stuinfo <span class="keyword">where</span> <span class="keyword">name</span> &lt;=&gt; <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">select</span> * <span class="keyword">from</span> stuinfo <span class="keyword">where</span> <span class="keyword">name</span> &lt;=&gt; <span class="string">&#x27;zzz&#x27;</span>;</span><br><span class="line"><span class="comment">##if null(表达式1,表达式2)	表达式1为需判断的列名 表达式2为判断值为NULL时替换的值</span></span><br><span class="line">	<span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">ifnull</span>(age,<span class="number">0</span>) <span class="keyword">from</span> stuinfo; </span><br></pre></td></tr></table></figure>

<hr>
<h5 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##length 获取参数值的字节个数</span><br><span class="line">	select length(&#39;john&#39;);</span><br><span class="line">##concat 拼接字符串</span><br><span class="line">	select concat(last_name,&#39;_&#39;,first_name) from stuinfo;</span><br><span class="line">##upper、lower 大写 小写</span><br><span class="line">	select upper(&#39;john&#39;);</span><br><span class="line">	select concat(upper(last_name),lower(first_name)) 姓名 from stuinfo;</span><br><span class="line">##substr 截取指定位置的字符(索引从1开始)</span><br><span class="line">	select substr(&#39;东方不败dongfangbubai&#39;,5);	[dongfangbubai]</span><br><span class="line">	select substr(&#39;东方不败dongfangbubai&#39;,1,4);	[东方不败]</span><br><span class="line">》》》案例：姓名首字母大写，其他字符小写，并用_拼接，显示出来</span><br><span class="line">	select concat(upper(substr(last_name,1,1)),&#39;_&#39;,lower(substr(last_name,2))) 姓名 from stuinfo;</span><br><span class="line">##instr 返回字符串在原字符的第一次出现的索引，如果找不到返回0</span><br><span class="line">	select instr(&#39;楚留香chuliuxiang&#39;,&#39;xiang&#39;) as out_put from stuinfo;</span><br><span class="line">##trim 去掉字符串两端指定的字符 如果不指定为去掉两端空格</span><br><span class="line">	select length(trim(&#39;   张无忌    &#39;));	[结果为9；mysql中一个汉字占3个字符]</span><br><span class="line">	select trim(&#39;a&#39; from &#39;aaaaaaa张aaa无忌aaaaaaaaa&#39;);[结果为张aaa无忌]</span><br><span class="line">##lpad	用指定字符左填充指定长度(超过会截断)</span><br><span class="line">	select lpad(&#39;张无忌&#39;,10,&#39;*&#39;);	[结果为*******张无忌]</span><br><span class="line">	select lpad(&#39;张无忌&#39;,2,&#39;*&#39;);	[结果为张无]</span><br><span class="line">##rpan	用指定字符右填充指定长度</span><br><span class="line">	select rpad(&#39;张无忌&#39;,10,&#39;ab&#39;);	[结果为张无忌abababa]</span><br><span class="line">##replace 字符替换(会替换全部的字符)</span><br><span class="line">	select replace(&#39;张无忌爱上了周芷若&#39;,&#39;周芷若&#39;,&#39;赵敏&#39;);	[赵敏替换周芷若]</span><br></pre></td></tr></table></figure>

<h5 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##round 四舍五入</span><br><span class="line">	select round(1.65);	[2]</span><br><span class="line">	select round(1.234,2);	[1.23  小数点后保留两位]</span><br><span class="line">##ceil 向上取整，返回大于等于该参数的最小整数</span><br><span class="line">	select ceil(1.02);	[2]</span><br><span class="line">##floor 向下取整 返回小于等于该参数的最大整数</span><br><span class="line">	select floor(-9.99);	[-10]</span><br><span class="line">##truncate 截断(小数点后指定位数)</span><br><span class="line">	select truncate(1.69999,1);	[1.6]</span><br><span class="line">##mod 取余 (公式：mod(a,b) &#x3D; a-a&#x2F;b*b)</span><br><span class="line">	select mod(10,3);	[1]	</span><br></pre></td></tr></table></figure>

<h5 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##now 返回当前系统日期+时间</span><br><span class="line">	SELECT NOW();	[2015-08-06 23:12:00]</span><br><span class="line">##curdate 返回当前系统日期，不含时间</span><br><span class="line">	SELECT CURDATE();</span><br><span class="line">##CURTIME 返回当前时间，不包含日期</span><br><span class="line">	SELECT CURTIME();</span><br><span class="line">##可以获取指定的部分，年year、月month、日day、时hour、分minute、秒second</span><br><span class="line">	SELECT YEAR(NOW()) 年;</span><br><span class="line">	SELECT YEAR(&#39;1998-1-1&#39;) 年;	[1998]</span><br><span class="line">	SELECT MONTHNAME(NOW()) 月;	[September]</span><br><span class="line">##str_to_date 将日期格式的字符转换成指定格式的日期</span><br><span class="line">	SELECT STR_TO_DATE(&#39;9-13-2015&#39;,&#39;%m-%d-%Y&#39;);	[2015-09-13]</span><br><span class="line">##date_format 将日期转换成字符</span><br><span class="line">	SELECT DATE_FORMAT(&#39;2015&#x2F;09&#x2F;22&#39;,&#39;%Y年%m月%d日&#39;);	[2015年09月22日]</span><br><span class="line">##datediff (前-后)</span><br><span class="line">	SELECT DATEDIFF(&#39;2015-10-2&#39;,&#39;2015-10-4&#39;);	[-2]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;格式符：</span><br><span class="line">	%Y	四位的年份</span><br><span class="line">	%y	2位的年份</span><br><span class="line">	%m	月份（01，02，03……）</span><br><span class="line">	%c	月份（1，2，3，4……）</span><br><span class="line">	%d	日（01，02，03……）</span><br><span class="line">	%H	小时（24小时制）</span><br><span class="line">	%h	小时（12小时制）</span><br><span class="line">	%i	分钟（00，01，02，……59）</span><br><span class="line">	%s	秒（00，01，02……59）</span><br><span class="line">》》》案例：查询入职日期为1992-4-3的员工信息</span><br><span class="line">	SELECT * FROM employees WHERE hiredate &#x3D; &#39;1992-4-3&#39;;</span><br><span class="line">	SELECT * FROM employees WHERE hiredate &#x3D; STR_TO_DATE(&#39;4-3 1992&#39;,&#39;%c-%d %Y&#39;);</span><br></pre></td></tr></table></figure>

<h5 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##查看数据库版本</span><br><span class="line">	SELECT VERSION();</span><br><span class="line">##查看当前数据库</span><br><span class="line">	SELECT DATABASE();</span><br><span class="line">##查看当前用户</span><br><span class="line">	SELECT USER();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##if函数 if else的效果</span><br><span class="line">	SELECT IF(10&lt;5,&#39;大&#39;,&#39;小&#39;);	[小]</span><br><span class="line">##case函数</span><br><span class="line">	1、switch case的效果 (等值)</span><br><span class="line">##		case 要判断的字段或表达式 when 常量1 then 要显示的值1或语句1;</span><br><span class="line">##							   when 常量2 then 要显示的值2或语句2;</span><br><span class="line">##						       else 要显示的值n或语句n;</span><br><span class="line">##						  	   end</span><br><span class="line">	2、类似于多重if (区间判断)</span><br><span class="line">##		case </span><br><span class="line">##		when 条件1 then 要显示的值1或语句1</span><br><span class="line">##		when 条件2 then 要显示的值2或语句2</span><br><span class="line">##		...</span><br><span class="line">##		else 要显示的值n或语句n</span><br><span class="line">##		end </span><br><span class="line">》》》案例1：查询员工的工资</span><br><span class="line">		如果部门号&#x3D;30，显示的工资为1.1倍</span><br><span class="line">		如果部门号&#x3D;40，显示的工资为1.2倍</span><br><span class="line">		如果部门号&#x3D;50，显示的工资为1.3倍</span><br><span class="line">		其他部门，显示的工资为原工资</span><br><span class="line">	SELECT salary 原始工资,department_id,</span><br><span class="line">	CASE department_id</span><br><span class="line">	WHEN 30 THEN salary*1.1</span><br><span class="line">	WHEN 40 THEN salary*1.2</span><br><span class="line">	WHEN 50 THEN salary*1.3</span><br><span class="line">	ELSE salary</span><br><span class="line">	END AS 新工资</span><br><span class="line">	FROM employees;			[表达式之间不能加分号！！！语句之间需要]</span><br><span class="line">》》》案例2：查询出员工的工资情况</span><br><span class="line">		如果工资&gt;20000,显示A级别</span><br><span class="line">		如果工资&gt;15000,显示B级别</span><br><span class="line">		如果工资&gt;10000,显示C级别</span><br><span class="line">		否则，显示D级别</span><br><span class="line">	SELECT salary,</span><br><span class="line">	CASE </span><br><span class="line">	WHEN salary &gt; 20000 THEN &#39;A&#39;</span><br><span class="line">	WHEN salary &gt; 15000 THEN &#39;B&#39;</span><br><span class="line">	WHEN salary &gt; 10000 THEN &#39;C&#39;</span><br><span class="line">	ELSE &#39;D&#39;</span><br><span class="line">	END AS 工资级别</span><br><span class="line">	FROM employees;</span><br></pre></td></tr></table></figure>

<h5 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##sum 求和</span><br><span class="line">	SELECT SUM(salary) FROM employees;</span><br><span class="line">##avg 平均值</span><br><span class="line">	SELECT AVG(salary) FROM employees;</span><br><span class="line">##max 最大值</span><br><span class="line">	SELECT MAX(salary) FROM employees;</span><br><span class="line">##min 最小值</span><br><span class="line">	SELECT MIN(salary) FROM employees;</span><br><span class="line">##count 计算个数</span><br><span class="line">	SELECT COUNT(salary) FROM employees;	&#x2F;&#x2F;salary字段有几个非空值</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;参数支持哪些类型</span><br><span class="line">	SUM		数值型		忽略NULL值		可和distinct搭配使用</span><br><span class="line">	AVG		数值型		忽略NULL值		可和distinct搭配使用</span><br><span class="line">	MAX		任何类型   忽略NULL值	   可和distinct搭配使用</span><br><span class="line">	MIN		任何类型   忽略NULL值	   可和distinct搭配使用</span><br><span class="line">	COUNT	任何类型   忽略NULL值	   可和distinct搭配使用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;COUNT函数详细介绍</span><br><span class="line">	SELECT COUNT(*) FROM employees;		&#x2F;&#x2F;总行数</span><br><span class="line">	SELECT COUNT(1) FROM employees;		&#x2F;&#x2F;总行数</span><br><span class="line">		</span><br><span class="line">		MYISAM之下 COUNT(*)效率最高</span><br><span class="line">		INNODB之下 COUNT(*)和COUNT(1)的效率差不多，比COUNT(字段)要高一些		  </span><br><span class="line">##和分组函数一同查询的字段要求是group by后的字段</span><br><span class="line">	SELECT AVG(salary),employee_id FROM employees;</span><br></pre></td></tr></table></figure>

<h5 id="分组函数-1"><a href="#分组函数-1" class="headerlink" title="分组函数"></a>分组函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##添加分组后筛选</span><br><span class="line">	SELECT 分组函数,列（要求出现在group by的后面）</span><br><span class="line">		FROM 表</span><br><span class="line">		WHERE 筛选条件</span><br><span class="line">		GROUP BY 分组的列表</span><br><span class="line">		ORDER BY 子句</span><br><span class="line">	##特点：</span><br><span class="line">		1、分组查询中的筛选条件分为两类</span><br><span class="line">					数据源				位置					关键字</span><br><span class="line">		分组前筛选	 原始表			 group by子句的前面 	   where</span><br><span class="line">		分组后筛选	 分组后的结果集	  group by子句的后面		having</span><br><span class="line">		&gt;&gt;&gt; a)、分组函数做条件肯定要放在having子句中</span><br><span class="line">			b)、能用分组前筛选的，优先考虑分组前筛选</span><br><span class="line">		2、group by子句支持单个字段分组，多个字段分组（多个字段之间用逗号隔开，没有顺序要求）</span><br><span class="line">			也支持表达式或函数（用的较少）</span><br><span class="line">		3、可以添加排序（排序放在整个分组查询的最后）</span><br><span class="line">		</span><br><span class="line">》》》案例：查询哪个部门的员工个数&gt;2</span><br><span class="line">	SELECT COUNT(*),department_id FROM employees </span><br><span class="line">		GROUP BY department_id Having COUNT(*)&gt;2</span><br><span class="line">		  按员工姓名长度分组，查询每一组的员工个数，筛选员工个数&gt;5的有哪些</span><br><span class="line">	SELECT COUNT(*) c, LENGTH(last_name) len_name</span><br><span class="line">		FROM employees GROUP BY len_name HAVING c&gt;5;</span><br><span class="line">##按多个字段分组</span><br><span class="line">	SELECT AVG(salary),department_id,job_id </span><br><span class="line">		FROM employees GROUP BY job_id,department_id;</span><br><span class="line">##添加排序</span><br><span class="line">	SELECT AVG(salary),department_id,job_id </span><br><span class="line">		FROM employees GROUP BY job_id,department_id</span><br><span class="line">			ORDER BY AVG(salary) DESC;</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h5 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##内连接	交集部分</span><br><span class="line">	SELECT 查询列表 FROM 表1 别名 INNER JOIN 表2 别名 ON 连接条件;</span><br><span class="line">##外连接 </span><br><span class="line">	外连接的查询结果为主表中的所有记录</span><br><span class="line">	如果从表中有和它匹配的，则显示匹配的值</span><br><span class="line">	如果从表中没有和它匹配的，则显示null</span><br><span class="line">	外连接查询结果&#x3D;内连接查询结果+主表中有而从表中没有的记录</span><br><span class="line">	全外连接&#x3D;内连接的结果+表1中有但表2没有的+表2有但表1没有的</span><br><span class="line">	##左外连接</span><br><span class="line">	left join 左边的是主表</span><br><span class="line">		SELECT b.name bo.* FROM beauty b LEFT OUTER JOIN boys bo ON b.boyfriend_id &#x3D; bo.id;</span><br><span class="line">	##右外连接</span><br><span class="line">	right join 右边的是主表</span><br><span class="line">		SELECT b.name bo.* FROM boys bo RIGHT OUTER JOIN beauty b ON b.boyfriend_id &#x3D; bo.id;</span><br><span class="line"></span><br><span class="line">##交叉连接</span><br><span class="line">	两个表做笛卡尔乘积</span><br><span class="line">	SELECT b.*,bo.* FROM beauty b CROSS JOIN boys bo;</span><br></pre></td></tr></table></figure>

<h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##分类</span><br><span class="line">	##按子查询出现的位置</span><br><span class="line">		SELECT后面			仅仅支持标量子查询</span><br><span class="line">		FROM后面				支持表子查询</span><br><span class="line">		WHERE或HAVING后面	   支持*标量子查询、*列子查询、行子查询（用的较少）</span><br><span class="line">		EXISTS后面（相关子查询）表子查询</span><br><span class="line">							【标*为重点】</span><br><span class="line">	##按结果集的行列数不同</span><br><span class="line">		标量子查询（结果集只有一行一列）</span><br><span class="line">		列子查询（结果集只有一列多行）</span><br><span class="line">		行子查询（结果集有一行多列）</span><br><span class="line">		表子查询（结果集一般为多行多列）</span><br><span class="line"></span><br><span class="line">##特点：子查询放在小括号内</span><br><span class="line">	   子查询一般放在条件的右侧</span><br><span class="line">	   标量子查询，一般搭配着单行操作符（&gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D; &lt;&gt;）</span><br><span class="line">	   列子查询，一般搭配这多行操作符（in any&#x2F;some all）</span><br><span class="line">	   	</span><br><span class="line">	   	###多行操作符</span><br><span class="line">	   	IN&#x2F;NOT IN 		 等于列表中的任意一个</span><br><span class="line">	   	ANY&#x2F;SOME (MIN)   和子查询返回的某一个值比较</span><br><span class="line">	   	ALL	(MAX)		 和子查询返回的所有值比较</span><br><span class="line"></span><br><span class="line">##WHERE或HAVING后面</span><br><span class="line">###标量子查询（单行子查询）</span><br><span class="line">	1、查询谁的工资比Tom高</span><br><span class="line">	SELECT * FROM employees WHERE salary&gt;(SELECT salary FROM employees WHERE last_name &#x3D; &#39;Tom&#39;);</span><br><span class="line">	2、查询job_id和141号员工相同，salary比143号员工多的员工 姓名、job_id和工资</span><br><span class="line">	SELECT last_name,job_id,salary FROM employees</span><br><span class="line">		WHERE job_id &#x3D; (SELECT job_id FROM employees WHERE employees_id&#x3D;141)</span><br><span class="line">			AND salary &gt; (SELECT salary FROM employees WHERE employees_id &#x3D;13);</span><br><span class="line">			</span><br><span class="line">###列子查询（多行子查询）</span><br><span class="line">	1、查询localtion_id是1400或1700的部门中所有员工姓名</span><br><span class="line">	SELECT last_name FROM employees WHERE department_id IN(</span><br><span class="line">    	SELECT DISTINCT department_id FROM departments WHERE location_id IN(1400,1700)</span><br><span class="line">    );</span><br><span class="line">    2、查询其它工种中比job_id为&#39;IT_PROG&#39;部门任一工资低的员工的员工号、姓名、job_id以及salary</span><br><span class="line">    SELECT last_name,employee_id,job_id,salary FROM employees WHERE salary &lt; ANY(</span><br><span class="line">    	SELECT DISTINCT salary FROM employees WHERE job_id &#x3D; &#39;IT_PROG&#39;);</span><br><span class="line"> 或 SELECT last_name,employee_id,job_id,salary FROM employees WHERE salary &lt; (</span><br><span class="line">    	SELECT DISTINCT MAX(salary) FROM employees WHERE job_id &#x3D; &#39;IT_PROG&#39;);</span><br><span class="line">    	</span><br><span class="line">###行子查询（多列多行）</span><br><span class="line">	查询员工编号最小并且工资最高的员工信息</span><br><span class="line">	SELECT * FROM employees WHERE employee_id &#x3D; (SELECT MIN(employee_id) FROM employees)</span><br><span class="line">		AND salary &#x3D; (SELECT MAX(salary) FROM employees);</span><br><span class="line"> 或 SELECT * FROM employees WHERE (employee_id,salary) &#x3D; (</span><br><span class="line"> 		SELECT MIN(employee_id),MAX(salary) FROM employees); </span><br><span class="line"> 		</span><br><span class="line">##exists后面（相关子查询）</span><br><span class="line">	##exists(完整的查询语句)</span><br><span class="line">	##结果：1或0</span><br><span class="line">》》》案例：查询有员工名的部门名</span><br><span class="line">	SELECT department_name FROM departments d WHERE EXISTS(</span><br><span class="line">    	SELECT * FROM employees e WHERE d.department_id &#x3D; e.department_id);</span><br><span class="line"> 或 SELECT department_name FROM departments d WHERE d.department_id IN (</span><br><span class="line"> 		SELECT department_id FROM employees);</span><br><span class="line"> 		</span><br><span class="line">》》》**案例：查询各部门中工资比本部门平均工资高的员工的员工号，姓名和工资 </span><br><span class="line">	SELECT employee_id,last_name,salary e.department_id FROM employees e INNER JOIN (</span><br><span class="line">    	SELECT AVG(salary) ag,department_id FROM employees GROUP BY department_id) ag_dep</span><br><span class="line">    		ON e.department_id &#x3D; ag_dep.department_id WHERE salary &gt; ag_dept.ag;</span><br></pre></td></tr></table></figure>

<h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##limit(offset,size)</span><br><span class="line">	##offset:要显示条目的起始索引（起始索引从0开始）</span><br><span class="line">	##size:要显示的条目个数</span><br><span class="line"></span><br><span class="line">》》》案例1：查询前5条员工信息</span><br><span class="line">	SELECT * FROM employees LIMIT(0,5); </span><br><span class="line">	 案例2：查询第11条——第25条数据</span><br><span class="line">	SELECT * FROM employees LIMIT(10,15);</span><br><span class="line">	 案例3：有奖金的员工信息，并且工资较高的前10名显示出来</span><br><span class="line">	SELECT * FROM employees WHERE commission_pct IS NOT NULL ORDER BY salary DESC LIMIT 10;</span><br></pre></td></tr></table></figure>

<h5 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##union 将多条查询语句的结果合并成一个结果</span><br><span class="line">##应用场景：要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询信息一致时</span><br><span class="line"></span><br><span class="line">		##特点：1、多条查询语句的查询列数是一致的</span><br><span class="line">		##	   2、多条查询语句的查询的每一列的类型和顺序最好一致</span><br><span class="line">		##	   3、使用UNION关键字默认去重，如果使用UNION ALL可以包含重复项</span><br><span class="line"></span><br><span class="line">》》》案例：查询部门编号&gt;90或邮箱包含a的员工信息</span><br><span class="line">	SELECT * FROM employees WHERE email LIKE &#39;%a%&#39; OR department_id &gt; 90;</span><br><span class="line">	</span><br><span class="line"> 或 SELECT * FROM employees WHERE email LIKE &#39;%a%&#39;</span><br><span class="line"> 		UNION</span><br><span class="line"> 	SELECT * FROM employees WHERE department_id &gt; 90;</span><br></pre></td></tr></table></figure>

<h4 id="三、数据操作语言（DML）"><a href="#三、数据操作语言（DML）" class="headerlink" title="三、数据操作语言（DML）"></a>三、数据操作语言（DML）</h4><hr>
<h5 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名 (列名，列名,...) VALUES (值1,值2,...)</span><br><span class="line">INSERT INTO 表名 SET 列名 &#x3D; 值,列名 &#x3D; 值,...</span><br><span class="line"></span><br><span class="line">##1、插入的值的类型要与列的类型一致或兼容</span><br><span class="line">##2、不可以为NULL的列必须插入值，可以为NULL的列插入值可以为NULL或将列名去掉</span><br><span class="line">##3、列数和值的个数必须一致</span><br><span class="line">##4、可以省略列名，默认所有列，列的顺序和表中列的顺序一致</span><br><span class="line">》》》语句示例：</span><br><span class="line">	INSERT INTO stuinfo (id,name,sex,phone) VALUES (12,&#39;唐艺昕&#39;,&#39;女&#39;,NULL);</span><br><span class="line">	INSERT INTO stuinfo (id,name,sex) VALUES (12,&#39;唐艺昕&#39;,&#39;女&#39;);</span><br><span class="line">	</span><br><span class="line">	INSERT INTO stuinfo SET id &#x3D; 19,name &#x3D; &#39;张飞&#39;,phone &#x3D; &#39;999&#39;;</span><br></pre></td></tr></table></figure>

<h5 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a>修改语句</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##修改单表记录</span><br><span class="line">UPDATE 表名 SET 列 &#x3D; 新值, 列 &#x3D; 新值, ...</span><br><span class="line"></span><br><span class="line">##修改多表的记录（级联更新）</span><br><span class="line">UPDATE 表1 别名, INNER|LEFT|RIGHT JOIN 表2 别名,ON 连接条件 SET 列&#x3D;值,...</span><br><span class="line"></span><br><span class="line">》》》语句示例：</span><br><span class="line">	UPDATE stuinfo SET phone &#x3D; &#39;232343242&#39; WHERE name LIKE &#39;唐%&#39;;</span><br><span class="line">	UPDATE stuinfo SET phone &#x3D; &#39;232343242&#39;,age &#x3D; 20 WHERE name LIKE &#39;唐%&#39;;</span><br><span class="line">	</span><br><span class="line">    UPDATE stuinfo stu INNER JOIN course c ON stu.id &#x3D; c.id SET stu.phone &#x3D; &#39;23414&#39; WHERE stu.name &#x3D; &#39;张无忌&#39;;</span><br></pre></td></tr></table></figure>

<h5 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##方式一：</span><br><span class="line">	###单表删除</span><br><span class="line">		DELETE FROM 表名 WHERE 筛选条件;</span><br><span class="line"></span><br><span class="line">	###多表删除</span><br><span class="line">		DELETE 表1的别名,表2的别名 FROM 表1 别名 INNER|LEFT|RIGHT JOIN 表2 别名 ON 连接条件 WHERE 筛选条件;</span><br><span class="line">##方式二：</span><br><span class="line">	###整个表的数据都删除</span><br><span class="line">	TRUNCATE TABLE 表名;</span><br><span class="line">	</span><br><span class="line">	##特点：</span><br><span class="line">		##1、如果要删除的表中有自增长列</span><br><span class="line">			##用DELETE删除后，再插入数据，自增长列的值从断点开始</span><br><span class="line">			##用TRUNCATE删除后，再插入数据，自增长列的值从1开始</span><br><span class="line">		##2、TRUNCATE删除没有返回值（影响行数），DELETE删除有返回值</span><br><span class="line">		##3、TRUNCATE删除不能回滚，DELETE删除可以回滚</span><br><span class="line">		</span><br><span class="line">》》》语句示例：</span><br><span class="line">	DELETE FROM stuinfo WHERE phone LIKE &#39;%9&#39;;</span><br><span class="line">	</span><br><span class="line">	DELETE FROM stu FROM stuinfo stu INNER JOIN course c ON stu.id &#x3D; c.stuid;</span><br><span class="line">		WHERE stu.name &#x3D; &#39;张无忌&#39;;</span><br><span class="line">		</span><br><span class="line">	TRUNCATE TABLE stuinfo; </span><br></pre></td></tr></table></figure>

<h4 id="四、数据定义语言（DDL）"><a href="#四、数据定义语言（DDL）" class="headerlink" title="四、数据定义语言（DDL）"></a>四、数据定义语言（DDL）</h4><hr>
<h5 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## CREATE 创建数据库</span><br><span class="line">	CREATE DATEBASE 库名;</span><br><span class="line">		CREATE DATEBASE IF NOT EXISTS 库名;	(如果库已存在则不创建，如果库不存在则创建)</span><br><span class="line">## ALTER 修改数据库</span><br><span class="line">	不建议修改</span><br><span class="line">	</span><br><span class="line">	##可修改库的字符集</span><br><span class="line">	ALTER DATEBASE 库名 CHARACTER SET gbk;</span><br><span class="line">## DROP 删除数据库</span><br><span class="line">	DROP DATABASE 库名;</span><br><span class="line">		DROP DATABASE IF EXISTS 库名;		(如果存在则删除)</span><br></pre></td></tr></table></figure>

<h5 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## CREATE 创建表</span><br><span class="line">	CREATE TABLE IF NOT EXISTS 表名(</span><br><span class="line">    	列名 列的类型 【(长度) 约束】，</span><br><span class="line">        列名 列的类型 【(长度) 约束】，</span><br><span class="line">        列名 列的类型 【(长度) 约束】</span><br><span class="line">        ...</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">》》》语句示例：</span><br><span class="line">	CREATE TABLE books(</span><br><span class="line">    	id INT, </span><br><span class="line">        bName VARCHAR(20),</span><br><span class="line">        price DOUBLE,</span><br><span class="line">        author VARCHAR(20),</span><br><span class="line">        publishDate DATETIME</span><br><span class="line">    );</span><br><span class="line">    										【】代表可选</span><br><span class="line">## ALTER 修改表</span><br><span class="line">	##修改列名</span><br><span class="line">		ALTER TABLE 表名 CHANGE COLUMN 列名 新列名 类型;</span><br><span class="line">		</span><br><span class="line">	##修改列的类型和约束</span><br><span class="line">		ALTER TABLE book MODIFY COLUMN 列名 类型;</span><br><span class="line">		</span><br><span class="line">	##添加新列</span><br><span class="line">		ALTER TABLE author ADD COLUMN 列名 类型;</span><br><span class="line">		</span><br><span class="line">	##删除列</span><br><span class="line">		ALTER TABLE author DROP COLUMN 列名;</span><br><span class="line">		</span><br><span class="line">	##修改表名</span><br><span class="line">		ALTER TABLE 表名 RENAME TO 新表名;</span><br><span class="line"></span><br><span class="line">## DROP 删除表</span><br><span class="line">	DROP TABLE IF EXISTS 表名;</span><br></pre></td></tr></table></figure>

<blockquote>
<blockquote>
<blockquote>
<p><strong>通用写法：</strong></p>
<p>DROP DATABASE IF EXISTS 旧库名;</p>
<p>CREATE DATABASE 新库名;</p>
</blockquote>
<p>​     DROP TABLE IF EXISTS 旧表名;</p>
<p>​     CAEATE TABLE 表名();</p>
</blockquote>
</blockquote>
<h5 id="表的复制"><a href="#表的复制" class="headerlink" title="表的复制"></a>表的复制</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##仅仅复制表的结构</span><br><span class="line">	CREATE TABLE 表名 LIKE 复制源表名;</span><br><span class="line">##复制表的结构和数据</span><br><span class="line">	CREATE TABLE 表名 SELECT * FROM 复制源表名;</span><br><span class="line">    ##复制部分数据</span><br><span class="line">    	CREATE TABLE 表名 SELECT 列名,列名 FROM 复制源表名 WHERE 条件;</span><br><span class="line">》》》语句示例：</span><br><span class="line">		CREATE TABLE copy SELECT id,au_name FROM author WHERE nation &#x3D; &#39;中国&#39;;</span><br><span class="line">	##仅仅复制某些字段</span><br><span class="line">		CREATE TABLE 表名 SELECT 列名,列名 FROM author WHERE 不满足的条件;</span><br><span class="line">》》》语句示例：</span><br><span class="line">		CREATE TABLE copy SELECT id,au_name FROM author WHERE 0;	</span><br></pre></td></tr></table></figure>

<h4 id="五、数据类型"><a href="#五、数据类型" class="headerlink" title="五、数据类型"></a>五、数据类型</h4><hr>
<p><strong>数值型：</strong></p>
<p>​        <strong>整型：</strong></p>
<table>
<thead>
<tr>
<th>整数类型</th>
<th>字节</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td>Tinyint</td>
<td>1</td>
<td>有符号：-128<del>127 <br />无符号：0</del>255</td>
</tr>
<tr>
<td>Smallint</td>
<td>2</td>
<td>有符号：-32768<del>32767<br />无符号：0</del>65535</td>
</tr>
<tr>
<td>Mediumint</td>
<td>3</td>
<td>有符号：-8388608<del>8388607<br />无符号：0</del>1677215</td>
</tr>
<tr>
<td>Int、Integer</td>
<td>4</td>
<td>有符号：-2147483648<del>2147483647<br />无符号：0</del>4294967295</td>
</tr>
<tr>
<td>Bigint</td>
<td>8</td>
<td>有符号：-9223372036854775808<del>9223372036854775807<br />无符号：0</del>9223372036854775807*2+1</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##如何设置有符号和无符号</span><br><span class="line">	CREATE TABLE tab_int(</span><br><span class="line">        t1 int,				有符号（默认）</span><br><span class="line">        t2 int UNSIGNED		无符号</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">##如果插入的数值超出了整型的范围，会报out of range异常，并且插入临界值</span><br><span class="line"></span><br><span class="line">##如果不设置长度，int有符号默认长度为11，无符号默认长度为10</span><br><span class="line">	##长度代表显示的最大宽度，如果不够会用0在左边填充 但必须搭配zerofill使用</span><br></pre></td></tr></table></figure>

<p>​    <strong>小数：</strong></p>
<p>​                <strong>定点数</strong></p>
<table>
<thead>
<tr>
<th>定点数类型</th>
<th>字节</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td>DEC(M,D)<br />DECIMAL(M,D)</td>
<td>M+2</td>
<td>最大取值范围与double相同，给定decimal的有效取值范围由M和D决定</td>
</tr>
</tbody></table>
<p>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##特点</span><br><span class="line">	1、M:整数部位+小数部位</span><br><span class="line">	D:小数部位</span><br><span class="line">		如果超过范围，则插入临界值</span><br><span class="line">	</span><br><span class="line">	2、M和D都可以省略，DECIMAL默认为10，0</span><br><span class="line">		如果是float和double会根据插入的数值的精度来决定精度</span><br><span class="line">	</span><br><span class="line">	3、定点型的精确度较高，如果要求插入数值的精度较高考虑使用定点型</span><br></pre></td></tr></table></figure>

<p>​            <strong>浮点数</strong></p>
<table>
<thead>
<tr>
<th>浮点数类型</th>
<th>字节</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>4</td>
<td>±1.75494351E-38~±3.402823466E+38</td>
</tr>
<tr>
<td>double</td>
<td>8</td>
<td>±2.2250738585072014E-308~±1.7976931348623157E+308</td>
</tr>
</tbody></table>
<p>​        <strong>字符型：</strong></p>
<p>​                较短的文本：char、varchar</p>
<table>
<thead>
<tr>
<th>字符串类型</th>
<th>最多字符数</th>
<th>描述及存储需求</th>
</tr>
</thead>
<tbody><tr>
<td>char(M)     M可以省略，默认为1</td>
<td>M</td>
<td>M为0~255之间的整数</td>
</tr>
<tr>
<td>varchar(M)     M不可以省略</td>
<td>M</td>
<td>M为0~65535之间的整数</td>
</tr>
</tbody></table>
<p>​                较长的文本：text、blob(较长的二进制数据)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char 		固定长度的字符		比较耗费空间		效率高</span><br><span class="line">varchar		可变长度的字符		比较节省空间		效率低</span><br></pre></td></tr></table></figure>

<p>​        <strong>日期型：</strong>        </p>
<table>
<thead>
<tr>
<th>日期和时间类型</th>
<th>字节</th>
<th>最小值</th>
<th>最大值</th>
</tr>
</thead>
<tbody><tr>
<td>date</td>
<td>4</td>
<td>1000-01-01</td>
<td>9999-12-31</td>
</tr>
<tr>
<td>datetime</td>
<td>8</td>
<td>1000-01-01  00:00:00</td>
<td>9999-12-31  23:59:59</td>
</tr>
<tr>
<td>timestamp</td>
<td>4</td>
<td>19700101080001</td>
<td>2038年的某个时刻</td>
</tr>
<tr>
<td>time</td>
<td>3</td>
<td>-838:59:59</td>
<td>838:59:59</td>
</tr>
<tr>
<td>year</td>
<td>1</td>
<td>1901</td>
<td>2155</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##datetime 不受时区影响</span><br><span class="line"></span><br><span class="line">##timestamp  受时区影响</span><br></pre></td></tr></table></figure>

<h4 id="六、约束"><a href="#六、约束" class="headerlink" title="六、约束"></a>六、约束</h4><hr>
<h5 id="六大约束"><a href="#六大约束" class="headerlink" title="六大约束"></a>六大约束</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NOT NULL		非空约束，用于保证该字段的值不能为空</span><br><span class="line"></span><br><span class="line">DEFAULT			默认，用于保证该字段有默认值</span><br><span class="line"></span><br><span class="line">PRIMARY KEY		主键，用于保证该字段的值具有唯一性，并且非空</span><br><span class="line"></span><br><span class="line">UNIQUE			唯一约束，用于保证该字段的值具有唯一性，可以为空</span><br><span class="line"></span><br><span class="line">CHECK			检查约束			##mysql不支持</span><br><span class="line"></span><br><span class="line">FOREIGN KEY		外键约束，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##创建表时添加列级约束</span><br><span class="line">	CREATE TABLE stuinfo(</span><br><span class="line">    	id INT PRIMARY KEY,		#主键</span><br><span class="line">        stuName VARCHAR(20) NOT NULL,	#非空</span><br><span class="line">        sex CHAR(1) CHECK(gender &#x3D; &#39;男&#39; OR gender &#x3D; &#39;女&#39;),	#检查</span><br><span class="line">        seat INT UNIQUE,	#唯一</span><br><span class="line">        age INT DEFAULT 18,		#默认约束</span><br><span class="line">        majorId INT REFERENCES major(id)	#外键 </span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    CREATE TABLE major(</span><br><span class="line">    	id INT PRIMARY KEY,		</span><br><span class="line">        marjorName VARCHAR(20)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##创建表时添加表级约束</span><br><span class="line">	【CONSTRAINT  约束名】  约束类型(字段名)</span><br><span class="line">													【】可省略</span><br><span class="line">	CREATE TABLE stuinfo(</span><br><span class="line">    	id INT,</span><br><span class="line">        stuName VARCHAR(20),</span><br><span class="line">        seat INT,</span><br><span class="line">        gender CHAR(1),</span><br><span class="line">        age INT,</span><br><span class="line">        majorId INT,</span><br><span class="line">        </span><br><span class="line">        CONSTRAINT pk PRIMARY KEY (id),		#主键</span><br><span class="line">        CONSTRAINT uq UNIQUE(seat),		#唯一键</span><br><span class="line">        CONSTRAINT ck CHECK(gender),	#检查</span><br><span class="line">        CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorId)REFERENCES major(id)	#外键</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##通用的写法</span><br><span class="line">	CREATE TABLE IF NOT EXISTS stuinfo(</span><br><span class="line">    	id INT PRIMARY KEY,</span><br><span class="line">        stuname VARCHAR(20) NOT NULL,</span><br><span class="line">        sex CHAR(1),</span><br><span class="line">        age INT DEFAULT 18,</span><br><span class="line">        seat INT UNIQUE,</span><br><span class="line">        majorid INT,</span><br><span class="line">        CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id) </span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<h6 id="主键和唯一的区别"><a href="#主键和唯一的区别" class="headerlink" title="主键和唯一的区别"></a>主键和唯一的区别</h6><table>
<thead>
<tr>
<th></th>
<th>保证唯一性</th>
<th>是否允许为空</th>
<th>一个表中可以有多少个</th>
<th>是否允许组合</th>
</tr>
</thead>
<tbody><tr>
<td>主键</td>
<td>√</td>
<td>×</td>
<td>至多有1个</td>
<td>√（不推荐）</td>
</tr>
<tr>
<td>唯一</td>
<td>√</td>
<td>√</td>
<td>可以有多个</td>
<td>√（不推荐）</td>
</tr>
</tbody></table>
<h6 id="外键的特点"><a href="#外键的特点" class="headerlink" title="外键的特点"></a>外键的特点</h6><p>​    1、要求在从表设置外键关系</p>
<p>​    2、从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求</p>
<p>​    3、主表的关联列必须是一个key（一般是主键或唯一）</p>
<p>​    4、插入数据时，先插入主表，再插入从表；删除数据时，先删除从表，再删除主表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##修改表时添加约束</span><br><span class="line">##添加列级约束</span><br><span class="line">	ALTER TABLE 表名 MODIFY COLUMN 字段名 字段类型 新约束;</span><br><span class="line">##添加表级约束</span><br><span class="line">	ALTER TABLE 表名 ADD 【CONSTRAINT 约束名】约束类型 (字段名) 【外键的引用】;</span><br><span class="line">																	【】可省略</span><br><span class="line"></span><br><span class="line">	##1、添加非空约束</span><br><span class="line">	ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NOT NULL;</span><br><span class="line">	</span><br><span class="line">	##2、添加默认约束</span><br><span class="line">	ALTER TABLE stuinfo MODIFY COLUMN age INT DEFAULT 18;</span><br><span class="line">	</span><br><span class="line">	##3、添加主键</span><br><span class="line">	ALTER TABLE stuinfo MODIFY COLUMN id INT PRIMARY KEY;</span><br><span class="line">或  ALTER TABLE stuinfo ADD PRIMARY KEY(id);</span><br><span class="line"></span><br><span class="line">	##4、添加唯一键</span><br><span class="line">	ALTER TABLE stuinfo MODIFY COLUMN seat INT UNIQUE;</span><br><span class="line">或  ALTER TABLE stuinfo ADD UNIQUE(seat);</span><br><span class="line"></span><br><span class="line">	##5、添加外键</span><br><span class="line">	ALTER TABLE stuinfo ADD FOREIGN KEY(majorid) REFERENCES major(id);</span><br><span class="line"> 	ALTER TABLE stuinfo ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id);  #添加名字</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##删除表时删除约束</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	##1、删除非空约束</span><br><span class="line">	ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;</span><br><span class="line">	</span><br><span class="line">	##2、删除默认约束</span><br><span class="line">	ALTER TABLE stuinfo MODIFY COLUMN age INT;</span><br><span class="line">	</span><br><span class="line">	##3、删除主键</span><br><span class="line">	ALTER TABLE stuinfo DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">	##4、删除唯一键</span><br><span class="line">	ALTER TABLE stuinfo DROP INDEX seat;</span><br><span class="line"></span><br><span class="line">	##5、删除外键</span><br><span class="line">	ALTER TABLE stuinfo DROP FOREIGN KEY fk_stuinfo_major;</span><br></pre></td></tr></table></figure>

<h5 id="标识列"><a href="#标识列" class="headerlink" title="标识列"></a>标识列</h5><p>​            又称自增长列，可以不用手动的插入值，系统提供默认的序列值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##创建表时设置标识列</span><br><span class="line">	CREATE TABLE tab_identity(</span><br><span class="line">    	id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">        name VARCHAR(30)</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    ##修改自增步长</span><br><span class="line">    SET auto_increment_increment &#x3D; 3;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">##特点：</span><br><span class="line">	##1、标识列不必须和主键搭配，但要求是一个key</span><br><span class="line">	##2、一个表中只能有一个标识列</span><br><span class="line">	##3、标识列仅支持数值型（int float double）</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">##修改表时设置标识列</span><br><span class="line">	ALTER TABLE tab_indentity MODIFY COLUMN id INT PRIMARY KEY AUTO_INCREMENT;</span><br><span class="line">	</span><br><span class="line">##修改表时删除标识列</span><br><span class="line">	ALTER TABLE tab_indentity MODIFY COLUMN id INT;</span><br></pre></td></tr></table></figure>

<h4 id="七、事务控制语言（TCL）"><a href="#七、事务控制语言（TCL）" class="headerlink" title="七、事务控制语言（TCL）"></a>七、事务控制语言（TCL）</h4><hr>
<h5 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h5><p>​    一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##事务的属性</span><br><span class="line"></span><br><span class="line">	#1、原子性</span><br><span class="line">		指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</span><br><span class="line">	#2、一致性</span><br><span class="line">		事务必须使数据库从一个一致状态切换到另一个一致状态。</span><br><span class="line">	#3、隔离性</span><br><span class="line">		指一个事务的执行不能被其它事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</span><br><span class="line">	#4、持久性</span><br><span class="line">		指一个事务一旦被提交，它对数据库的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##事务的创建</span><br><span class="line">	#隐式事务：事务没有明显的开启和结束的标记</span><br><span class="line">	比如：insert、update、delete语句</span><br><span class="line">	</span><br><span class="line">	#显式事务：事务具有明显的开启和结束的标记</span><br><span class="line">	&gt;&gt;&gt;前提：必须先设置自动提交功能为禁用</span><br><span class="line">		SET autocommit &#x3D; 0;		#只对当前事务有效</span><br><span class="line">	#步骤1：开启事务</span><br><span class="line">		SET autocommit &#x3D; 0;</span><br><span class="line">		start transaction;		#可选</span><br><span class="line">	#步骤2：编写事务中的sql语句 (select、insert、update、delete)</span><br><span class="line">		语句1；</span><br><span class="line">		语句2；</span><br><span class="line">		...</span><br><span class="line">	#步骤3：结束事务</span><br><span class="line">		commit;		#提交事务</span><br><span class="line">		rollback;	#回滚事务</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##事务的并发问题</span><br><span class="line">	#1、脏读</span><br><span class="line">		对于两个事务T1,T2,T1读取了已经被T2更新但还没被提交的字段，之后，若T2回滚，T1读取的内容就是临时且无效的</span><br><span class="line">	#2、不可重复读</span><br><span class="line">		对于两个事务T1,T2,T1读取了一个字段，然后T2更新了该字段，之后，T1再次读取同一字段，值就不同了。</span><br><span class="line">	#3、幻读</span><br><span class="line">		对于两个事务T1,T2,T1从一个表中读取了一个字段，然后T2在该表中插入了一些新的行，之后，如果T1再次读取同一个表，就会多出几行。</span><br><span class="line"></span><br><span class="line">##数据库事务的隔离性</span><br><span class="line">	#READ UNCOMMITTED(读未提交数据)：允许事务读取未被其他事务提交的变更，会出现脏读、不可重复读、幻读</span><br><span class="line">	#READ COMMITED(读已提交数据)：只允许事务读取已经被其他事务提交的变更，可以避免脏读，但会出现不可重复读和幻读</span><br><span class="line">	#REPEATABLE READ(可重复读)：确保事务可以多次从一个字段中读取相同的值，在这个事务持续期间，禁止其他事务对这个字段进行更新，可以避免脏读和不可重复读，但会出现幻读</span><br><span class="line">	#SERIALIZABLE(序列化)：确保事务可以从一个表中读取相同的行，在这个事务持续期间，禁止其他事务对该表执行插入、更新、删除操作，所有并发问题都可以避免，但性能十分低下</span><br><span class="line"></span><br><span class="line">	MySql支持4种事务隔离级别，MySql默认的隔离级别为 REPEATABLE READ</span><br><span class="line">	</span><br><span class="line">	ORACLE支持2种事务隔离级别，默认的隔离级别 READ COMMITED</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##查看事务隔离级别</span><br><span class="line">	SELECT @@tx_isolation;</span><br><span class="line">	</span><br><span class="line">##设置事务隔离级别</span><br><span class="line">	SET session transaction isolation level 隔离级别;</span><br><span class="line">	</span><br><span class="line">##设置数据库系统的全局隔离级别</span><br><span class="line">	SET GLOBAL transaction isolation level 隔离级别;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##delete和truncate在事务使用时的区别</span><br><span class="line">	DELETE支持回滚 (rollback之后数据还在)</span><br><span class="line">	TRUNCATE不支持回滚 (rollback之后数据不存在)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##savepoint保存点的使用</span><br><span class="line">	SET autocommit &#x3D; 0;</span><br><span class="line">	START TRANSACTION;</span><br><span class="line">	DELETE FROM account WHERE id &#x3D; 25;</span><br><span class="line">	SAVEPOINT a;	#设置保存点</span><br><span class="line">	DELETE FROM account WHERE id &#x3D; 28;</span><br><span class="line">	ROLLBACK TO a;	#回滚到保存点</span><br></pre></td></tr></table></figure>

<h4 id="八、视图"><a href="#八、视图" class="headerlink" title="八、视图"></a>八、视图</h4><hr>
<p>虚拟存在的表，行和列的数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的，只保存了sql逻辑，不保存查询结果。</p>
<p><strong>应用场景：</strong></p>
<p>​            1、多个地方用到同样的查询结果</p>
<p>​            2、该查询结果使用的sql语句较复杂</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##创建视图</span><br><span class="line">	CREATE view 视图名 AS 查询语句;</span><br><span class="line">	</span><br><span class="line">	##视图的好处</span><br><span class="line">		1、重用sql;</span><br><span class="line">		2、简化复杂的sql操作，不必知道它的查询细节;</span><br><span class="line">		3、保护数据，提高安全性</span><br><span class="line"></span><br><span class="line">##视图的修改</span><br><span class="line">	CREATE OR REPLACE VIEW 视图名 AS 查询语句;</span><br><span class="line">或  ALTER VIEW 视图名 AS 查询语句;</span><br><span class="line"></span><br><span class="line">##删除视图</span><br><span class="line">	DROP VIEW 视图名，视图名，...;</span><br><span class="line">	</span><br><span class="line">##查看视图</span><br><span class="line">	DESC 视图名;</span><br><span class="line">或  SHOW CREATE VIEW 视图名;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">》》》案例：查询姓张的学生名和专业名</span><br><span class="line">	SELECT stuname,majorname FROM stuinfo s</span><br><span class="line">		INNER JOIN major m ON s.majorid &#x3D; m.id WHERE s.stuname LIKE &#39;张%&#39;;</span><br><span class="line">	#创建视图</span><br><span class="line">	CREATE VIEW v1</span><br><span class="line">	AS SELECT stuname,majorname FROM stuinfo s INNER JOIN major m ON s.majorid &#x3D; m.id;</span><br><span class="line">	</span><br><span class="line">	##再次查询可直接使用视图</span><br><span class="line">	SELECT * FROM v1 WHERE stuname LIKE &#39;张%&#39;;</span><br></pre></td></tr></table></figure>

<p><strong>视图的注意点</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##具备以下特点的视图不允许更新</span><br><span class="line"></span><br><span class="line">	#1、包含以下关键字的sql语句：分组函数、distinct、group by、having、union、union all</span><br><span class="line">	#2、常量视图</span><br><span class="line">		CREATE OR REPLACE VIEW myv1 AS SELECT &#39;Tom&#39; NAME;</span><br><span class="line">			&gt;&gt;&gt; UPDATE myv1 SET NAME &#x3D; &#39;john&#39;;		[无法执行]</span><br><span class="line">	#3、select中包含子查询</span><br><span class="line">		CREATE OR REPLACE VIEW myv1 AS SELECT(SELECT MAX(salary) FROM employees) 最高工资;</span><br><span class="line">			&gt;&gt;&gt; UPDATE myv1 SET 最高工资&#x3D;10000;		[无法执行]</span><br><span class="line">	#4、join</span><br><span class="line">		CREATE OR REPLACE VIEW myv1 AS </span><br><span class="line">			SELECT last_name,department_name,FROM employees e</span><br><span class="line">				JOIN departments d ON e.department_id &#x3D; d.department_id;</span><br><span class="line">			&gt;&gt;&gt; UPDATE myv1 SET last_name &#x3D; &#39;张飞&#39; WHERE last_name &#x3D; &#39;张无忌&#39;;		[可以执行]</span><br><span class="line">			&gt;&gt;&gt; INSERT INTO myv1 VALUES (&#39;张三丰&#39;,&#39;dsdsadsadfa&#39;);		[无法执行]</span><br><span class="line">	#5、from一个不能更新的视图</span><br><span class="line">		CREATE OR REPLACE VIEW myv1 AS SELECT * FROM myv3;</span><br><span class="line">			&gt;&gt;&gt; UPDATE myv1 SET 最高工资 &#x3D; 10000 WHERE department_id &#x3D; 50;			[无法执行]</span><br><span class="line">	#6、where子句的子查询引用了from子句中的表</span><br><span class="line">    	CREATE OR REPLACE VIEW myv1 </span><br><span class="line">    		AS SELECT last_name,email,salary FROM employees </span><br><span class="line">    			WHERE employee_id IN (</span><br><span class="line">                	SELECT manager_id FROM employees WHERE manager_id IS NOT NULL	</span><br><span class="line">                );</span><br><span class="line">          	&gt;&gt;&gt; UPDATE myv1 SET salary &#x3D; 10000 WHERE last_name &#x3D; &#39;张无忌&#39;;		[无法执行]</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h6 id="视图和表的区别"><a href="#视图和表的区别" class="headerlink" title="视图和表的区别"></a>视图和表的区别</h6><table>
<thead>
<tr>
<th></th>
<th>创建语法关键字</th>
<th>是否实际占用物理空间</th>
<th>使用</th>
</tr>
</thead>
<tbody><tr>
<td>视图</td>
<td>create view</td>
<td>没有，只是保存了sql逻辑</td>
<td>增删改查，一般不能增删改，只做查询</td>
</tr>
<tr>
<td>表</td>
<td>create table</td>
<td>占用，保存了数据</td>
<td>增删改查都可以</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##delete和truncate在事务使用时的区别</span><br><span class="line">	delete可以回滚 truncate不能回滚</span><br></pre></td></tr></table></figure>

<h4 id="九、变量"><a href="#九、变量" class="headerlink" title="九、变量"></a>九、变量</h4><hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##系统变量</span><br><span class="line">	#变量由系统提供，不是用户定义，属于服务器层面</span><br><span class="line">	#系统变量：全局变量、会话变量</span><br><span class="line">	#自定义变量：用户变量、局部变量</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">##查看所有变量</span><br><span class="line">	SHOW GLOBAL|【SESSION】 VARIABLES;</span><br><span class="line">##查看满足条件的部分变量</span><br><span class="line">	SHOW GLOBAL|【SESSION】 VARIABLES LIKE &#39;%char%&#39;;</span><br><span class="line">##查看指定的某个变量的值</span><br><span class="line">	SELECT @@GLOBAL|【SESSION】.系统变量名;</span><br><span class="line">##为某个变量赋值</span><br><span class="line">	1、 SET GLOBAL|【SESSION】系统变量名 &#x3D; 值;</span><br><span class="line">	2、 SET @@GLOBAL| 【SESSION】.系统变量名 &#x3D; 值;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;如果是全局级别，需要加global，如果是会话级别，需要加session，如果不写，默认为session</span><br><span class="line">	</span><br><span class="line">&gt;&gt;&gt;全局变量作用域：</span><br><span class="line">	服务器每次启动将为所有的全局变量赋初始值，针对于所有的会话（连接）有效，但不能跨重启。【如果需要重启有效需要修改配置文件】</span><br><span class="line">	</span><br><span class="line">&gt;&gt;&gt;会话变量作用域：</span><br><span class="line">	仅仅针对于当前会话（链接）有效</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##自定义变量</span><br><span class="line">	#变量是用户自定义的</span><br><span class="line">	#使用步骤：声明、赋值、使用（查看、比较、运算等）</span><br><span class="line">	</span><br><span class="line">#1、声明并初始化	赋值操作符：&#x3D;或:&#x3D;</span><br><span class="line">	SET @用户变量名 &#x3D; 值;</span><br><span class="line">	SET @用户变量名:&#x3D; 值;</span><br><span class="line">	SELECT @用户变量名:&#x3D; 值;</span><br><span class="line">#2、赋值（更新用户变量的值）</span><br><span class="line">	#方式一：通过SET或SELECT</span><br><span class="line">			SET @用户变量名 &#x3D; 值;</span><br><span class="line">			SET @用户变量名:&#x3D; 值;</span><br><span class="line">			SELECT @用户变量名:&#x3D; 值;</span><br><span class="line">	#方式二：通过SELECT INTO</span><br><span class="line">			SELECT 字段 INTO @变量名 FROM 表;</span><br><span class="line">			</span><br><span class="line">#3、使用（查看用户变量的值）</span><br><span class="line">	SELECT @用户变量名;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;用户变量作用域：</span><br><span class="line">	针对于当前会话（连接）有效，同于会话变量的作用域</span><br><span class="line">	可以应用在任何地方，也就是begin end里面或begin end外面</span><br><span class="line"></span><br><span class="line">#局部变量的使用</span><br><span class="line"></span><br><span class="line">#1、声明</span><br><span class="line">	DECLARE 变量名 类型;</span><br><span class="line">	DECLARE 变量名 类型 DEFAULT 值;</span><br><span class="line">	</span><br><span class="line">#2、赋值</span><br><span class="line">		#方式一：通过SET或SELECT</span><br><span class="line">			SET 局部变量名 &#x3D; 值;</span><br><span class="line">			SET 局部变量名:&#x3D; 值;</span><br><span class="line">			SELECT @局部变量名:&#x3D; 值;</span><br><span class="line">		#方式二：通过SELECT INTO</span><br><span class="line">			SELECT 字段 INTO 局部变量名 FROM 表;</span><br><span class="line"></span><br><span class="line">#3、使用</span><br><span class="line">	SELECT 局部变量名;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;局部变量作用域：</span><br><span class="line">	仅仅在定义它的begin end中有效</span><br><span class="line">	应用在begin end中有效</span><br></pre></td></tr></table></figure>



<h6 id="对比用户变量和局部变量"><a href="#对比用户变量和局部变量" class="headerlink" title="对比用户变量和局部变量"></a>对比用户变量和局部变量</h6><table>
<thead>
<tr>
<th></th>
<th>作用域</th>
<th>定义和使用的位置</th>
<th>语法</th>
</tr>
</thead>
<tbody><tr>
<td>用户变量</td>
<td>当前会话</td>
<td>会话中的任何地方</td>
<td>必须加@符号，不用限定类型</td>
</tr>
<tr>
<td>局部变量</td>
<td>begin end中</td>
<td>只能在begin end中，且为第一句话</td>
<td>一般不用加@符号，需要限定类型</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">》》》案例：声明两个变量并赋初始值，求和并打印</span><br><span class="line">	#用户变量</span><br><span class="line">		SET @m&#x3D;1;</span><br><span class="line">		SET @n&#x3D;2;</span><br><span class="line">		SET @sum&#x3D;@m+@n;</span><br><span class="line">		</span><br><span class="line">		SELECT @sum;</span><br><span class="line">	</span><br><span class="line">	#局部变量</span><br><span class="line">		DECLARE m INT DEFAULT 1;</span><br><span class="line">		DECLARE n INT DEFAULT 2;</span><br><span class="line">		DECLARE SUM INT;</span><br><span class="line">		SET SUM &#x3D; m+n;</span><br><span class="line">		</span><br><span class="line">		SELECT SUM;							[报错，只能在 begin end 中声明使用]</span><br></pre></td></tr></table></figure>



<h4 id="十、存储过程"><a href="#十、存储过程" class="headerlink" title="十、存储过程"></a>十、存储过程</h4><hr>
<p><strong>存储过程和函数：</strong>类似于Java中的方法</p>
<p><strong>好处：</strong></p>
<p>​    1、提高代码的重用性</p>
<p>​    2、简化操作</p>
<p>​    3、减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</p>
<p><strong>含义：</strong>一组预先编译好的sql语句的集合，理解成批处理语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##创建语法</span><br><span class="line">	CREATE PROCEDURE 存储过程名(参数列表)</span><br><span class="line">	BEGIN</span><br><span class="line">		存储过程体（一组合法的SQL语句）</span><br><span class="line">	END;</span><br><span class="line">	</span><br><span class="line">	#注意：</span><br><span class="line">		1、参数列表包含三部分</span><br><span class="line">			参数模式 参数名 参数类型</span><br><span class="line">		》》》举例：</span><br><span class="line">			IN stuname VARCHAR(20)</span><br><span class="line">			#参数模式：</span><br><span class="line">				IN:该参数可以作为输入，也就是该参数需要调用方传入值</span><br><span class="line">				OUT:该参数可以作为输出，也就是该参数可以作为返回值</span><br><span class="line">                INOUT:该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以返回值</span><br><span class="line">        2、如果存储过程体仅仅只有一句话， BEGIN END 可以省略</span><br><span class="line">        	存储过程体中的每条SQL语句的结尾要求必须加分号</span><br><span class="line">        	存储过程的结尾可以使用 DELIMITER 重新设置</span><br><span class="line">        	》》》语法;</span><br><span class="line">        			DELIMITER 结束标记;</span><br><span class="line">        			例如： DELIMITER $</span><br><span class="line">##调用语法</span><br><span class="line">	CALL 存储过程名(实参列表);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##空参列表</span><br><span class="line">	》》》案例：插入到admin表中五条记录	(需要在dos窗口)</span><br><span class="line">		DELIMITER $</span><br><span class="line">		CREATE PROCEDURE myp1 ()</span><br><span class="line">        BEGIN </span><br><span class="line">        	INSERT INTO admin(username,password) </span><br><span class="line">        		VALUES(&#39;Tom&#39;,&#39;0000&#39;),(&#39;john&#39;,&#39;1111&#39;),(&#39;lily&#39;,&#39;2222&#39;),(&#39;york&#39;,&#39;3333&#39;),(&#39;rock&#39;,&#39;4444&#39;);</span><br><span class="line">        END $</span><br><span class="line">		#调用</span><br><span class="line">		CALL myp1()$</span><br><span class="line">	</span><br><span class="line">##创建带IN模式参数的存储过程</span><br><span class="line">	》》》案例1：创建存储过程实现 根据女神名，查询对应的男神信息</span><br><span class="line">		CREATE PROCEDURE myp2 (IN beautyName VARCHAR(20))</span><br><span class="line">		BEGIN</span><br><span class="line">        	SELECT bo.* FROM boys bo RIGHT JOIN beauty b ON bo.id &#x3D; b.boyfriend_id</span><br><span class="line">        		WHERE b.name &#x3D; beautyName;</span><br><span class="line">        END $</span><br><span class="line">        #调用</span><br><span class="line">        CALL myp2(&#39;唐艺昕&#39;)$</span><br><span class="line">        </span><br><span class="line">	》》》案例2：创建存储过程实现 用户是否登录成功</span><br><span class="line">		CREATE PROCEDURE myp3 (IN userame VARCHAR(20),IN PASSWORD VARCHAR(20))</span><br><span class="line">		BEGIN</span><br><span class="line">			DECLARE result VARCHAR(20) DEFAULT &#39;&#39;;		#声明并初始化</span><br><span class="line">        	SELECT COUNT(*) INTO result 		#赋值</span><br><span class="line">        	FROM admin WHERE admin.username &#x3D; username AND admin.password &#x3D; PASSWORD;</span><br><span class="line">        	</span><br><span class="line">        	SELECT result;		#使用</span><br><span class="line">        END $</span><br><span class="line">        #调用</span><br><span class="line">        CALL myp3(&#39;张飞&#39;,&#39;8888&#39;)$</span><br><span class="line">        </span><br><span class="line">##创建带out模式的存储过程</span><br><span class="line">	》》》案例1：根据女神名，返回对应的男神名</span><br><span class="line">		CREATE PROCEDURE myp5(IN beautyName VARCHAR(20),OUT boyName VARCHAR(20))</span><br><span class="line">		BEGIN</span><br><span class="line">			SELECT bo.boyName INTO boyName</span><br><span class="line">			FROM boys bo</span><br><span class="line">			INNER JOIN beauty b ON bo.id &#x3D; b.boyfriend_id</span><br><span class="line">			WHERE b.name &#x3D; beautyName;</span><br><span class="line">		END $</span><br><span class="line">		#调用</span><br><span class="line">		CALL myp5(&#39;小昭&#39;,@bName)$</span><br><span class="line">		SELECT @bName$</span><br><span class="line">		</span><br><span class="line">	》》》案例2：根据女神名，返回对应的男神名和男神魅力值</span><br><span class="line">		CREATE PROCEDURE myp6(IN beautyName VARCHAR(20),OUT boyName VARCHAR(20),OUT userCP INT)</span><br><span class="line">		BEGIN</span><br><span class="line">			SELECT bo.boyName,bo.userCP INTO boyName, userCP</span><br><span class="line">			FROM boys bo</span><br><span class="line">			INNER JOIN beauty b ON bo.id &#x3D; b.boyfriend_id</span><br><span class="line">			WHERE b.name &#x3D; beautyName;</span><br><span class="line">		END $</span><br><span class="line">		#调用</span><br><span class="line">		CALL myp6(&#39;小昭&#39;,@bName,@userCP)$</span><br><span class="line">		</span><br><span class="line">##创建带inout模式参数的存储过程</span><br><span class="line">	》》》案例1：传入A和B两个值，最终A和B都翻倍返回</span><br><span class="line">		CREATE PROCEDURE myp8(INOUT a INT,INOUT b INT)</span><br><span class="line">		BEGIN</span><br><span class="line">			SET a&#x3D;a*2;</span><br><span class="line">			SET b&#x3D;b*2;</span><br><span class="line">		END $</span><br><span class="line">		#调用(不能直接调用，需要先创建两个用户变量)</span><br><span class="line">		SET @m&#x3D;10$</span><br><span class="line">		</span><br><span class="line">		SET @n&#x3D;20$</span><br><span class="line">		</span><br><span class="line">		CALL myp8(@m,@n)$</span><br><span class="line">		</span><br><span class="line">		SELECT @m,@n$</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##存储过程的删除</span><br><span class="line">	DROP PROCEDURE 存储过程名;</span><br><span class="line">	</span><br><span class="line">##查看存储过程的信息</span><br><span class="line">	SHOW CREATE PROCEDURE 存储过程名;</span><br></pre></td></tr></table></figure>

<h4 id="十一、函数"><a href="#十一、函数" class="headerlink" title="十一、函数"></a>十一、函数</h4><hr>
<p><strong>含义：</strong>一组预先编译好的sql语句的集合，理解成批处理语句</p>
<p><strong>好处：</strong></p>
<p>​    1、提高代码的重用性</p>
<p>​    2、简化操作</p>
<p>​    3、减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</p>
<p><strong>和存储过程的区别：</strong></p>
<p>​    存储过程：可以有0个返回，也可以有多个返回，适合做批量插入、批量更新</p>
<p>​    函数：有且仅有一个返回，适合做处理数据后返回一个结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##创建语法</span><br><span class="line">	CREATE FUNCTION 函数名(参数列表) RETURNS 返回类型;</span><br><span class="line">	BEGIN</span><br><span class="line">		函数体</span><br><span class="line">	END</span><br><span class="line">	</span><br><span class="line">	#注意：</span><br><span class="line">		1、参数列表包含两部分：</span><br><span class="line">			参数名	参数类型</span><br><span class="line">		</span><br><span class="line">		2、函数体：</span><br><span class="line">			肯定会有return语句，如果没有会报错</span><br><span class="line">            	如果return语句没有放在函数体的最后也不报错，但不建议</span><br><span class="line">		3、函数体中仅有一句话，则可以省略 BEGIN END</span><br><span class="line">		4、使用 delimiter 语句作为设置结束标记</span><br><span class="line">		</span><br><span class="line">##调用</span><br><span class="line">	SELECT 函数名(参数列表)</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">##无参有返回	</span><br><span class="line">》》》案例1：返回公司的员工个数</span><br><span class="line">	CREATE FUNCTION myf1() RETURNS INT</span><br><span class="line">	BEGIN</span><br><span class="line">		DECLARE c INT DEFAULT 0;	#定义变量</span><br><span class="line">		SELECT COUNT(*) INTO c		#赋值</span><br><span class="line">		FROM employees;		</span><br><span class="line">		RETURN c;</span><br><span class="line">	END $</span><br><span class="line">	#查看</span><br><span class="line">	SELECT myf1()$</span><br><span class="line">	</span><br><span class="line">##有参有返回</span><br><span class="line">》》》案例1：根据员工名。返回他的工资</span><br><span class="line">	CREATE FUNCTION myf2(empName VARCHAR(20)) RETURNS DOUBLE</span><br><span class="line">	BEGIN</span><br><span class="line">		SET @sal&#x3D;0;		#定义用户变量</span><br><span class="line">		SELECT salary INTO @sal		#赋值</span><br><span class="line">		FROM employees</span><br><span class="line">		WHERE last_name &#x3D; empName;</span><br><span class="line">		RETURN @sal;</span><br><span class="line">	END $</span><br><span class="line">	#查看</span><br><span class="line">	SELECT myf2(&#39;lily&#39;) $</span><br><span class="line"></span><br><span class="line">》》》案例2：根据部门名，返回该部门的平均工资</span><br><span class="line">	CREATE FUNCTION myf3(deptName VARCHAR(20)) RETURNS DOUBLE</span><br><span class="line">	BEGIN</span><br><span class="line">		DECLARE sal DOUBLE;</span><br><span class="line">		SELECT AVG(salary) INTO sal</span><br><span class="line">		FROM employees e</span><br><span class="line">		JOIN departments d ON e.department_id &#x3D; d.department_id</span><br><span class="line">		WHERE d.department_name &#x3D; deptName;</span><br><span class="line">		RETURN sal;</span><br><span class="line">	END $</span><br><span class="line">	#查看</span><br><span class="line">	SELECT myf3(&#39;IT&#39;)$</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">##查看函数</span><br><span class="line">	SHOW CREATE FUNCTION myf3;</span><br><span class="line">	</span><br><span class="line">##删除函数</span><br><span class="line">	DROP FUNCTION myf3;</span><br></pre></td></tr></table></figure>

<h4 id="十二、流程控制结构"><a href="#十二、流程控制结构" class="headerlink" title="十二、流程控制结构"></a>十二、流程控制结构</h4><hr>
<h5 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##if函数</span><br><span class="line">	实现简单的双分支</span><br><span class="line">	#语法：</span><br><span class="line">	if(表达式1，表达式2，表达式3)</span><br><span class="line">	#执行顺序：</span><br><span class="line">		如果表达式1成立，则if函数返回表达式2的值，否则返回表达式3的值</span><br><span class="line"></span><br><span class="line">##case结构</span><br><span class="line">	情况1：类似于Java中的switch语句，一般用于实现等值判断</span><br><span class="line">	情况2：类似于Java中的多重if语句，一般用于实现区间判断</span><br><span class="line">	</span><br><span class="line">	#语法：</span><br><span class="line">		情况1： case 变量|表达式|字段</span><br><span class="line">			   when 要判断的值 then 返回的值1或语句1;</span><br><span class="line">			   when 要判断的值 then 返回的值2或语句2;</span><br><span class="line">			   ...</span><br><span class="line">			   else 要返回的值n或语句n;</span><br><span class="line">			   end case;</span><br><span class="line">			   </span><br><span class="line">		情况2： case </span><br><span class="line">			   when 要判断的条件1 then 返回的值1或语句1;</span><br><span class="line">			   when 要判断的条件2 then 返回的值2或语句2;</span><br><span class="line">			   ...</span><br><span class="line">			   else 要返回的值n或语句;</span><br><span class="line">			   end case;</span><br><span class="line"></span><br><span class="line">	#特点：</span><br><span class="line">		1、可以作为表达式，嵌套在其他语句中使用，可以放在任何地方， BEGIN END 中或 BEGIN END 外面</span><br><span class="line">			可以作为独立的语句去使用，只能放在 BEGIN END 中</span><br><span class="line">		2、如果 when 中的值满足或条件成立，则执行对应的 then 后面的语句，并且结束 case </span><br><span class="line">			如果都不满足，则执行 else 中的语句或值</span><br><span class="line">		3、 else 可以省略，如果 else 省略了，并且所有 when 条件下都不满足，则返回 NULL</span><br><span class="line">		</span><br><span class="line">##if结构</span><br><span class="line">	实现多重分支</span><br><span class="line">	#语法：</span><br><span class="line">		if 条件1 then 语句1;</span><br><span class="line">		elseif 条件2 then语句2；</span><br><span class="line">		...</span><br><span class="line">		【 else 语句n】</span><br><span class="line">		end if;</span><br><span class="line">	#应用：</span><br><span class="line">		只能应用在 begin end 中</span><br></pre></td></tr></table></figure>

<h5 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##分类</span><br><span class="line">	while、 loop、 repeat</span><br><span class="line">	</span><br><span class="line">	#循环控制</span><br><span class="line">		iterate类似于 continue,继续，结束本次循环，继续下一次</span><br><span class="line">		leave类似于 break,跳出，结束当前所在循环</span><br><span class="line">      </span><br><span class="line">##while</span><br><span class="line">	#语法：</span><br><span class="line">		【标签:】 while 循环条件 do</span><br><span class="line">				循环体;</span><br><span class="line">				end while 【标签】;</span><br><span class="line">		</span><br><span class="line">##loop</span><br><span class="line">	#语法</span><br><span class="line">		【标签:】 loop</span><br><span class="line">				循环体;</span><br><span class="line">				end loop 【标签】;</span><br><span class="line">				</span><br><span class="line">##repeat</span><br><span class="line">	#语法：</span><br><span class="line">		【标签:】 repeat</span><br><span class="line">				循环体;</span><br><span class="line">				until 结束循环的条件 </span><br><span class="line">				end repeat 【标签】;</span><br></pre></td></tr></table></figure>

<h4 id="十三、存储引擎"><a href="#十三、存储引擎" class="headerlink" title="十三、存储引擎"></a>十三、存储引擎</h4><hr>
<table>
<thead>
<tr>
<th></th>
<th>InnoDB</th>
<th>MyISAM</th>
</tr>
</thead>
<tbody><tr>
<td>主外键</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>事务</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>行表锁</td>
<td>行锁，操作时只锁某一行，不对其他行有影响<br />适合高并发操作</td>
<td>表锁，即使操作一条记录也会锁住整个表<br />不适合高并发操作</td>
</tr>
<tr>
<td>缓存</td>
<td>不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td>
<td>只缓存索引，不缓存真实数据</td>
</tr>
<tr>
<td>表空间</td>
<td>大</td>
<td>小</td>
</tr>
<tr>
<td>关注点</td>
<td>事务</td>
<td>性能</td>
</tr>
<tr>
<td>默认安装</td>
<td>是</td>
<td>是</td>
</tr>
</tbody></table>
<h4 id="十四、索引"><a href="#十四、索引" class="headerlink" title="十四、索引"></a>十四、索引</h4><hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##性能下降SQL慢，执行时间长，等待时间长</span><br><span class="line"></span><br><span class="line">	#原因：</span><br><span class="line">		1、查询语句写的烂</span><br><span class="line">		2、索引失效</span><br><span class="line">			【索引分为单值索引和复合索引】</span><br><span class="line">			CREATE INDEX idx_user_name on user(name)  		#索引名一般为 idx_表名_需要建索引的字段名</span><br><span class="line">			CREATE INDEX idx_user_nameEmail on user(name,email) </span><br><span class="line">		3、关联查询太多 join (设计缺陷或不得已的需求)</span><br><span class="line">		4、服务器调优及各个参数设置(缓冲、线程数等)</span><br></pre></td></tr></table></figure>

<h5 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##索引是什么</span><br><span class="line">	索引是一种排好序的快速查找数据结构</span><br><span class="line">			【索引会影响到 where 后面的筛选条件和 order by 后面的排序】</span><br><span class="line">	</span><br><span class="line">	在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据；</span><br><span class="line">	这样就可以在这些数据结构上实现高级查找算法，这种数据结构，就是#索引</span><br><span class="line">	</span><br><span class="line">	索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上</span><br><span class="line">	</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h5 id="索引的优劣势"><a href="#索引的优劣势" class="headerlink" title="索引的优劣势"></a>索引的优劣势</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##索引的优劣势</span><br><span class="line">	#优势：</span><br><span class="line">		1、提高数据检索效率，降低数据库的IO成本</span><br><span class="line">		2、降低数据排序的成本，降低CPU的消耗</span><br><span class="line">	#劣势：</span><br><span class="line">		1、实际上索引也是一张表，保存了主键和索引字段，并指向实体表的记录，所以索引列也是要占用空间的</span><br><span class="line">		2、虽然索引提高了查询速度，同时会降低更新表的速度，如对表进行增删改，因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</span><br><span class="line">		3、索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花大量时间研究建立最优秀的索引，或优化查询</span><br></pre></td></tr></table></figure>

<h5 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##单值索引</span><br><span class="line">	一个索引只包含单个列，一个表可以有多个单列索引		#建议一个表索引最多不超过5个</span><br><span class="line">	</span><br><span class="line">##唯一索引</span><br><span class="line">	索引列的值必须唯一，但允许有空值</span><br><span class="line">	</span><br><span class="line">##复合索引</span><br><span class="line">	一个索引包含多个列</span><br></pre></td></tr></table></figure>

<h5 id="哪些情况需要建立索引"><a href="#哪些情况需要建立索引" class="headerlink" title="哪些情况需要建立索引"></a>哪些情况需要建立索引</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##哪些情况需要建立索引</span><br><span class="line">	1、主键自动建立唯一索引</span><br><span class="line">	2、频繁作为查询条件的字段应该创建索引</span><br><span class="line">	3、查询中与其它表关联的字段，外键关系建立索引</span><br><span class="line">	4、查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度	#不仅要考虑查的快，还要考虑是否和order by排序诉求撞车</span><br><span class="line">	5、查询中统计或分组字段</span><br><span class="line">	</span><br><span class="line">##不要建立索引</span><br><span class="line">	1、频繁更新的字段不适合建立索引	#因为每次更新不仅更新记录还会更新索引</span><br><span class="line">	2、 where 条件里用不到的字段不创建索引</span><br><span class="line">	3、单键&#x2F;组合索引的选择问题 		#高并发条件下倾向创建组合索引</span><br><span class="line">	4、表记录太少		#300W左右</span><br><span class="line">	5、经常增删改的表</span><br><span class="line">	6、数据重复且分布平均的表字段</span><br><span class="line">		#假如一个表有10万行记录，有一个字段A只有T和F两种值，且每个值的分布概率大约为50%，那么对这种表A字段建立索引一般不会提高数据库的查询速度</span><br><span class="line">		#索引的选择性是指索引列中不同值的数目与表中记录数的比，如果一个表中有2000条记录，表索引列有1980个不同的值，那么这个索引的选择性就是1980&#x2F;2000&#x3D;0.99。</span><br><span class="line">		#一个索引的选择性越接近于1，这个索引的效率就越高</span><br></pre></td></tr></table></figure>

<h5 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##explain属性</span><br><span class="line">	</span><br><span class="line">	#1、id:select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</span><br><span class="line">		1、id相同，执行顺序由上至下</span><br><span class="line">		2、id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</span><br><span class="line">	</span><br><span class="line">	#2、select_type:查询的类型，主要用于区别普通查询，联合查询，子查询等的复杂查询</span><br><span class="line">		#simple：简单的select查询，查询中不包含子查询或者union</span><br><span class="line">		#primary：查询中若包含任何复杂的子部分，最外层查询则被标记为primary</span><br><span class="line">		#subquery：在select或where列表中包含了子查询</span><br><span class="line">		#derived：在from列表中包含的子查询被标记为derived（衍生）MySQL会递归执行这些子查询，把结果放在临时表里</span><br><span class="line">		#union：若第二个select出现在union之后。则被标记为union，若union包含在from子句的子查询中，外层的select将被标记为derived</span><br><span class="line">		#union result:从union表获取结果的select</span><br><span class="line">    	</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
